
MAD_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eea0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000815f8  0800f0a0  0800f0a0  0001f0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08090698  08090698  000b0b54  2**0
                  CONTENTS
  4 .ARM          00000008  08090698  08090698  000a0698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080906a0  080906a0  000b0b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080906a0  080906a0  000a06a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080906a4  080906a4  000a06a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b54  20000000  080906a8  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025dc  20000b54  080911fc  000b0b54  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003130  080911fc  000b3130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000b0b54  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000b0b82  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e217  00000000  00000000  000b0bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004744  00000000  00000000  000ceddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  000d3520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122b  00000000  00000000  000d4cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb8b  00000000  00000000  000d5eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ac7  00000000  00000000  00102a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010776c  00000000  00000000  0012353d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070b4  00000000  00000000  0022acac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00231d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b54 	.word	0x20000b54
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f088 	.word	0x0800f088

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b58 	.word	0x20000b58
 800023c:	0800f088 	.word	0x0800f088

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000600:	4a36      	ldr	r2, [pc, #216]	; (80006dc <MX_ADC1_Init+0xf0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_ADC1_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xf4>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2204      	movs	r2, #4
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_ADC1_Init+0xec>)
 800064e:	f007 fd2f 	bl	80080b0 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f006 f822 	bl	80066a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065c:	2303      	movs	r3, #3
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xec>)
 800066e:	f007 fe71 	bl	8008354 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f006 f812 	bl	80066a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800067c:	230a      	movs	r3, #10
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_ADC1_Init+0xec>)
 800068a:	f007 fe63 	bl	8008354 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f006 f804 	bl	80066a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000698:	2309      	movs	r3, #9
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a6:	f007 fe55 	bl	8008354 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b0:	f005 fff6 	bl	80066a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006c2:	f007 fe47 	bl	8008354 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006cc:	f005 ffe8 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000b70 	.word	0x20000b70
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a49      	ldr	r2, [pc, #292]	; (8000828 <HAL_ADC_MspInit+0x144>)
 8000702:	4293      	cmp	r3, r2
 8000704:	f040 808c 	bne.w	8000820 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000708:	4b48      	ldr	r3, [pc, #288]	; (800082c <HAL_ADC_MspInit+0x148>)
 800070a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070c:	4a47      	ldr	r2, [pc, #284]	; (800082c <HAL_ADC_MspInit+0x148>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000712:	6453      	str	r3, [r2, #68]	; 0x44
 8000714:	4b45      	ldr	r3, [pc, #276]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	4a41      	ldr	r2, [pc, #260]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6313      	str	r3, [r2, #48]	; 0x30
 800072c:	4b3f      	ldr	r3, [pc, #252]	; (800082c <HAL_ADC_MspInit+0x148>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <HAL_ADC_MspInit+0x148>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a3b      	ldr	r2, [pc, #236]	; (800082c <HAL_ADC_MspInit+0x148>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a35      	ldr	r2, [pc, #212]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_ADC_MspInit+0x148>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000768:	2305      	movs	r3, #5
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <HAL_ADC_MspInit+0x14c>)
 800077c:	f008 fd46 	bl	800920c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000780:	2308      	movs	r3, #8
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	4828      	ldr	r0, [pc, #160]	; (8000834 <HAL_ADC_MspInit+0x150>)
 8000794:	f008 fd3a 	bl	800920c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <HAL_ADC_MspInit+0x154>)
 80007ac:	f008 fd2e 	bl	800920c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <HAL_ADC_MspInit+0x15c>)
 80007b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000806:	f008 f989 	bl	8008b1c <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000810:	f005 ff46 	bl	80066a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_ADC_MspInit+0x158>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3730      	adds	r7, #48	; 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012000 	.word	0x40012000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020400 	.word	0x40020400
 800083c:	20000bb8 	.word	0x20000bb8
 8000840:	40026410 	.word	0x40026410

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x38>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <MX_DMA_Init+0x38>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x38>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2038      	movs	r0, #56	; 0x38
 8000868:	f008 f921 	bl	8008aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800086c:	2038      	movs	r0, #56	; 0x38
 800086e:	f008 f93a 	bl	8008ae6 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <Vector2_init>:
printVector(Vector2 v){
	char str[40];
	sprintf(str,"vector x: %d y: %d\n",v.x,v.y);
	printOut(str);
}
Vector2 Vector2_init(int x,int y){
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	Vector2 v = {x,y};
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	return v;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <Add>:
Vector2 Add(Vector2 v1,Vector2 v2){
 80008b0:	b082      	sub	sp, #8
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	1d38      	adds	r0, r7, #4
 80008bc:	e880 0006 	stmia.w	r0, {r1, r2}
 80008c0:	61fb      	str	r3, [r7, #28]
	v1.x+=v2.x;
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	4413      	add	r3, r2
 80008c8:	607b      	str	r3, [r7, #4]
	v1.y+=v2.y;
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	4413      	add	r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
	return v1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	461a      	mov	r2, r3
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	b002      	add	sp, #8
 80008ec:	4770      	bx	lr

080008ee <Sub>:
Vector2 Sub(Vector2 v1,Vector2 v2){
 80008ee:	b082      	sub	sp, #8
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	1d38      	adds	r0, r7, #4
 80008fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80008fe:	61fb      	str	r3, [r7, #28]
	v1.x-=v2.x;
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	607b      	str	r3, [r7, #4]
	v1.y-=v2.y;
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	60bb      	str	r3, [r7, #8]
	return v1;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	461a      	mov	r2, r3
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	e893 0003 	ldmia.w	r3, {r0, r1}
 800091a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	b002      	add	sp, #8
 800092a:	4770      	bx	lr

0800092c <Multiply_vector>:
Vector2 Multiply_int(Vector2 v1,int m){
	v1.x*=m;
	v1.y*=m;
	return v1;
}
Vector2 Multiply_vector(Vector2 v1,Vector2 v2){
 800092c:	b082      	sub	sp, #8
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	1d38      	adds	r0, r7, #4
 8000938:	e880 0006 	stmia.w	r0, {r1, r2}
 800093c:	61fb      	str	r3, [r7, #28]
	v1.x*=v2.x;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	fb02 f303 	mul.w	r3, r2, r3
 8000946:	607b      	str	r3, [r7, #4]
	v1.y*=v2.y;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	60bb      	str	r3, [r7, #8]
	return v1;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	461a      	mov	r2, r3
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800095c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	b002      	add	sp, #8
 800096c:	4770      	bx	lr

0800096e <Divide_int>:
Vector2 Divide_int(Vector2 v1,int d){
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	e880 0006 	stmia.w	r0, {r1, r2}
 800097c:	603b      	str	r3, [r7, #0]
	v1.x/=d;
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	fb92 f3f3 	sdiv	r3, r2, r3
 8000986:	607b      	str	r3, [r7, #4]
	v1.y/=d;
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000990:	60bb      	str	r3, [r7, #8]
	return v1;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	461a      	mov	r2, r3
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	e893 0003 	ldmia.w	r3, {r0, r1}
 800099c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <Divide_vector>:
Vector2 Divide_vector(Vector2 v1,Vector2 v2){
 80009ac:	b082      	sub	sp, #8
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	1d38      	adds	r0, r7, #4
 80009b8:	e880 0006 	stmia.w	r0, {r1, r2}
 80009bc:	61fb      	str	r3, [r7, #28]
	v1.x/=v2.x;
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c6:	607b      	str	r3, [r7, #4]
	v1.y/=v2.y;
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d0:	60bb      	str	r3, [r7, #8]
	return v1;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	461a      	mov	r2, r3
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	b002      	add	sp, #8
 80009ec:	4770      	bx	lr

080009ee <Equal>:
bool Equal(Vector2 v1,Vector2 v2){
 80009ee:	b490      	push	{r4, r7}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	f107 0408 	add.w	r4, r7, #8
 80009f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80009fc:	4639      	mov	r1, r7
 80009fe:	e881 000c 	stmia.w	r1, {r2, r3}
	return (v1.x == v2.x)&&(v1.y==v2.y);
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d105      	bne.n	8000a16 <Equal+0x28>
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d101      	bne.n	8000a16 <Equal+0x28>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <Equal+0x2a>
 8000a16:	2300      	movs	r3, #0
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc90      	pop	{r4, r7}
 8000a26:	4770      	bx	lr

08000a28 <getOffsetOrigin>:
Vector2 getOffsetOrigin(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	return Sub(offset,Divide_int(cellSize,2)) ;
 8000a30:	f107 0008 	add.w	r0, r7, #8
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <getOffsetOrigin+0x30>)
 8000a36:	2302      	movs	r3, #2
 8000a38:	ca06      	ldmia	r2, {r1, r2}
 8000a3a:	f7ff ff98 	bl	800096e <Divide_int>
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <getOffsetOrigin+0x34>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	ca06      	ldmia	r2, {r1, r2}
 8000a4a:	f7ff ff50 	bl	80008ee <Sub>
}
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000134 	.word	0x20000134
 8000a5c:	20000124 	.word	0x20000124

08000a60 <toIndex>:
Vector2 toIndex(Vector2 position){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	e883 0006 	stmia.w	r3, {r1, r2}
	return Divide_vector(Sub(position,getOffsetOrigin()),cellSize);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffd8 	bl	8000a28 <getOffsetOrigin>
 8000a78:	f107 0018 	add.w	r0, r7, #24
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	1d3a      	adds	r2, r7, #4
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	f7ff ff32 	bl	80008ee <Sub>
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <toIndex+0x48>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f107 0218 	add.w	r2, r7, #24
 8000a98:	ca06      	ldmia	r2, {r1, r2}
 8000a9a:	f7ff ff87 	bl	80009ac <Divide_vector>
}
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000134 	.word	0x20000134

08000aac <toPosition>:
Vector2 toPosition(Vector2 index){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	e883 0006 	stmia.w	r3, {r1, r2}
	return Add(offset,Multiply_vector(cellSize,index));
 8000aba:	f107 0010 	add.w	r0, r7, #16
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <toPosition+0x38>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ca06      	ldmia	r2, {r1, r2}
 8000ac8:	f7ff ff30 	bl	800092c <Multiply_vector>
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <toPosition+0x3c>)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	ca06      	ldmia	r2, {r1, r2}
 8000ad8:	f7ff feea 	bl	80008b0 <Add>
}
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000134 	.word	0x20000134
 8000ae8:	20000124 	.word	0x20000124

08000aec <Transform_init>:
//Vector End

//Transform Start
Transform Transform_init(Vector2 position,Vector2 size,PivotType type){
 8000aec:	b082      	sub	sp, #8
 8000aee:	b4b0      	push	{r4, r5, r7}
 8000af0:	b08b      	sub	sp, #44	; 0x2c
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	1d38      	adds	r0, r7, #4
 8000af8:	e880 0006 	stmia.w	r0, {r1, r2}
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
	Transform trans;
	trans.position = position;
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	1d3a      	adds	r2, r7, #4
 8000b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b08:	e883 0003 	stmia.w	r3, {r0, r1}
	trans.size = size;
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	e883 0003 	stmia.w	r3, {r0, r1}
	trans.pivot = type;
 8000b1c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	return trans;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	461d      	mov	r5, r3
 8000b28:	f107 0414 	add.w	r4, r7, #20
 8000b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	602b      	str	r3, [r5, #0]
}
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	372c      	adds	r7, #44	; 0x2c
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bcb0      	pop	{r4, r5, r7}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr

08000b40 <getLeft>:
int getLeft(Transform* trans){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	switch(trans->pivot%3){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7c1a      	ldrb	r2, [r3, #16]
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <getLeft+0x64>)
 8000b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b52:	0859      	lsrs	r1, r3, #1
 8000b54:	460b      	mov	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d014      	beq.n	8000b8c <getLeft+0x4c>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	dc18      	bgt.n	8000b98 <getLeft+0x58>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <getLeft+0x30>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d003      	beq.n	8000b76 <getLeft+0x36>
 8000b6e:	e013      	b.n	8000b98 <getLeft+0x58>
	case 0 :
		return trans->position.x;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	e010      	b.n	8000b98 <getLeft+0x58>
		break;
	case 1 :
		return trans->position.x - trans->size.x/2;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da00      	bge.n	8000b84 <getLeft+0x44>
 8000b82:	3301      	adds	r3, #1
 8000b84:	105b      	asrs	r3, r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	e005      	b.n	8000b98 <getLeft+0x58>
		break;
	case 2 :
		return trans->position.x - trans->size.x;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	e7ff      	b.n	8000b98 <getLeft+0x58>
		break;
	}
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	aaaaaaab 	.word	0xaaaaaaab

08000ba8 <getRight>:
int getRight(Transform* trans){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	return getLeft(trans)+trans->size.x;
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ffc5 	bl	8000b40 <getLeft>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4413      	add	r3, r2
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <getTop>:
int getTop(Transform* trans){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	switch(trans->pivot/3){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7c1b      	ldrb	r3, [r3, #16]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <getTop+0x5c>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d014      	beq.n	8000c0c <getTop+0x44>
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dc18      	bgt.n	8000c18 <getTop+0x50>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <getTop+0x28>
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d003      	beq.n	8000bf6 <getTop+0x2e>
 8000bee:	e013      	b.n	8000c18 <getTop+0x50>
		case 0 :
			return trans->position.y;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	e010      	b.n	8000c18 <getTop+0x50>
			break;
		case 1 :
			return trans->position.y - trans->size.y/2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da00      	bge.n	8000c04 <getTop+0x3c>
 8000c02:	3301      	adds	r3, #1
 8000c04:	105b      	asrs	r3, r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	e005      	b.n	8000c18 <getTop+0x50>
			break;
		case 2 :
			return trans->position.y - trans->size.y;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	e7ff      	b.n	8000c18 <getTop+0x50>
			break;
		}
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	aaaaaaab 	.word	0xaaaaaaab

08000c28 <getBottom>:
int getBottom(Transform* trans){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	return getTop(trans)+trans->size.y;
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffc9 	bl	8000bc8 <getTop>
 8000c36:	4602      	mov	r2, r0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4413      	add	r3, r2
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <getTransformOrigin>:
Vector2 getTransformOrigin(Transform* transform){
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
	return Vector2_init(getLeft(transform),getTop(transform));
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	f7ff ff75 	bl	8000b40 <getLeft>
 8000c56:	4604      	mov	r4, r0
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f7ff ffb5 	bl	8000bc8 <getTop>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4621      	mov	r1, r4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe0b 	bl	8000880 <Vector2_init>
}
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}

08000c72 <Draw>:

void Draw(Transform* trans,uint16_t color){
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b089      	sub	sp, #36	; 0x24
 8000c76:	af02      	add	r7, sp, #8
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
	Vector2 origin = getTransformOrigin(trans);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffde 	bl	8000c46 <getTransformOrigin>
	Vector2 endPos = Add(origin,trans->size) ;
 8000c8a:	f107 0008 	add.w	r0, r7, #8
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f107 0210 	add.w	r2, r7, #16
 8000c9a:	ca06      	ldmia	r2, {r1, r2}
 8000c9c:	f7ff fe08 	bl	80008b0 <Add>
	ILI9341_Draw_Filled_Rectangle_Coord(origin.x,origin.y,endPos.x,endPos.y,color);
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	b29c      	uxth	r4, r3
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	f006 fa55 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
	...

08000cc4 <DrawImage>:
void DrawImage(Transform* transform,uint8_t* arr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000cca:	af02      	add	r7, sp, #8
 8000ccc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cd0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000cde:	6019      	str	r1, [r3, #0]
    Vector2 origin = getTransformOrigin(transform);
 8000ce0:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000ce4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ce8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f7ff ffa9 	bl	8000c46 <getTransformOrigin>
    Vector2 endPoint = Add(origin,transform->size);
 8000cf4:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8000cf8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cfc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000d0c:	ca06      	ldmia	r2, {r1, r2}
 8000d0e:	f7ff fdcf 	bl	80008b0 <Add>

    ILI9341_Set_Address(origin.x, origin.y, endPoint.x-1, endPoint.y-1);
 8000d12:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d16:	b298      	uxth	r0, r3
 8000d18:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f006 fba5 	bl	8007480 <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	4834      	ldr	r0, [pc, #208]	; (8000e10 <DrawImage+0x14c>)
 8000d3e:	f008 fc29 	bl	8009594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	4831      	ldr	r0, [pc, #196]	; (8000e10 <DrawImage+0x14c>)
 8000d4a:	f008 fc23 	bl	8009594 <HAL_GPIO_WritePin>

    unsigned char Temp_small_buffer[BURST_MAX_SIZE];
    uint32_t counter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (uint32_t i = 0; i < transform->size.x * transform->size.y * 2 / BURST_MAX_SIZE; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000d5a:	e035      	b.n	8000dc8 <DrawImage+0x104>
    {
        for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d62:	e019      	b.n	8000d98 <DrawImage+0xd4>
        {
            Temp_small_buffer[k] = arr[counter + k];
 8000d64:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000d68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000d72:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d80:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8000d84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d88:	4413      	add	r3, r2
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
        for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000d8e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d92:	3301      	adds	r3, #1
 8000d94:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d98:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da0:	d3e0      	bcc.n	8000d64 <DrawImage+0xa0>
        }
        HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000da2:	f107 0108 	add.w	r1, r7, #8
 8000da6:	230a      	movs	r3, #10
 8000da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <DrawImage+0x150>)
 8000dae:	f009 fe54 	bl	800aa5a <HAL_SPI_Transmit>
        counter += BURST_MAX_SIZE;
 8000db2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000db6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (uint32_t i = 0; i < transform->size.x * transform->size.y * 2 / BURST_MAX_SIZE; i++)
 8000dbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000dc8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dcc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000dd8:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	68d2      	ldr	r2, [r2, #12]
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <DrawImage+0x154>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1112      	asrs	r2, r2, #4
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d3b0      	bcc.n	8000d5c <DrawImage+0x98>
    }
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <DrawImage+0x14c>)
 8000e02:	f008 fbc7 	bl	8009594 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40020800 	.word	0x40020800
 8000e14:	20002e58 	.word	0x20002e58
 8000e18:	10624dd3 	.word	0x10624dd3

08000e1c <isCollision>:
bool isCollision(Transform *trans1,Transform *trans2,Vector2 *vectorOutput){
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b095      	sub	sp, #84	; 0x54
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6178      	str	r0, [r7, #20]
 8000e24:	6139      	str	r1, [r7, #16]
 8000e26:	60fa      	str	r2, [r7, #12]
	if(trans1==NULL||trans2==NULL)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <isCollision+0x18>
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <isCollision+0x1c>
		return false;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e0b6      	b.n	8000fa6 <isCollision+0x18a>
	int r1 = getRight(trans1),r2=getRight(trans2),l1=getLeft(trans1),l2=getLeft(trans2);
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff feb5 	bl	8000ba8 <getRight>
 8000e3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000e40:	6938      	ldr	r0, [r7, #16]
 8000e42:	f7ff feb1 	bl	8000ba8 <getRight>
 8000e46:	64b8      	str	r0, [r7, #72]	; 0x48
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff fe79 	bl	8000b40 <getLeft>
 8000e4e:	6478      	str	r0, [r7, #68]	; 0x44
 8000e50:	6938      	ldr	r0, [r7, #16]
 8000e52:	f7ff fe75 	bl	8000b40 <getLeft>
 8000e56:	6438      	str	r0, [r7, #64]	; 0x40
	int t1 = getTop(trans1),t2=getTop(trans2),b1=getBottom(trans1),b2=getBottom(trans2);
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff feb5 	bl	8000bc8 <getTop>
 8000e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e60:	6938      	ldr	r0, [r7, #16]
 8000e62:	f7ff feb1 	bl	8000bc8 <getTop>
 8000e66:	63b8      	str	r0, [r7, #56]	; 0x38
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff fedd 	bl	8000c28 <getBottom>
 8000e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e70:	6938      	ldr	r0, [r7, #16]
 8000e72:	f7ff fed9 	bl	8000c28 <getBottom>
 8000e76:	6338      	str	r0, [r7, #48]	; 0x30
	Vector2 v = {0,0};
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
	if((inBetween(l2+1,r1,r2)||inBetween(l2,l1,r2-1)||inBetween(l1,l2,r1-1))&&
 8000e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e82:	3301      	adds	r3, #1
 8000e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 fff2 	bl	8006e72 <inBetween>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d113      	bne.n	8000ebc <isCollision+0xa0>
 8000e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e96:	3b01      	subs	r3, #1
 8000e98:	461a      	mov	r2, r3
 8000e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e9e:	f005 ffe8 	bl	8006e72 <inBetween>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <isCollision+0xa0>
 8000ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	461a      	mov	r2, r3
 8000eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000eb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000eb2:	f005 ffde 	bl	8006e72 <inBetween>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d073      	beq.n	8000fa4 <isCollision+0x188>
			(inBetween(t2+1,b1,b2)||inBetween(t2,t1,b2-1)||inBetween(t1,t2,b1-1))){
 8000ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 ffd4 	bl	8006e72 <inBetween>
 8000eca:	4603      	mov	r3, r0
	if((inBetween(l2+1,r1,r2)||inBetween(l2,l1,r2-1)||inBetween(l1,l2,r1-1))&&
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d113      	bne.n	8000ef8 <isCollision+0xdc>
			(inBetween(t2+1,b1,b2)||inBetween(t2,t1,b2-1)||inBetween(t1,t2,b1-1))){
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000eda:	f005 ffca 	bl	8006e72 <inBetween>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <isCollision+0xdc>
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000eec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000eee:	f005 ffc0 	bl	8006e72 <inBetween>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d055      	beq.n	8000fa4 <isCollision+0x188>
		int dst1=l2-r1,dst2=r2-l1;
 8000ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
		int dstX = abs(dst1)<abs(dst2)?dst1:dst2;
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bfb8      	it	lt
 8000f18:	425b      	neglt	r3, r3
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	da01      	bge.n	8000f22 <isCollision+0x106>
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	e000      	b.n	8000f24 <isCollision+0x108>
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
		dst1=t2-b1,dst2=b2-t1;
 8000f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
		int dstY = abs(dst1)<abs(dst2)?dst1:dst2;
 8000f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfb8      	it	lt
 8000f46:	425b      	neglt	r3, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da01      	bge.n	8000f50 <isCollision+0x134>
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	e000      	b.n	8000f52 <isCollision+0x136>
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	623b      	str	r3, [r7, #32]
		*vectorOutput = abs(dstX)<abs(dstY)?Vector2_init(dstX,0) :Vector2_init(0,dstY);
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bfb8      	it	lt
 8000f64:	425b      	neglt	r3, r3
 8000f66:	429a      	cmp	r2, r3
 8000f68:	da0d      	bge.n	8000f86 <isCollision+0x16a>
 8000f6a:	68fc      	ldr	r4, [r7, #12]
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fc84 	bl	8000880 <Vector2_init>
 8000f78:	4622      	mov	r2, r4
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f80:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f84:	e00c      	b.n	8000fa0 <isCollision+0x184>
 8000f86:	68fc      	ldr	r4, [r7, #12]
 8000f88:	463b      	mov	r3, r7
 8000f8a:	6a3a      	ldr	r2, [r7, #32]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc76 	bl	8000880 <Vector2_init>
 8000f94:	4622      	mov	r2, r4
 8000f96:	463b      	mov	r3, r7
 8000f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f9c:	e882 0003 	stmia.w	r2, {r0, r1}
		return true;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <isCollision+0x18a>
	}
	return false;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3754      	adds	r7, #84	; 0x54
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
	...

08000fb0 <Move>:
void Move(Player* player,Vector2 moveDst){
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b0b3      	sub	sp, #204	; 0xcc
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	6178      	str	r0, [r7, #20]
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	e883 0006 	stmia.w	r3, {r1, r2}
	Vector2 dst;
	player->transform.position = Add(player->transform.position,moveDst);
 8000fc0:	697c      	ldr	r4, [r7, #20]
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	ca06      	ldmia	r2, {r1, r2}
 8000fce:	f7ff fc6f 	bl	80008b0 <Add>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fda:	e882 0003 	stmia.w	r2, {r0, r1}
	Vector2 index = getPlayerIndex(player);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	6979      	ldr	r1, [r7, #20]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 ffbf 	bl	8001f68 <getPlayerIndex>
	if(index.x>0)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dd18      	ble.n	8001022 <Move+0x72>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,0)));
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc40 	bl	8000880 <Vector2_init>
 8001000:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	f107 021c 	add.w	r2, r7, #28
 800100e:	ca06      	ldmia	r2, {r1, r2}
 8001010:	f7ff fc4e 	bl	80008b0 <Add>
 8001014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001018:	e893 0006 	ldmia.w	r3, {r1, r2}
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f000 f9d1 	bl	80013c4 <CheckPlayerCollisionAt>
	if(index.y>0)
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd18      	ble.n	800105a <Move+0xaa>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(0,-1)));
 8001028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fc24 	bl	8000880 <Vector2_init>
 8001038:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800103c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001042:	f107 021c 	add.w	r2, r7, #28
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	f7ff fc32 	bl	80008b0 <Add>
 800104c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001050:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f000 f9b5 	bl	80013c4 <CheckPlayerCollisionAt>
	if(index.x<MAP_WIDTH-1)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	2b0b      	cmp	r3, #11
 800105e:	dc17      	bgt.n	8001090 <Move+0xe0>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,0)));
 8001060:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc09 	bl	8000880 <Vector2_init>
 800106e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	f107 021c 	add.w	r2, r7, #28
 800107c:	ca06      	ldmia	r2, {r1, r2}
 800107e:	f7ff fc17 	bl	80008b0 <Add>
 8001082:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001086:	e893 0006 	ldmia.w	r3, {r1, r2}
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f000 f99a 	bl	80013c4 <CheckPlayerCollisionAt>
	if(index.y<MAP_HEIGHT-1)
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b0b      	cmp	r3, #11
 8001094:	dc17      	bgt.n	80010c6 <Move+0x116>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(0,1)));
 8001096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109a:	2201      	movs	r2, #1
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fbee 	bl	8000880 <Vector2_init>
 80010a4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80010a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ae:	f107 021c 	add.w	r2, r7, #28
 80010b2:	ca06      	ldmia	r2, {r1, r2}
 80010b4:	f7ff fbfc 	bl	80008b0 <Add>
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f000 f97f 	bl	80013c4 <CheckPlayerCollisionAt>
	if(index.x>0){
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dd39      	ble.n	8001140 <Move+0x190>
		if(index.y>0){
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd19      	ble.n	8001106 <Move+0x156>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,-1)));
 80010d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fbce 	bl	8000880 <Vector2_init>
 80010e4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80010e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ee:	f107 021c 	add.w	r2, r7, #28
 80010f2:	ca06      	ldmia	r2, {r1, r2}
 80010f4:	f7ff fbdc 	bl	80008b0 <Add>
 80010f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001100:	6978      	ldr	r0, [r7, #20]
 8001102:	f000 f95f 	bl	80013c4 <CheckPlayerCollisionAt>
		}
		if(index.y<MAP_HEIGHT-1){
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b0b      	cmp	r3, #11
 800110a:	dc19      	bgt.n	8001140 <Move+0x190>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,1)));
 800110c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001110:	2201      	movs	r2, #1
 8001112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fbb2 	bl	8000880 <Vector2_init>
 800111c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001128:	f107 021c 	add.w	r2, r7, #28
 800112c:	ca06      	ldmia	r2, {r1, r2}
 800112e:	f7ff fbbf 	bl	80008b0 <Add>
 8001132:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001136:	e893 0006 	ldmia.w	r3, {r1, r2}
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f000 f942 	bl	80013c4 <CheckPlayerCollisionAt>
		}
	}
	if(index.x<MAP_WIDTH-1){
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0b      	cmp	r3, #11
 8001144:	dc3a      	bgt.n	80011bc <Move+0x20c>
		if(index.y>0){
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd1a      	ble.n	8001182 <Move+0x1d2>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,-1)));
 800114c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fb92 	bl	8000880 <Vector2_init>
 800115c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800116a:	f107 021c 	add.w	r2, r7, #28
 800116e:	ca06      	ldmia	r2, {r1, r2}
 8001170:	f7ff fb9e 	bl	80008b0 <Add>
 8001174:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001178:	e893 0006 	ldmia.w	r3, {r1, r2}
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f000 f921 	bl	80013c4 <CheckPlayerCollisionAt>
		}
		if(index.y<MAP_HEIGHT-1){
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	2b0b      	cmp	r3, #11
 8001186:	dc19      	bgt.n	80011bc <Move+0x20c>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,1)));
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	2201      	movs	r2, #1
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fb75 	bl	8000880 <Vector2_init>
 8001196:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800119a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a4:	f107 021c 	add.w	r2, r7, #28
 80011a8:	ca06      	ldmia	r2, {r1, r2}
 80011aa:	f7ff fb81 	bl	80008b0 <Add>
 80011ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f000 f904 	bl	80013c4 <CheckPlayerCollisionAt>
		}
	}
	for(int i=0;i<4;i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80011c2:	e024      	b.n	800120e <Move+0x25e>
		if(isCollision(&player->transform,&walls[i],&dst)){
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a78      	ldr	r2, [pc, #480]	; (80013b4 <Move+0x404>)
 80011d4:	4413      	add	r3, r2
 80011d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fe1e 	bl	8000e1c <isCollision>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00e      	beq.n	8001204 <Move+0x254>
			player->transform.position = Add(player->transform.position,dst);
 80011e6:	697c      	ldr	r4, [r7, #20]
 80011e8:	4638      	mov	r0, r7
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	ca06      	ldmia	r2, {r1, r2}
 80011f4:	f7ff fb5c 	bl	80008b0 <Add>
 80011f8:	4622      	mov	r2, r4
 80011fa:	463b      	mov	r3, r7
 80011fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001200:	e882 0003 	stmia.w	r2, {r0, r1}
	for(int i=0;i<4;i++){
 8001204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001208:	3301      	adds	r3, #1
 800120a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800120e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001212:	2b03      	cmp	r3, #3
 8001214:	ddd6      	ble.n	80011c4 <Move+0x214>
		}
	}
	for(int i=0;i<playerCount;i++){
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800121c:	e03e      	b.n	800129c <Move+0x2ec>
		if(player!=&players[i]&&isCollision(&player->transform,&getCell(getPlayerIndex(&players[i]))->floor,&dst)){
 800121e:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <Move+0x408>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001226:	214c      	movs	r1, #76	; 0x4c
 8001228:	fb01 f303 	mul.w	r3, r1, r3
 800122c:	4413      	add	r3, r2
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	d02e      	beq.n	8001292 <Move+0x2e2>
 8001234:	697c      	ldr	r4, [r7, #20]
 8001236:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <Move+0x408>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800123e:	214c      	movs	r1, #76	; 0x4c
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	441a      	add	r2, r3
 8001246:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fe8b 	bl	8001f68 <getPlayerIndex>
 8001252:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001256:	e893 0003 	ldmia.w	r3, {r0, r1}
 800125a:	f000 fd0d 	bl	8001c78 <getCell>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	461a      	mov	r2, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fdd7 	bl	8000e1c <isCollision>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <Move+0x2e2>
			player->transform.position = Add(player->transform.position,dst);
 8001274:	697c      	ldr	r4, [r7, #20]
 8001276:	4638      	mov	r0, r7
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	ca06      	ldmia	r2, {r1, r2}
 8001282:	f7ff fb15 	bl	80008b0 <Add>
 8001286:	4622      	mov	r2, r4
 8001288:	463b      	mov	r3, r7
 800128a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800128e:	e882 0003 	stmia.w	r2, {r0, r1}
	for(int i=0;i<playerCount;i++){
 8001292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001296:	3301      	adds	r3, #1
 8001298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <Move+0x40c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbba      	blt.n	800121e <Move+0x26e>
		}
	}
	ObjectType type = getCell(index)->objType;
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b0:	f000 fce2 	bl	8001c78 <getCell>
 80012b4:	4603      	mov	r3, r0
 80012b6:	7e1b      	ldrb	r3, [r3, #24]
 80012b8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	switch(type){
 80012bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80012c0:	3b04      	subs	r3, #4
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d86e      	bhi.n	80013a4 <Move+0x3f4>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <Move+0x31c>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	08001369 	.word	0x08001369
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	08001303 	.word	0x08001303
 80012d8:	08001325 	.word	0x08001325
 80012dc:	08001347 	.word	0x08001347
		case SpeedItem :
			if(player->speed<5)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	dc04      	bgt.n	80012f2 <Move+0x342>
				player->speed++;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	619a      	str	r2, [r3, #24]
			clearObject(index,false);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012fc:	f000 fbd4 	bl	8001aa8 <clearObject>
			break;
 8001300:	e053      	b.n	80013aa <Move+0x3fa>
		case BombAmountItem:
			if(player->maxBombCount<5)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b04      	cmp	r3, #4
 8001308:	dc04      	bgt.n	8001314 <Move+0x364>
				player->maxBombCount++;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	61da      	str	r2, [r3, #28]
			clearObject(index,false);
 8001314:	2200      	movs	r2, #0
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800131e:	f000 fbc3 	bl	8001aa8 <clearObject>
			break;
 8001322:	e042      	b.n	80013aa <Move+0x3fa>
		case BombRangeItem:
			if(player->bombRange<5)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	2b04      	cmp	r3, #4
 800132a:	dc04      	bgt.n	8001336 <Move+0x386>
				player->bombRange++;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	621a      	str	r2, [r3, #32]
			clearObject(index,false);
 8001336:	2200      	movs	r2, #0
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001340:	f000 fbb2 	bl	8001aa8 <clearObject>
			break;
 8001344:	e031      	b.n	80013aa <Move+0x3fa>
		case HealthItem:
			if(player->health<5)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2b04      	cmp	r3, #4
 800134c:	dc04      	bgt.n	8001358 <Move+0x3a8>
				player->health++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	615a      	str	r2, [r3, #20]
			clearObject(index,false);
 8001358:	2200      	movs	r2, #0
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001362:	f000 fba1 	bl	8001aa8 <clearObject>
			break;
 8001366:	e020      	b.n	80013aa <Move+0x3fa>
		case DetonateEffectObject:
			if(!player->immortalFlag){
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800136e:	f083 0301 	eor.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d017      	beq.n	80013a8 <Move+0x3f8>
				player->health--;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	615a      	str	r2, [r3, #20]
				player->immortalFlag = true;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				player->initialImmortalTime = TimeTotal;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <Move+0x410>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
				if(player->health<=0)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dc06      	bgt.n	80013a8 <Move+0x3f8>
					player->deadFlag = true;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
			break;
 80013a2:	e001      	b.n	80013a8 <Move+0x3f8>
		default:break;
 80013a4:	bf00      	nop
 80013a6:	e000      	b.n	80013aa <Move+0x3fa>
			break;
 80013a8:	bf00      	nop
	}

}
 80013aa:	bf00      	nop
 80013ac:	37c4      	adds	r7, #196	; 0xc4
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000013c 	.word	0x2000013c
 80013b8:	20002e18 	.word	0x20002e18
 80013bc:	2000018c 	.word	0x2000018c
 80013c0:	20002e14 	.word	0x20002e14

080013c4 <CheckPlayerCollisionAt>:
bool CheckPlayerCollisionAt(Player* player,Vector2 index){
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6178      	str	r0, [r7, #20]
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	e883 0006 	stmia.w	r3, {r1, r2}
	Vector2 dst;
	if((
		getCell(index)->objType == BombObject||
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013dc:	f000 fc4c 	bl	8001c78 <getCell>
 80013e0:	4603      	mov	r3, r0
 80013e2:	7e1b      	ldrb	r3, [r3, #24]
	if((
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d013      	beq.n	8001410 <CheckPlayerCollisionAt+0x4c>
		getCell(index)->objType == BreakableWall||
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013f0:	f000 fc42 	bl	8001c78 <getCell>
 80013f4:	4603      	mov	r3, r0
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
		getCell(index)->objType == BombObject||
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d009      	beq.n	8001410 <CheckPlayerCollisionAt+0x4c>
		getCell(index)->objType == UnbreakableWall)&&
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001404:	f000 fc38 	bl	8001c78 <getCell>
 8001408:	4603      	mov	r3, r0
 800140a:	7e1b      	ldrb	r3, [r3, #24]
		getCell(index)->objType == BreakableWall||
 800140c:	2b01      	cmp	r3, #1
 800140e:	d11f      	bne.n	8001450 <CheckPlayerCollisionAt+0x8c>
		isCollision(&player->transform,getCell(index),&dst)
 8001410:	697c      	ldr	r4, [r7, #20]
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	e893 0003 	ldmia.w	r3, {r0, r1}
 800141a:	f000 fc2d 	bl	8001c78 <getCell>
 800141e:	4601      	mov	r1, r0
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	461a      	mov	r2, r3
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff fcf8 	bl	8000e1c <isCollision>
 800142c:	4603      	mov	r3, r0
		getCell(index)->objType == UnbreakableWall)&&
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00e      	beq.n	8001450 <CheckPlayerCollisionAt+0x8c>
	){
		player->transform.position = Add(player->transform.position,dst);
 8001432:	697c      	ldr	r4, [r7, #20]
 8001434:	4638      	mov	r0, r7
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	ca06      	ldmia	r2, {r1, r2}
 8001440:	f7ff fa36 	bl	80008b0 <Add>
 8001444:	4622      	mov	r2, r4
 8001446:	463b      	mov	r3, r7
 8001448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800144c:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8001450:	bf00      	nop
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
	...

0800145c <drawPlayers>:
void drawPlayers(Player* players,int count){
 800145c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001460:	b097      	sub	sp, #92	; 0x5c
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	466b      	mov	r3, sp
 800146a:	461e      	mov	r6, r3
	Vector2 playerIndexs[count];
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	1e4b      	subs	r3, r1, #1
 8001470:	647b      	str	r3, [r7, #68]	; 0x44
 8001472:	460a      	mov	r2, r1
 8001474:	2300      	movs	r3, #0
 8001476:	4690      	mov	r8, r2
 8001478:	4699      	mov	r9, r3
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001486:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800148a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800148e:	460a      	mov	r2, r1
 8001490:	2300      	movs	r3, #0
 8001492:	4614      	mov	r4, r2
 8001494:	461d      	mov	r5, r3
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	01ab      	lsls	r3, r5, #6
 80014a0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80014a4:	01a2      	lsls	r2, r4, #6
 80014a6:	460b      	mov	r3, r1
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	3307      	adds	r3, #7
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	ebad 0d03 	sub.w	sp, sp, r3
 80014b4:	466b      	mov	r3, sp
 80014b6:	3303      	adds	r3, #3
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=0;i<count;i++){
 80014be:	2300      	movs	r3, #0
 80014c0:	657b      	str	r3, [r7, #84]	; 0x54
 80014c2:	e016      	b.n	80014f2 <drawPlayers+0x96>
		playerIndexs[i]=getPlayerIndex(&players[i]);
 80014c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c6:	224c      	movs	r2, #76	; 0x4c
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	441a      	add	r2, r3
 80014d0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80014d2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80014d4:	463b      	mov	r3, r7
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fd45 	bl	8001f68 <getPlayerIndex>
 80014de:	00eb      	lsls	r3, r5, #3
 80014e0:	4423      	add	r3, r4
 80014e2:	463a      	mov	r2, r7
 80014e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e8:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=0;i<count;i++){
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	3301      	adds	r3, #1
 80014f0:	657b      	str	r3, [r7, #84]	; 0x54
 80014f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbe4      	blt.n	80014c4 <drawPlayers+0x68>
	}
	for(int i=0;i<count;i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	653b      	str	r3, [r7, #80]	; 0x50
 80014fe:	e0c5      	b.n	800168c <drawPlayers+0x230>
		Player* player = &players[i];
 8001500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001502:	224c      	movs	r2, #76	; 0x4c
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(!player->deadFlag){
 800150e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80b3 	beq.w	8001686 <drawPlayers+0x22a>
			int delta = (TimeTotal-player->initialImmortalTime)%BLINK_PERIOD;
 8001520:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <drawPlayers+0x248>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <drawPlayers+0x24c>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	1211      	asrs	r1, r2, #8
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	1a8a      	subs	r2, r1, r2
 8001536:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800153a:	fb01 f202 	mul.w	r2, r1, r2
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
			Vector2 playerIndex = playerIndexs[i];
 8001542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001546:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001552:	e882 0003 	stmia.w	r2, {r0, r1}
			Vector2 minIndex = Vector2_init(playerIndex.x>0?playerIndex.x-1:0,playerIndex.y>0?playerIndex.y-1:playerIndex.y);
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	2b01      	cmp	r3, #1
 800155a:	bfb8      	it	lt
 800155c:	2301      	movlt	r3, #1
 800155e:	1e59      	subs	r1, r3, #1
 8001560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001562:	2b00      	cmp	r3, #0
 8001564:	dd02      	ble.n	800156c <drawPlayers+0x110>
 8001566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001568:	3b01      	subs	r3, #1
 800156a:	e000      	b.n	800156e <drawPlayers+0x112>
 800156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001572:	461a      	mov	r2, r3
 8001574:	f7ff f984 	bl	8000880 <Vector2_init>
			Vector2 maxIndex = Vector2_init(playerIndex.x<MAP_WIDTH-1?playerIndex.x+1:playerIndex.x,playerIndex.y<MAP_HEIGHT-1?playerIndex.y+1:playerIndex.y);
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	2b0b      	cmp	r3, #11
 800157c:	dc02      	bgt.n	8001584 <drawPlayers+0x128>
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	3301      	adds	r3, #1
 8001582:	e000      	b.n	8001586 <drawPlayers+0x12a>
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001588:	2a0b      	cmp	r2, #11
 800158a:	dc02      	bgt.n	8001592 <drawPlayers+0x136>
 800158c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800158e:	3201      	adds	r2, #1
 8001590:	e000      	b.n	8001594 <drawPlayers+0x138>
 8001592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001594:	f107 001c 	add.w	r0, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff f971 	bl	8000880 <Vector2_init>
				for(Vector2 index = minIndex;index.y<=maxIndex.y;index.y++,index.x=minIndex.x){
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80015ae:	e035      	b.n	800161c <drawPlayers+0x1c0>
					for(;index.x<=maxIndex.x;index.x++){
						bool flag = false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for(int j=0;j<count;j++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80015ba:	e012      	b.n	80015e2 <drawPlayers+0x186>
							if(Equal(playerIndexs[j],index)){
 80015bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	cb0c      	ldmia	r3, {r2, r3}
 80015c6:	00c9      	lsls	r1, r1, #3
 80015c8:	4401      	add	r1, r0
 80015ca:	c903      	ldmia	r1, {r0, r1}
 80015cc:	f7ff fa0f 	bl	80009ee <Equal>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <drawPlayers+0x180>
								flag =true;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for(int j=0;j<count;j++){
 80015dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015de:	3301      	adds	r3, #1
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbe8      	blt.n	80015bc <drawPlayers+0x160>
							}
						}
					if(!flag){
 80015ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <drawPlayers+0x1a8>
						drawCell(index);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001600:	f000 f854 	bl	80016ac <drawCell>
					for(;index.x<=maxIndex.x;index.x++){
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	429a      	cmp	r2, r3
 8001610:	ddce      	ble.n	80015b0 <drawPlayers+0x154>
				for(Vector2 index = minIndex;index.y<=maxIndex.y;index.y++,index.x=minIndex.x){
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	3301      	adds	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	429a      	cmp	r2, r3
 8001622:	ddf2      	ble.n	800160a <drawPlayers+0x1ae>
					}

				}
			}
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <drawPlayers+0x1e0>
 8001634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001636:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800163a:	dd1c      	ble.n	8001676 <drawPlayers+0x21a>

				MapCell* cell= getCell(playerIndexs[i]);
 800163c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800163e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001648:	f000 fb16 	bl	8001c78 <getCell>
 800164c:	6378      	str	r0, [r7, #52]	; 0x34
				if(cell->objType == BombObject)
 800164e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <drawPlayers+0x20a>
					DrawImage(&cell->floor,player->imgPtr2);
 8001656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f7ff fb30 	bl	8000cc4 <DrawImage>
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001664:	e00f      	b.n	8001686 <drawPlayers+0x22a>
				else
					DrawImage(&cell->floor,player->imgPtr1);
 8001666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f7ff fb28 	bl	8000cc4 <DrawImage>
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001674:	e007      	b.n	8001686 <drawPlayers+0x22a>
			}
			else{
				drawCell(playerIndexs[i]);
 8001676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001682:	f000 f813 	bl	80016ac <drawCell>
	for(int i=0;i<count;i++){
 8001686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001688:	3301      	adds	r3, #1
 800168a:	653b      	str	r3, [r7, #80]	; 0x50
 800168c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	f6ff af35 	blt.w	8001500 <drawPlayers+0xa4>
 8001696:	46b5      	mov	sp, r6
			}
		}
	}
	/**/
}
 8001698:	bf00      	nop
 800169a:	375c      	adds	r7, #92	; 0x5c
 800169c:	46bd      	mov	sp, r7
 800169e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016a2:	bf00      	nop
 80016a4:	20002e14 	.word	0x20002e14
 80016a8:	5d9f7391 	.word	0x5d9f7391

080016ac <drawCell>:
//Transform End

//Map Cell Start
void drawCell(Vector2 index){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	463b      	mov	r3, r7
 80016b4:	e883 0003 	stmia.w	r3, {r0, r1}
	MapCell* cell = getCell(index);
 80016b8:	463b      	mov	r3, r7
 80016ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016be:	f000 fadb 	bl	8001c78 <getCell>
 80016c2:	60f8      	str	r0, [r7, #12]
	switch(cell->objType){
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	7e1b      	ldrb	r3, [r3, #24]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d854      	bhi.n	8001776 <drawCell+0xca>
 80016cc:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <drawCell+0x28>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	080016f9 	.word	0x080016f9
 80016d8:	08001723 	.word	0x08001723
 80016dc:	08001731 	.word	0x08001731
 80016e0:	08001705 	.word	0x08001705
 80016e4:	08001713 	.word	0x08001713
 80016e8:	08001769 	.word	0x08001769
 80016ec:	0800174d 	.word	0x0800174d
 80016f0:	0800175b 	.word	0x0800175b
 80016f4:	0800173f 	.word	0x0800173f
		case None:
			DrawImage(&cell->floor,&grassImage);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4921      	ldr	r1, [pc, #132]	; (8001780 <drawCell+0xd4>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fae1 	bl	8000cc4 <DrawImage>
			break;
 8001702:	e038      	b.n	8001776 <drawCell+0xca>
		case BombObject:
			DrawImage(cell->objTrans,&bombImage);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	491e      	ldr	r1, [pc, #120]	; (8001784 <drawCell+0xd8>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fada 	bl	8000cc4 <DrawImage>
			break;
 8001710:	e031      	b.n	8001776 <drawCell+0xca>
		case DetonateEffectObject:
			Draw(cell->objTrans,ORANGE);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f64f 5120 	movw	r1, #64800	; 0xfd20
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff faa9 	bl	8000c72 <Draw>
			break;
 8001720:	e029      	b.n	8001776 <drawCell+0xca>
		case UnbreakableWall:
			DrawImage(cell->objTrans,&wallImage1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4918      	ldr	r1, [pc, #96]	; (8001788 <drawCell+0xdc>)
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff facb 	bl	8000cc4 <DrawImage>
			break;
 800172e:	e022      	b.n	8001776 <drawCell+0xca>
		case BreakableWall:
			DrawImage(cell->objTrans,&wallImage2);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	4915      	ldr	r1, [pc, #84]	; (800178c <drawCell+0xe0>)
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fac4 	bl	8000cc4 <DrawImage>
			break;
 800173c:	e01b      	b.n	8001776 <drawCell+0xca>
		case HealthItem:
			DrawImage(cell->objTrans,&heartImage);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4913      	ldr	r1, [pc, #76]	; (8001790 <drawCell+0xe4>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fabd 	bl	8000cc4 <DrawImage>
			break;
 800174a:	e014      	b.n	8001776 <drawCell+0xca>
		case BombAmountItem:
			DrawImage(cell->objTrans,&addBombImage);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <drawCell+0xe8>)
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fab6 	bl	8000cc4 <DrawImage>
			break;
 8001758:	e00d      	b.n	8001776 <drawCell+0xca>
		case BombRangeItem:
			DrawImage(cell->objTrans,&potionImage);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <drawCell+0xec>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff faaf 	bl	8000cc4 <DrawImage>
			break;
 8001766:	e006      	b.n	8001776 <drawCell+0xca>
		case SpeedItem:
			DrawImage(cell->objTrans,&shoeImage);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	490b      	ldr	r1, [pc, #44]	; (800179c <drawCell+0xf0>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff faa8 	bl	8000cc4 <DrawImage>
			break;
 8001774:	bf00      	nop
	}
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0803c92c 	.word	0x0803c92c
 8001784:	0803bd2c 	.word	0x0803bd2c
 8001788:	0803c52c 	.word	0x0803c52c
 800178c:	0803c72c 	.word	0x0803c72c
 8001790:	0803c12c 	.word	0x0803c12c
 8001794:	0803cb2c 	.word	0x0803cb2c
 8001798:	0803c32c 	.word	0x0803c32c
 800179c:	0803bf2c 	.word	0x0803bf2c

080017a0 <setMap>:
void setMap(int num){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	int *mapArr;
	if(num==1){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <setMap+0x14>
		mapArr = map1;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <setMap+0xb8>)
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e00a      	b.n	80017ca <setMap+0x2a>
	}
	else if(num == 2){
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d102      	bne.n	80017c0 <setMap+0x20>
		mapArr = map2;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <setMap+0xbc>)
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e004      	b.n	80017ca <setMap+0x2a>
	}
	else if(num == 3){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d101      	bne.n	80017ca <setMap+0x2a>
		mapArr = map3;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <setMap+0xc0>)
 80017c8:	61fb      	str	r3, [r7, #28]
	}
	for(int i = 0;i<MAP_HEIGHT;i++){
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	e03a      	b.n	8001846 <setMap+0xa6>
		for(int j=0;j<MAP_WIDTH;j++){
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	e031      	b.n	800183a <setMap+0x9a>
			Vector2 index = Vector2_init(j,i);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	6979      	ldr	r1, [r7, #20]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f84e 	bl	8000880 <Vector2_init>
			if(mapArr[i*MAP_WIDTH+j]){
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	441a      	add	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <setMap+0x88>
				setObject(index,(ObjectType)mapArr[i*MAP_WIDTH+j],NULL);
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	441a      	add	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4413      	add	r3, r2
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	2300      	movs	r3, #0
 800181c:	f107 010c 	add.w	r1, r7, #12
 8001820:	c903      	ldmia	r1, {r0, r1}
 8001822:	f000 f81f 	bl	8001864 <setObject>
 8001826:	e005      	b.n	8001834 <setMap+0x94>
			}
			else{
				drawCell(index);
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001830:	f7ff ff3c 	bl	80016ac <drawCell>
		for(int j=0;j<MAP_WIDTH;j++){
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	ddca      	ble.n	80017d6 <setMap+0x36>
	for(int i = 0;i<MAP_HEIGHT;i++){
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	3301      	adds	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	ddc1      	ble.n	80017d0 <setMap+0x30>
			}
		}
	}
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000190 	.word	0x20000190
 800185c:	20000434 	.word	0x20000434
 8001860:	200006d8 	.word	0x200006d8

08001864 <setObject>:
void setObject(Vector2 index,ObjectType type,Player* player){
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b09a      	sub	sp, #104	; 0x68
 8001868:	af02      	add	r7, sp, #8
 800186a:	f107 0420 	add.w	r4, r7, #32
 800186e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4613      	mov	r3, r2
 8001876:	77fb      	strb	r3, [r7, #31]
	clearObject(index,false);
 8001878:	2200      	movs	r2, #0
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001882:	f000 f911 	bl	8001aa8 <clearObject>
	MapCell *cell =&map[index.y][index.x];
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	6a39      	ldr	r1, [r7, #32]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	440b      	add	r3, r1
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	4a7e      	ldr	r2, [pc, #504]	; (8001a94 <setObject+0x230>)
 800189a:	4413      	add	r3, r2
 800189c:	65fb      	str	r3, [r7, #92]	; 0x5c
	switch(type){
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	f200 80ea 	bhi.w	8001a7a <setObject+0x216>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <setObject+0x48>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	08001a7b 	.word	0x08001a7b
 80018b0:	080019eb 	.word	0x080019eb
 80018b4:	080019eb 	.word	0x080019eb
 80018b8:	080018d1 	.word	0x080018d1
 80018bc:	08001967 	.word	0x08001967
 80018c0:	08001a33 	.word	0x08001a33
 80018c4:	08001a33 	.word	0x08001a33
 80018c8:	08001a33 	.word	0x08001a33
 80018cc:	08001a33 	.word	0x08001a33
		case None: break;
		case BombObject:
			player->currentUseBomb++;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
			Bomb* bomb = malloc(sizeof(Bomb));
 80018da:	2014      	movs	r0, #20
 80018dc:	f00b f85e 	bl	800c99c <malloc>
 80018e0:	4603      	mov	r3, r0
 80018e2:	653b      	str	r3, [r7, #80]	; 0x50
			bomb->index = index;
 80018e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018e6:	461a      	mov	r2, r3
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018f0:	e882 0003 	stmia.w	r2, {r0, r1}
			bomb->range = player->bombRange;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fa:	60da      	str	r2, [r3, #12]
			bomb->detonateTime = TimeTotal+BOMB_DELAY;
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <setObject+0x234>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 8001904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001906:	609a      	str	r2, [r3, #8]
			bomb->player = player;
 8001908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	611a      	str	r2, [r3, #16]
			QueueElement* element1 = enqueue(&bombs,(void*)bomb);
 800190e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001910:	4862      	ldr	r0, [pc, #392]	; (8001a9c <setObject+0x238>)
 8001912:	f005 fb37 	bl	8006f84 <enqueue>
 8001916:	64f8      	str	r0, [r7, #76]	; 0x4c
			cell->objPtr = (void*)element1;
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800191c:	61da      	str	r2, [r3, #28]
			cell->objTrans = malloc(sizeof(Transform));
 800191e:	2014      	movs	r0, #20
 8001920:	f00b f83c 	bl	800c99c <malloc>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192a:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 800192c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001938:	f7ff f8b8 	bl	8000aac <toPosition>
 800193c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800193e:	695c      	ldr	r4, [r3, #20]
 8001940:	4638      	mov	r0, r7
 8001942:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <setObject+0x23c>)
 8001944:	2204      	movs	r2, #4
 8001946:	9201      	str	r2, [sp, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001952:	ca06      	ldmia	r2, {r1, r2}
 8001954:	f7ff f8ca 	bl	8000aec <Transform_init>
 8001958:	4625      	mov	r5, r4
 800195a:	463c      	mov	r4, r7
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	602b      	str	r3, [r5, #0]
			break;
 8001964:	e089      	b.n	8001a7a <setObject+0x216>
		case DetonateEffectObject:
			DetonateEffect* detonateEffect = malloc(sizeof(DetonateEffect));
 8001966:	2010      	movs	r0, #16
 8001968:	f00b f818 	bl	800c99c <malloc>
 800196c:	4603      	mov	r3, r0
 800196e:	65bb      	str	r3, [r7, #88]	; 0x58
			detonateEffect->index = index;
 8001970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001972:	461a      	mov	r2, r3
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800197c:	e882 0003 	stmia.w	r2, {r0, r1}
			detonateEffect->deconstructTime = TimeTotal+DETONATE_DURATION;
 8001980:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <setObject+0x234>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800198a:	609a      	str	r2, [r3, #8]
			detonateEffect->drop = cell->objType;
 800198c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198e:	7e1a      	ldrb	r2, [r3, #24]
 8001990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001992:	731a      	strb	r2, [r3, #12]
			QueueElement* element2 = enqueue(&detonateEffects,(void*)detonateEffect);
 8001994:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001996:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <setObject+0x240>)
 8001998:	f005 faf4 	bl	8006f84 <enqueue>
 800199c:	6578      	str	r0, [r7, #84]	; 0x54
			cell->objPtr = (void*)element2;
 800199e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019a2:	61da      	str	r2, [r3, #28]
			cell->objTrans = malloc(sizeof(Transform));
 80019a4:	2014      	movs	r0, #20
 80019a6:	f00a fff9 	bl	800c99c <malloc>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b0:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 80019b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019be:	f7ff f875 	bl	8000aac <toPosition>
 80019c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c4:	695c      	ldr	r4, [r3, #20]
 80019c6:	4638      	mov	r0, r7
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <setObject+0x23c>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	9201      	str	r2, [sp, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019d8:	ca06      	ldmia	r2, {r1, r2}
 80019da:	f7ff f887 	bl	8000aec <Transform_init>
 80019de:	4625      	mov	r5, r4
 80019e0:	463c      	mov	r4, r7
 80019e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	602b      	str	r3, [r5, #0]
		case UnbreakableWall:
		case BreakableWall :
			cell->objTrans = malloc(sizeof(Transform));
 80019ea:	2014      	movs	r0, #20
 80019ec:	f00a ffd6 	bl	800c99c <malloc>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f6:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 80019f8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a04:	f7ff f852 	bl	8000aac <toPosition>
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	695c      	ldr	r4, [r3, #20]
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <setObject+0x23c>)
 8001a10:	2204      	movs	r2, #4
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a1e:	ca06      	ldmia	r2, {r1, r2}
 8001a20:	f7ff f864 	bl	8000aec <Transform_init>
 8001a24:	4625      	mov	r5, r4
 8001a26:	463c      	mov	r4, r7
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	602b      	str	r3, [r5, #0]
			break;
 8001a30:	e023      	b.n	8001a7a <setObject+0x216>
		case SpeedItem:
		case BombAmountItem:
		case BombRangeItem:
		case HealthItem :
			cell->objTrans = malloc(sizeof(Transform));
 8001a32:	2014      	movs	r0, #20
 8001a34:	f00a ffb2 	bl	800c99c <malloc>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3e:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 8001a40:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a4c:	f7ff f82e 	bl	8000aac <toPosition>
 8001a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a52:	695c      	ldr	r4, [r3, #20]
 8001a54:	4638      	mov	r0, r7
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <setObject+0x23c>)
 8001a58:	2204      	movs	r2, #4
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001a66:	ca06      	ldmia	r2, {r1, r2}
 8001a68:	f7ff f840 	bl	8000aec <Transform_init>
 8001a6c:	4625      	mov	r5, r4
 8001a6e:	463c      	mov	r4, r7
 8001a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	602b      	str	r3, [r5, #0]
			break;
 8001a78:	bf00      	nop
	}
	cell->objType = type;
 8001a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7c:	7ffa      	ldrb	r2, [r7, #31]
 8001a7e:	761a      	strb	r2, [r3, #24]
	drawCell(index);
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a88:	f7ff fe10 	bl	80016ac <drawCell>
}
 8001a8c:	bf00      	nop
 8001a8e:	3760      	adds	r7, #96	; 0x60
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	200018f4 	.word	0x200018f4
 8001a98:	20002e14 	.word	0x20002e14
 8001a9c:	20002e20 	.word	0x20002e20
 8001aa0:	20000134 	.word	0x20000134
 8001aa4:	20002e2c 	.word	0x20002e2c

08001aa8 <clearObject>:
void clearObject(Vector2 index,bool redrawFlag){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b090      	sub	sp, #64	; 0x40
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	71fb      	strb	r3, [r7, #7]
	MapCell *cell =&map[index.y][index.x];
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	015b      	lsls	r3, r3, #5
 8001acc:	4a4d      	ldr	r2, [pc, #308]	; (8001c04 <clearObject+0x15c>)
 8001ace:	4413      	add	r3, r2
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
	if(cell->objType != None){
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	7e1b      	ldrb	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 808f 	beq.w	8001bfa <clearObject+0x152>
		Transform* objTrans = cell->objTrans;
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
		void* objPtr = cell->objPtr;
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
		ObjectType objType = cell->objType;
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
 8001aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cell->objTrans = NULL;
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
		cell->objPtr = NULL;
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
		cell->objType = None;
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	2200      	movs	r2, #0
 8001b00:	761a      	strb	r2, [r3, #24]
		switch(objType){
 8001b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d012      	beq.n	8001b30 <clearObject+0x88>
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	dc5f      	bgt.n	8001bce <clearObject+0x126>
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d020      	beq.n	8001b54 <clearObject+0xac>
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d15b      	bne.n	8001bce <clearObject+0x126>
			case BombObject:
				QueueElement* element=(QueueElement*)objPtr;
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
				((Bomb*)element->value)->player->currentUseBomb--;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b22:	3a01      	subs	r2, #1
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
				DeleteQueueElement(&bombs,element);
 8001b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b28:	4837      	ldr	r0, [pc, #220]	; (8001c08 <clearObject+0x160>)
 8001b2a:	f005 f9f2 	bl	8006f12 <DeleteQueueElement>
				break;
 8001b2e:	e058      	b.n	8001be2 <clearObject+0x13a>
			case DetonateEffectObject:
				ObjectType drop = ((DetonateEffect*)((QueueElement*)objPtr)->value)->drop;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	7b1b      	ldrb	r3, [r3, #12]
 8001b36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				DeleteQueueElement(&detonateEffects,(QueueElement*)objPtr);
 8001b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b3c:	4833      	ldr	r0, [pc, #204]	; (8001c0c <clearObject+0x164>)
 8001b3e:	f005 f9e8 	bl	8006f12 <DeleteQueueElement>
				setObject(index,drop,NULL);
 8001b42:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001b46:	2300      	movs	r3, #0
 8001b48:	f107 0108 	add.w	r1, r7, #8
 8001b4c:	c903      	ldmia	r1, {r0, r1}
 8001b4e:	f7ff fe89 	bl	8001864 <setObject>
				break;
 8001b52:	e046      	b.n	8001be2 <clearObject+0x13a>
			case BreakableWall:
				int random = (int)rand()%100;
 8001b54:	f00b f9bc 	bl	800ced0 <rand>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <clearObject+0x168>)
 8001b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b60:	1151      	asrs	r1, r2, #5
 8001b62:	17da      	asrs	r2, r3, #31
 8001b64:	1a8a      	subs	r2, r1, r2
 8001b66:	2164      	movs	r1, #100	; 0x64
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	623b      	str	r3, [r7, #32]
				if(random<=ITEM_DROP_CHANCE){
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	2b3c      	cmp	r3, #60	; 0x3c
 8001b74:	dc32      	bgt.n	8001bdc <clearObject+0x134>
					int dropItemCount = 4;
 8001b76:	2304      	movs	r3, #4
 8001b78:	61fb      	str	r3, [r7, #28]
					int range=ITEM_DROP_CHANCE/dropItemCount, mxRange=range;
 8001b7a:	223c      	movs	r2, #60	; 0x3c
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
					ObjectType itemDropTypes[]={
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <clearObject+0x16c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	617b      	str	r3, [r7, #20]
							SpeedItem,
							BombAmountItem,
							BombRangeItem,
							HealthItem,
					};
					for(int i=0;i<dropItemCount;i++,mxRange+=range){
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b92:	e017      	b.n	8001bc4 <clearObject+0x11c>
						if(random<=mxRange){
 8001b94:	6a3a      	ldr	r2, [r7, #32]
 8001b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dc0c      	bgt.n	8001bb6 <clearObject+0x10e>
							setObject(index,itemDropTypes[i],NULL);
 8001b9c:	f107 0214 	add.w	r2, r7, #20
 8001ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f107 0108 	add.w	r1, r7, #8
 8001bac:	c903      	ldmia	r1, {r0, r1}
 8001bae:	f7ff fe59 	bl	8001864 <setObject>
							break;
 8001bb2:	bf00      	nop
						}
					}
				}
				break;
 8001bb4:	e012      	b.n	8001bdc <clearObject+0x134>
					for(int i=0;i<dropItemCount;i++,mxRange+=range){
 8001bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb8:	3301      	adds	r3, #1
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbe3      	blt.n	8001b94 <clearObject+0xec>
				break;
 8001bcc:	e006      	b.n	8001bdc <clearObject+0x134>
			default:
				if(objPtr != NULL)
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <clearObject+0x138>
					free(objPtr);
 8001bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bd6:	f00a fee9 	bl	800c9ac <free>
				break;
 8001bda:	e001      	b.n	8001be0 <clearObject+0x138>
				break;
 8001bdc:	bf00      	nop
 8001bde:	e000      	b.n	8001be2 <clearObject+0x13a>
				break;
 8001be0:	bf00      	nop
		}
		free(objTrans);
 8001be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001be4:	f00a fee2 	bl	800c9ac <free>

		if(redrawFlag)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <clearObject+0x152>
			drawCell(index);
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bf6:	f7ff fd59 	bl	80016ac <drawCell>
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	3740      	adds	r7, #64	; 0x40
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200018f4 	.word	0x200018f4
 8001c08:	20002e20 	.word	0x20002e20
 8001c0c:	20002e2c 	.word	0x20002e2c
 8001c10:	51eb851f 	.word	0x51eb851f
 8001c14:	0800f0b4 	.word	0x0800f0b4

08001c18 <placeBomb>:
placeBomb(Player* player){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if(player!= NULL && getCell(getPlayerIndex(player))->objType != BombObject&&player->currentUseBomb<player->maxBombCount){
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d022      	beq.n	8001c6c <placeBomb+0x54>
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f99b 	bl	8001f68 <getPlayerIndex>
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c3a:	f000 f81d 	bl	8001c78 <getCell>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	7e1b      	ldrb	r3, [r3, #24]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d012      	beq.n	8001c6c <placeBomb+0x54>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	da0c      	bge.n	8001c6c <placeBomb+0x54>
		setObject(getPlayerIndex(player),BombObject,player);
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f985 	bl	8001f68 <getPlayerIndex>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f107 0110 	add.w	r1, r7, #16
 8001c66:	c903      	ldmia	r1, {r0, r1}
 8001c68:	f7ff fdfc 	bl	8001864 <setObject>
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <getCell>:
MapCell* getCell(Vector2 index){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	463b      	mov	r3, r7
 8001c80:	e883 0003 	stmia.w	r3, {r0, r1}
	if(inBetween(0,index.x,mapSize.x-1)&&inBetween(0,index.y,mapSize.y-1)){
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <getCell+0x5c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f005 f8ef 	bl	8006e72 <inBetween>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <getCell+0x50>
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <getCell+0x5c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f005 f8e4 	bl	8006e72 <inBetween>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <getCell+0x50>
		return &map[index.y][index.x];
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <getCell+0x60>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	e000      	b.n	8001cca <getCell+0x52>
	}
	else{
		return NULL;
 8001cc8:	2300      	movs	r3, #0
	}
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000012c 	.word	0x2000012c
 8001cd8:	200018f4 	.word	0x200018f4

08001cdc <detonate>:
detonate(Bomb* bomb){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b090      	sub	sp, #64	; 0x40
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
	if(bomb == NULL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80a9 	beq.w	8001e3e <detonate+0x162>
		return;
	int range = bomb->range;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
	Vector2 startIndex = bomb->index;
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfc:	e883 0003 	stmia.w	r3, {r0, r1}
	Vector2 index = startIndex;
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	f107 0220 	add.w	r2, r7, #32
 8001d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0c:	e883 0003 	stmia.w	r3, {r0, r1}
	setObject(startIndex,DetonateEffectObject,NULL);
 8001d10:	2300      	movs	r3, #0
 8001d12:	2204      	movs	r2, #4
 8001d14:	f107 0120 	add.w	r1, r7, #32
 8001d18:	c903      	ldmia	r1, {r0, r1}
 8001d1a:	f7ff fda3 	bl	8001864 <setObject>
	for(int i=0;i<4;i++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e087      	b.n	8001e34 <detonate+0x158>
		index = startIndex;
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	f107 0220 	add.w	r2, r7, #32
 8001d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d30:	e883 0003 	stmia.w	r3, {r0, r1}
		Vector2 increment = Vector2_init(i&0b10?(i&0b1?1:-1):0,i&0b10?0:(i&0b1?1:-1));
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <detonate+0x76>
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <detonate+0x70>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e003      	b.n	8001d54 <detonate+0x78>
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d50:	e000      	b.n	8001d54 <detonate+0x78>
 8001d52:	2300      	movs	r3, #0
 8001d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d56:	f002 0202 	and.w	r2, r2, #2
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d109      	bne.n	8001d72 <detonate+0x96>
 8001d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d60:	f002 0201 	and.w	r2, r2, #1
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d001      	beq.n	8001d6c <detonate+0x90>
 8001d68:	2201      	movs	r2, #1
 8001d6a:	e003      	b.n	8001d74 <detonate+0x98>
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d70:	e000      	b.n	8001d74 <detonate+0x98>
 8001d72:	2200      	movs	r2, #0
 8001d74:	f107 0010 	add.w	r0, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe fd81 	bl	8000880 <Vector2_init>
		index = Add(index,increment);
 8001d7e:	f107 0018 	add.w	r0, r7, #24
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f107 0218 	add.w	r2, r7, #24
 8001d8c:	ca06      	ldmia	r2, {r1, r2}
 8001d8e:	f7fe fd8f 	bl	80008b0 <Add>
		MapCell* cell = getCell(index);
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d9a:	f7ff ff6d 	bl	8001c78 <getCell>
 8001d9e:	6338      	str	r0, [r7, #48]	; 0x30
		for(int j=0;j<range&&cell!=NULL;j++,index=Add(index,increment),cell = getCell(index)){
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da4:	e03c      	b.n	8001e20 <detonate+0x144>
			switch(cell->objType){
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	7e1b      	ldrb	r3, [r3, #24]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d00f      	beq.n	8001dce <detonate+0xf2>
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	dc14      	bgt.n	8001ddc <detonate+0x100>
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d008      	beq.n	8001dc8 <detonate+0xec>
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d110      	bne.n	8001ddc <detonate+0x100>
				case BreakableWall:
					setObject(index ,DetonateEffectObject,NULL);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	f107 0118 	add.w	r1, r7, #24
 8001dc2:	c903      	ldmia	r1, {r0, r1}
 8001dc4:	f7ff fd4e 	bl	8001864 <setObject>
				case UnbreakableWall:
					j=range;
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 8001dcc:	e00e      	b.n	8001dec <detonate+0x110>
				case BombObject:
					detonate((Bomb*)((QueueElement*)cell->objPtr)->value);
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff81 	bl	8001cdc <detonate>
					break;
 8001dda:	e007      	b.n	8001dec <detonate+0x110>
				default:
					setObject(index ,DetonateEffectObject,NULL);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2204      	movs	r2, #4
 8001de0:	f107 0118 	add.w	r1, r7, #24
 8001de4:	c903      	ldmia	r1, {r0, r1}
 8001de6:	f7ff fd3d 	bl	8001864 <setObject>
					break;
 8001dea:	bf00      	nop
		for(int j=0;j<range&&cell!=NULL;j++,index=Add(index,increment),cell = getCell(index)){
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	3301      	adds	r3, #1
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df2:	4638      	mov	r0, r7
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f107 0218 	add.w	r2, r7, #24
 8001dfe:	ca06      	ldmia	r2, {r1, r2}
 8001e00:	f7fe fd56 	bl	80008b0 <Add>
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	463a      	mov	r2, r7
 8001e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e1a:	f7ff ff2d 	bl	8001c78 <getCell>
 8001e1e:	6338      	str	r0, [r7, #48]	; 0x30
 8001e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	429a      	cmp	r2, r3
 8001e26:	da02      	bge.n	8001e2e <detonate+0x152>
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1bb      	bne.n	8001da6 <detonate+0xca>
	for(int i=0;i<4;i++){
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	f77f af74 	ble.w	8001d24 <detonate+0x48>
 8001e3c:	e000      	b.n	8001e40 <detonate+0x164>
		return;
 8001e3e:	bf00      	nop
			}
		}
	}
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <Player_init>:
//Map Cell End

//Player Start
Player Player_init(Vector2 index,int imgIndex,bool botFlag){
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b0b8      	sub	sp, #224	; 0xe0
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e50:	f107 001c 	add.w	r0, r7, #28
 8001e54:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e58:	61bb      	str	r3, [r7, #24]
	char *img16[5]={
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <Player_init+0x110>)
 8001e5c:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001e60:	461d      	mov	r5, r3
 8001e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	6023      	str	r3, [r4, #0]
			playerImage2,
			playerImage3,
			playerImage4,
			playerImage5
	};
	char *img16Bomb[5]={
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <Player_init+0x114>)
 8001e6c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001e70:	461d      	mov	r5, r3
 8001e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e76:	682b      	ldr	r3, [r5, #0]
 8001e78:	6023      	str	r3, [r4, #0]
		playerImage2Bomb,
		playerImage3Bomb,
		playerImage4Bomb,
		playerImage5Bomb
	};
		char *img56[5]={
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <Player_init+0x118>)
 8001e7c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001e80:	461d      	mov	r5, r3
 8001e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e86:	682b      	ldr	r3, [r5, #0]
 8001e88:	6023      	str	r3, [r4, #0]
			playerImage2White_56,
			playerImage3White_56,
			playerImage4White_56,
			playerImage5White_56
		};
		char *img112[5]={
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <Player_init+0x11c>)
 8001e8c:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001e90:	461d      	mov	r5, r3
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	682b      	ldr	r3, [r5, #0]
 8001e98:	6023      	str	r3, [r4, #0]
			playerImage3_112,
			playerImage4_112,
			playerImage5_112,
		};
	Player player;
	player.transform = Transform_init(toPosition(index),Vector2_init(PLAYER_WIDTH,PLAYER_HEIGHT) ,MiddleCenter);
 8001e9a:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ea6:	f7fe fe01 	bl	8000aac <toPosition>
 8001eaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eae:	220a      	movs	r2, #10
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fce4 	bl	8000880 <Vector2_init>
 8001eb8:	4638      	mov	r0, r7
 8001eba:	2304      	movs	r3, #4
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ec8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001ecc:	ca06      	ldmia	r2, {r1, r2}
 8001ece:	f7fe fe0d 	bl	8000aec <Transform_init>
 8001ed2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001ed6:	463d      	mov	r5, r7
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	6023      	str	r3, [r4, #0]
	player.health = 2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	643b      	str	r3, [r7, #64]	; 0x40
	player.speed =1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
	player.maxBombCount = 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
	player.bombRange =1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
	player.currentUseBomb =0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	653b      	str	r3, [r7, #80]	; 0x50
	player.deadFlag = false;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	player.imgPtr1 = img16[imgIndex];
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	33d8      	adds	r3, #216	; 0xd8
 8001f00:	443b      	add	r3, r7
 8001f02:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001f06:	663b      	str	r3, [r7, #96]	; 0x60
	player.imgPtr2 = img16Bomb[imgIndex];
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	33d8      	adds	r3, #216	; 0xd8
 8001f0e:	443b      	add	r3, r7
 8001f10:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001f14:	667b      	str	r3, [r7, #100]	; 0x64
	player.imgPtr3 = img56[imgIndex];
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	33d8      	adds	r3, #216	; 0xd8
 8001f1c:	443b      	add	r3, r7
 8001f1e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001f22:	66bb      	str	r3, [r7, #104]	; 0x68
	player.imgPtr4 = img112[imgIndex];
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	33d8      	adds	r3, #216	; 0xd8
 8001f2a:	443b      	add	r3, r7
 8001f2c:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c
	player.imageIndex = imgIndex;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	673b      	str	r3, [r7, #112]	; 0x70
	player.botFlag = botFlag;
 8001f36:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001f3a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	return player;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	224c      	movs	r2, #76	; 0x4c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f00b f8f7 	bl	800d13c <memcpy>
}
 8001f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f50:	37d8      	adds	r7, #216	; 0xd8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	0800f0b8 	.word	0x0800f0b8
 8001f5c:	0800f0cc 	.word	0x0800f0cc
 8001f60:	0800f0e0 	.word	0x0800f0e0
 8001f64:	0800f0f4 	.word	0x0800f0f4

08001f68 <getPlayerIndex>:
Vector2 getPlayerIndex(Player* player){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	return toIndex(player->transform.position);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f7a:	f7fe fd71 	bl	8000a60 <toIndex>
}
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <getIndexAtDirection>:
bool walkMap[MAP_HEIGHT][MAP_WIDTH];
int bombRangeMap[MAP_HEIGHT][MAP_WIDTH][4];
typedef enum DirectionEnum{
	Up,Down,Left,Right
}Direction;
Vector2 getIndexAtDirection(Vector2 index,Direction direction){
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	1d38      	adds	r0, r7, #4
 8001f90:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f94:	70fb      	strb	r3, [r7, #3]
	if(direction&0b10)
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <getIndexAtDirection+0x4a>
		return Add(index,Vector2_init(direction&0b1?1:-1,0));
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <getIndexAtDirection+0x28>
 8001faa:	2101      	movs	r1, #1
 8001fac:	e001      	b.n	8001fb2 <getIndexAtDirection+0x2c>
 8001fae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fc61 	bl	8000880 <Vector2_init>
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1d3a      	adds	r2, r7, #4
 8001fc8:	ca06      	ldmia	r2, {r1, r2}
 8001fca:	f7fe fc71 	bl	80008b0 <Add>
 8001fce:	e016      	b.n	8001ffe <getIndexAtDirection+0x78>
	else
		return Add(index,Vector2_init(0,direction&0b1?1:-1));
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <getIndexAtDirection+0x58>
 8001fda:	2201      	movs	r2, #1
 8001fdc:	e001      	b.n	8001fe2 <getIndexAtDirection+0x5c>
 8001fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe2:	f107 0318 	add.w	r3, r7, #24
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fc49 	bl	8000880 <Vector2_init>
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1d3a      	adds	r2, r7, #4
 8001ff8:	ca06      	ldmia	r2, {r1, r2}
 8001ffa:	f7fe fc59 	bl	80008b0 <Add>
}
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <updateMap>:
void updateMap(){
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b09f      	sub	sp, #124	; 0x7c
 800200c:	af00      	add	r7, sp, #0
	for(Vector2 index = Vector2_init(0,0);index.y<MAP_HEIGHT;index.y++){
 800200e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fc32 	bl	8000880 <Vector2_init>
 800201c:	e089      	b.n	8002132 <updateMap+0x12a>
		for(index.x=0;index.x<MAP_WIDTH;index.x++){
 800201e:	2300      	movs	r3, #0
 8002020:	653b      	str	r3, [r7, #80]	; 0x50
 8002022:	e07f      	b.n	8002124 <updateMap+0x11c>
			bombRangeMap[index.y][index.x][Up]=0;
 8002024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002028:	48a5      	ldr	r0, [pc, #660]	; (80022c0 <updateMap+0x2b8>)
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	440b      	add	r3, r1
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4403      	add	r3, r0
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Down]=0;
 800203e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002040:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002042:	489f      	ldr	r0, [pc, #636]	; (80022c0 <updateMap+0x2b8>)
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	440b      	add	r3, r1
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4403      	add	r3, r0
 8002054:	3304      	adds	r3, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Left]=0;
 800205a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800205c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800205e:	4898      	ldr	r0, [pc, #608]	; (80022c0 <updateMap+0x2b8>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	440b      	add	r3, r1
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4403      	add	r3, r0
 8002070:	3308      	adds	r3, #8
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Right]=0;
 8002076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002078:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800207a:	4891      	ldr	r0, [pc, #580]	; (80022c0 <updateMap+0x2b8>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	440b      	add	r3, r1
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4403      	add	r3, r0
 800208c:	330c      	adds	r3, #12
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
			dangerMap[index.y][index.x] = false;
 8002092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002094:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002096:	488b      	ldr	r0, [pc, #556]	; (80022c4 <updateMap+0x2bc>)
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	4403      	add	r3, r0
 80020a4:	440b      	add	r3, r1
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
			ObjectType type=getCell(index)->objType;
 80020aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020b2:	f7ff fde1 	bl	8001c78 <getCell>
 80020b6:	4603      	mov	r3, r0
 80020b8:	7e1b      	ldrb	r3, [r3, #24]
 80020ba:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			switch(type){
 80020be:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	dc02      	bgt.n	80020cc <updateMap+0xc4>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dc03      	bgt.n	80020d2 <updateMap+0xca>
 80020ca:	e01b      	b.n	8002104 <updateMap+0xfc>
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00d      	beq.n	80020ec <updateMap+0xe4>
 80020d0:	e018      	b.n	8002104 <updateMap+0xfc>
				case BreakableWall:
				case UnbreakableWall:
				case BombObject:
					walkMap[index.y][index.x]=true;
 80020d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020d6:	487c      	ldr	r0, [pc, #496]	; (80022c8 <updateMap+0x2c0>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	4403      	add	r3, r0
 80020e4:	440b      	add	r3, r1
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
					break;
 80020ea:	e018      	b.n	800211e <updateMap+0x116>
				case DetonateEffectObject:
					dangerMap[index.y][index.x]=true;
 80020ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020f0:	4874      	ldr	r0, [pc, #464]	; (80022c4 <updateMap+0x2bc>)
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	4403      	add	r3, r0
 80020fe:	440b      	add	r3, r1
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
				default:
					walkMap[index.y][index.x]=false;
 8002104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002108:	486f      	ldr	r0, [pc, #444]	; (80022c8 <updateMap+0x2c0>)
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	4403      	add	r3, r0
 8002116:	440b      	add	r3, r1
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
					break;
 800211c:	bf00      	nop
		for(index.x=0;index.x<MAP_WIDTH;index.x++){
 800211e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002120:	3301      	adds	r3, #1
 8002122:	653b      	str	r3, [r7, #80]	; 0x50
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	2b0c      	cmp	r3, #12
 8002128:	f77f af7c 	ble.w	8002024 <updateMap+0x1c>
	for(Vector2 index = Vector2_init(0,0);index.y<MAP_HEIGHT;index.y++){
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	3301      	adds	r3, #1
 8002130:	657b      	str	r3, [r7, #84]	; 0x54
 8002132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002134:	2b0c      	cmp	r3, #12
 8002136:	f77f af72 	ble.w	800201e <updateMap+0x16>
			}
		}
	}
	for(Vector2 index = Vector2_init(0,0);index.y+1<MAP_HEIGHT;index.y++){
 800213a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fb9c 	bl	8000880 <Vector2_init>
 8002148:	e08f      	b.n	800226a <updateMap+0x262>
		for(index.x=0;index.x+1<MAP_WIDTH;index.x++){
 800214a:	2300      	movs	r3, #0
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
 800214e:	e085      	b.n	800225c <updateMap+0x254>
			ObjectType type =getCell(index)->objType;
 8002150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002158:	f7ff fd8e 	bl	8001c78 <getCell>
 800215c:	4603      	mov	r3, r0
 800215e:	7e1b      	ldrb	r3, [r3, #24]
 8002160:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			if(type == BreakableWall){
 8002164:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11d      	bne.n	80021a8 <updateMap+0x1a0>
				bombRangeMap[index.y][index.x+1][Left]=1;
 800216c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	4853      	ldr	r0, [pc, #332]	; (80022c0 <updateMap+0x2b8>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	440b      	add	r3, r1
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	4403      	add	r3, r0
 8002184:	3308      	adds	r3, #8
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
				bombRangeMap[index.y+1][index.x][Up]=1;
 800218a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002190:	484b      	ldr	r0, [pc, #300]	; (80022c0 <updateMap+0x2b8>)
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	440b      	add	r3, r1
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4403      	add	r3, r0
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e056      	b.n	8002256 <updateMap+0x24e>
			}
			else if(type != UnbreakableWall){
 80021a8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d052      	beq.n	8002256 <updateMap+0x24e>
				if(bombRangeMap[index.y][index.x][Left]>0){
 80021b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021b4:	4842      	ldr	r0, [pc, #264]	; (80022c0 <updateMap+0x2b8>)
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4403      	add	r3, r0
 80021c6:	3308      	adds	r3, #8
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	dd1b      	ble.n	8002206 <updateMap+0x1fe>
					bombRangeMap[index.y][index.x+1][Left]=bombRangeMap[index.y][index.x][Left]+1;
 80021ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021d2:	483b      	ldr	r0, [pc, #236]	; (80022c0 <updateMap+0x2b8>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	440b      	add	r3, r1
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4403      	add	r3, r0
 80021e4:	3308      	adds	r3, #8
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021ec:	1c48      	adds	r0, r1, #1
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	4c33      	ldr	r4, [pc, #204]	; (80022c0 <updateMap+0x2b8>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	4403      	add	r3, r0
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	4423      	add	r3, r4
 8002202:	3308      	adds	r3, #8
 8002204:	6019      	str	r1, [r3, #0]
				}
				if(bombRangeMap[index.y][index.x][Up]>0){
 8002206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002208:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800220a:	482d      	ldr	r0, [pc, #180]	; (80022c0 <updateMap+0x2b8>)
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	440b      	add	r3, r1
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4403      	add	r3, r0
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	dd19      	ble.n	8002256 <updateMap+0x24e>
					bombRangeMap[index.y+1][index.x][Up]=bombRangeMap[index.y][index.x][Up]+1;
 8002222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002224:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002226:	4826      	ldr	r0, [pc, #152]	; (80022c0 <updateMap+0x2b8>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	440b      	add	r3, r1
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4403      	add	r3, r0
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800223c:	3201      	adds	r2, #1
 800223e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	4c1f      	ldr	r4, [pc, #124]	; (80022c0 <updateMap+0x2b8>)
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	4403      	add	r3, r0
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4423      	add	r3, r4
 8002254:	6019      	str	r1, [r3, #0]
		for(index.x=0;index.x+1<MAP_WIDTH;index.x++){
 8002256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002258:	3301      	adds	r3, #1
 800225a:	64bb      	str	r3, [r7, #72]	; 0x48
 800225c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225e:	2b0b      	cmp	r3, #11
 8002260:	f77f af76 	ble.w	8002150 <updateMap+0x148>
	for(Vector2 index = Vector2_init(0,0);index.y+1<MAP_HEIGHT;index.y++){
 8002264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002266:	3301      	adds	r3, #1
 8002268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800226a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226c:	2b0b      	cmp	r3, #11
 800226e:	f77f af6c 	ble.w	800214a <updateMap+0x142>
				}
			}
		}
	}
	for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.x+1<MAP_WIDTH;index.x++){
 8002272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002276:	220c      	movs	r2, #12
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fb00 	bl	8000880 <Vector2_init>
 8002280:	e056      	b.n	8002330 <updateMap+0x328>
		ObjectType type =getCell(index)->objType;
 8002282:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002286:	e893 0003 	ldmia.w	r3, {r0, r1}
 800228a:	f7ff fcf5 	bl	8001c78 <getCell>
 800228e:	4603      	mov	r3, r0
 8002290:	7e1b      	ldrb	r3, [r3, #24]
 8002292:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if(type == BreakableWall){
 8002296:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800229a:	2b02      	cmp	r3, #2
 800229c:	d116      	bne.n	80022cc <updateMap+0x2c4>
			bombRangeMap[index.y][index.x+1][Left]=1;
 800229e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	4806      	ldr	r0, [pc, #24]	; (80022c0 <updateMap+0x2b8>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4403      	add	r3, r0
 80022b6:	3308      	adds	r3, #8
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e035      	b.n	800232a <updateMap+0x322>
 80022be:	bf00      	nop
 80022c0:	20000d70 	.word	0x20000d70
 80022c4:	20000c18 	.word	0x20000c18
 80022c8:	20000cc4 	.word	0x20000cc4
		}
		else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Left]){
 80022cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d02a      	beq.n	800232a <updateMap+0x322>
 80022d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022d8:	48a5      	ldr	r0, [pc, #660]	; (8002570 <updateMap+0x568>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	4403      	add	r3, r0
 80022ea:	3308      	adds	r3, #8
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01b      	beq.n	800232a <updateMap+0x322>
			bombRangeMap[index.y][index.x+1][Left]=bombRangeMap[index.y][index.x][Left]+1;
 80022f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022f6:	489e      	ldr	r0, [pc, #632]	; (8002570 <updateMap+0x568>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	440b      	add	r3, r1
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4403      	add	r3, r0
 8002308:	3308      	adds	r3, #8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800230e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002310:	1c48      	adds	r0, r1, #1
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	4c96      	ldr	r4, [pc, #600]	; (8002570 <updateMap+0x568>)
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	4403      	add	r3, r0
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4423      	add	r3, r4
 8002326:	3308      	adds	r3, #8
 8002328:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.x+1<MAP_WIDTH;index.x++){
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	3301      	adds	r3, #1
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
 8002330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002332:	2b0b      	cmp	r3, #11
 8002334:	dda5      	ble.n	8002282 <updateMap+0x27a>
		}
	}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.y+1<MAP_HEIGHT;index.y++){
 8002336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800233a:	2200      	movs	r2, #0
 800233c:	210c      	movs	r1, #12
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fa9e 	bl	8000880 <Vector2_init>
 8002344:	e04b      	b.n	80023de <updateMap+0x3d6>
		ObjectType type =getCell(index)->objType;
 8002346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800234a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800234e:	f7ff fc93 	bl	8001c78 <getCell>
 8002352:	4603      	mov	r3, r0
 8002354:	7e1b      	ldrb	r3, [r3, #24]
 8002356:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		if(type == BreakableWall){
 800235a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800235e:	2b02      	cmp	r3, #2
 8002360:	d10e      	bne.n	8002380 <updateMap+0x378>
			bombRangeMap[index.y+1][index.x][Up]=1;
 8002362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002368:	4881      	ldr	r0, [pc, #516]	; (8002570 <updateMap+0x568>)
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	440b      	add	r3, r1
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4403      	add	r3, r0
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e02b      	b.n	80023d8 <updateMap+0x3d0>
		}
		else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Up]){
 8002380:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d027      	beq.n	80023d8 <updateMap+0x3d0>
 8002388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800238a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800238c:	4878      	ldr	r0, [pc, #480]	; (8002570 <updateMap+0x568>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	440b      	add	r3, r1
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	4403      	add	r3, r0
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d019      	beq.n	80023d8 <updateMap+0x3d0>
			bombRangeMap[index.y+1][index.x][Up]=bombRangeMap[index.y][index.x][Up]+1;
 80023a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023a8:	4871      	ldr	r0, [pc, #452]	; (8002570 <updateMap+0x568>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4403      	add	r3, r0
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023be:	3201      	adds	r2, #1
 80023c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	4c6a      	ldr	r4, [pc, #424]	; (8002570 <updateMap+0x568>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	4403      	add	r3, r0
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4423      	add	r3, r4
 80023d6:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.y+1<MAP_HEIGHT;index.y++){
 80023d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023da:	3301      	adds	r3, #1
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e0:	2b0b      	cmp	r3, #11
 80023e2:	ddb0      	ble.n	8002346 <updateMap+0x33e>
		}
	}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1);index.y>0;index.y--){
 80023e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e8:	220c      	movs	r2, #12
 80023ea:	210c      	movs	r1, #12
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fa47 	bl	8000880 <Vector2_init>
 80023f2:	e093      	b.n	800251c <updateMap+0x514>
			for(index.x=MAP_WIDTH-1;index.x>0;index.x--){
 80023f4:	230c      	movs	r3, #12
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
 80023f8:	e089      	b.n	800250e <updateMap+0x506>
				ObjectType type =getCell(index)->objType;
 80023fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002402:	f7ff fc39 	bl	8001c78 <getCell>
 8002406:	4603      	mov	r3, r0
 8002408:	7e1b      	ldrb	r3, [r3, #24]
 800240a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
				if(type == BreakableWall){
 800240e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002412:	2b02      	cmp	r3, #2
 8002414:	d11e      	bne.n	8002454 <updateMap+0x44c>
					bombRangeMap[index.y][index.x-1][Right]=1;
 8002416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	1e59      	subs	r1, r3, #1
 800241c:	4854      	ldr	r0, [pc, #336]	; (8002570 <updateMap+0x568>)
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	440b      	add	r3, r1
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4403      	add	r3, r0
 800242e:	330c      	adds	r3, #12
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
					bombRangeMap[index.y-1][index.x][Down]=1;
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800243a:	484d      	ldr	r0, [pc, #308]	; (8002570 <updateMap+0x568>)
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	440b      	add	r3, r1
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4403      	add	r3, r0
 800244c:	3304      	adds	r3, #4
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e059      	b.n	8002508 <updateMap+0x500>
				}
				else if(type != UnbreakableWall){
 8002454:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002458:	2b01      	cmp	r3, #1
 800245a:	d055      	beq.n	8002508 <updateMap+0x500>
					if(bombRangeMap[index.y][index.x][Right]){
 800245c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002460:	4843      	ldr	r0, [pc, #268]	; (8002570 <updateMap+0x568>)
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	440b      	add	r3, r1
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4403      	add	r3, r0
 8002472:	330c      	adds	r3, #12
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01b      	beq.n	80024b2 <updateMap+0x4aa>
						bombRangeMap[index.y][index.x-1][Right]=bombRangeMap[index.y][index.x][Right]+1;
 800247a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800247c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800247e:	483c      	ldr	r0, [pc, #240]	; (8002570 <updateMap+0x568>)
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	440b      	add	r3, r1
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	4403      	add	r3, r0
 8002490:	330c      	adds	r3, #12
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002498:	1e48      	subs	r0, r1, #1
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	4c34      	ldr	r4, [pc, #208]	; (8002570 <updateMap+0x568>)
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	4403      	add	r3, r0
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	4423      	add	r3, r4
 80024ae:	330c      	adds	r3, #12
 80024b0:	6019      	str	r1, [r3, #0]
					}
					if(bombRangeMap[index.y][index.x][Down]){
 80024b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b6:	482e      	ldr	r0, [pc, #184]	; (8002570 <updateMap+0x568>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	4403      	add	r3, r0
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <updateMap+0x500>
						bombRangeMap[index.y-1][index.x][Down]=bombRangeMap[index.y][index.x][Down]+1;
 80024d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d4:	4826      	ldr	r0, [pc, #152]	; (8002570 <updateMap+0x568>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4403      	add	r3, r0
 80024e6:	3304      	adds	r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ec:	3a01      	subs	r2, #1
 80024ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f0:	1c59      	adds	r1, r3, #1
 80024f2:	4c1f      	ldr	r4, [pc, #124]	; (8002570 <updateMap+0x568>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	4403      	add	r3, r0
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4423      	add	r3, r4
 8002504:	3304      	adds	r3, #4
 8002506:	6019      	str	r1, [r3, #0]
			for(index.x=MAP_WIDTH-1;index.x>0;index.x--){
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	3b01      	subs	r3, #1
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	f73f af72 	bgt.w	80023fa <updateMap+0x3f2>
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1);index.y>0;index.y--){
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	3b01      	subs	r3, #1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	2b00      	cmp	r3, #0
 8002520:	f73f af68 	bgt.w	80023f4 <updateMap+0x3ec>
					}
				}
			}
		}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.x>0;index.x--){
 8002524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002528:	2200      	movs	r2, #0
 800252a:	210c      	movs	r1, #12
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f9a7 	bl	8000880 <Vector2_init>
 8002532:	e051      	b.n	80025d8 <updateMap+0x5d0>
			ObjectType type =getCell(index)->objType;
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	e893 0003 	ldmia.w	r3, {r0, r1}
 800253c:	f7ff fb9c 	bl	8001c78 <getCell>
 8002540:	4603      	mov	r3, r0
 8002542:	7e1b      	ldrb	r3, [r3, #24]
 8002544:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			if(type == BreakableWall){
 8002548:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800254c:	2b02      	cmp	r3, #2
 800254e:	d111      	bne.n	8002574 <updateMap+0x56c>
				bombRangeMap[index.y][index.x-1][Right]=1;
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	1e59      	subs	r1, r3, #1
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <updateMap+0x568>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	440b      	add	r3, r1
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	4403      	add	r3, r0
 8002568:	330c      	adds	r3, #12
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e030      	b.n	80025d2 <updateMap+0x5ca>
 8002570:	20000d70 	.word	0x20000d70
			}
			else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Right]){
 8002574:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002578:	2b01      	cmp	r3, #1
 800257a:	d02a      	beq.n	80025d2 <updateMap+0x5ca>
 800257c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002580:	4897      	ldr	r0, [pc, #604]	; (80027e0 <updateMap+0x7d8>)
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	440b      	add	r3, r1
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4403      	add	r3, r0
 8002592:	330c      	adds	r3, #12
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01b      	beq.n	80025d2 <updateMap+0x5ca>
				bombRangeMap[index.y][index.x-1][Right]=bombRangeMap[index.y][index.x][Right]+1;
 800259a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800259e:	4890      	ldr	r0, [pc, #576]	; (80027e0 <updateMap+0x7d8>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4403      	add	r3, r0
 80025b0:	330c      	adds	r3, #12
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b8:	1e48      	subs	r0, r1, #1
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	4c88      	ldr	r4, [pc, #544]	; (80027e0 <updateMap+0x7d8>)
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	4403      	add	r3, r0
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4423      	add	r3, r4
 80025ce:	330c      	adds	r3, #12
 80025d0:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.x>0;index.x--){
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	dcaa      	bgt.n	8002534 <updateMap+0x52c>
			}
		}
		for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.y>0;index.y--){
 80025de:	f107 0320 	add.w	r3, r7, #32
 80025e2:	220c      	movs	r2, #12
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f94a 	bl	8000880 <Vector2_init>
 80025ec:	e04f      	b.n	800268e <updateMap+0x686>
			ObjectType type =getCell(index)->objType;
 80025ee:	f107 0320 	add.w	r3, r7, #32
 80025f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025f6:	f7ff fb3f 	bl	8001c78 <getCell>
 80025fa:	4603      	mov	r3, r0
 80025fc:	7e1b      	ldrb	r3, [r3, #24]
 80025fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(type == BreakableWall){
 8002602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002606:	2b02      	cmp	r3, #2
 8002608:	d10f      	bne.n	800262a <updateMap+0x622>
				bombRangeMap[index.y-1][index.x][Down]=1;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	6a39      	ldr	r1, [r7, #32]
 8002610:	4873      	ldr	r0, [pc, #460]	; (80027e0 <updateMap+0x7d8>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	440b      	add	r3, r1
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4403      	add	r3, r0
 8002622:	3304      	adds	r3, #4
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e02e      	b.n	8002688 <updateMap+0x680>
			}
			else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Down]){
 800262a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800262e:	2b01      	cmp	r3, #1
 8002630:	d02a      	beq.n	8002688 <updateMap+0x680>
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	486a      	ldr	r0, [pc, #424]	; (80027e0 <updateMap+0x7d8>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	440b      	add	r3, r1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	4403      	add	r3, r0
 8002648:	3304      	adds	r3, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <updateMap+0x680>
				bombRangeMap[index.y-1][index.x][Down]=bombRangeMap[index.y][index.x][Down]+1;
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	6a39      	ldr	r1, [r7, #32]
 8002654:	4862      	ldr	r0, [pc, #392]	; (80027e0 <updateMap+0x7d8>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	440b      	add	r3, r1
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4403      	add	r3, r0
 8002666:	3304      	adds	r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	3a01      	subs	r2, #1
 800266e:	6a38      	ldr	r0, [r7, #32]
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	4c5b      	ldr	r4, [pc, #364]	; (80027e0 <updateMap+0x7d8>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	4403      	add	r3, r0
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4423      	add	r3, r4
 8002684:	3304      	adds	r3, #4
 8002686:	6019      	str	r1, [r3, #0]
		for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.y>0;index.y--){
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	3b01      	subs	r3, #1
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	dcac      	bgt.n	80025ee <updateMap+0x5e6>
			}
		}
	QueueElement* element = bombs.front;
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <updateMap+0x7dc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	677b      	str	r3, [r7, #116]	; 0x74
	while(element != NULL){
 800269a:	e074      	b.n	8002786 <updateMap+0x77e>
		Bomb* bomb = (Bomb*)element->value;
 800269c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	667b      	str	r3, [r7, #100]	; 0x64
		Vector2 startIndex = bomb->index,index;
 80026a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ac:	e883 0003 	stmia.w	r3, {r0, r1}
		int range = bomb->range;
 80026b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	663b      	str	r3, [r7, #96]	; 0x60
		element =element->next;
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	677b      	str	r3, [r7, #116]	; 0x74
		dangerMap[startIndex.y][startIndex.x]=true;
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	4849      	ldr	r0, [pc, #292]	; (80027e8 <updateMap+0x7e0>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	4403      	add	r3, r0
 80026ce:	440b      	add	r3, r1
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<4;i++){
 80026d4:	2300      	movs	r3, #0
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
 80026d8:	e052      	b.n	8002780 <updateMap+0x778>
			index = getIndexAtDirection(startIndex,(Direction)i);
 80026da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f107 0010 	add.w	r0, r7, #16
 80026e2:	f107 0218 	add.w	r2, r7, #24
 80026e6:	ca06      	ldmia	r2, {r1, r2}
 80026e8:	f7ff fc4d 	bl	8001f86 <getIndexAtDirection>
			for(int j=0;j<range&&inBetween(0,index.x,MAP_WIDTH-1)&&inBetween(0,index.y,MAP_HEIGHT-1)&&!walkMap[index.y][index.x];j++,index=getIndexAtDirection(index,(Direction)i)){
 80026ec:	2300      	movs	r3, #0
 80026ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026f0:	e01d      	b.n	800272e <updateMap+0x726>
				dangerMap[index.y][index.x]=true;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	6939      	ldr	r1, [r7, #16]
 80026f6:	483c      	ldr	r0, [pc, #240]	; (80027e8 <updateMap+0x7e0>)
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	4403      	add	r3, r0
 8002704:	440b      	add	r3, r1
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<range&&inBetween(0,index.x,MAP_WIDTH-1)&&inBetween(0,index.y,MAP_HEIGHT-1)&&!walkMap[index.y][index.x];j++,index=getIndexAtDirection(index,(Direction)i)){
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	3301      	adds	r3, #1
 800270e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4638      	mov	r0, r7
 8002716:	f107 0210 	add.w	r2, r7, #16
 800271a:	ca06      	ldmia	r2, {r1, r2}
 800271c:	f7ff fc33 	bl	8001f86 <getIndexAtDirection>
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	463a      	mov	r2, r7
 8002726:	e892 0003 	ldmia.w	r2, {r0, r1}
 800272a:	e883 0003 	stmia.w	r3, {r0, r1}
 800272e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002732:	429a      	cmp	r2, r3
 8002734:	da21      	bge.n	800277a <updateMap+0x772>
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	220c      	movs	r2, #12
 800273a:	4619      	mov	r1, r3
 800273c:	2000      	movs	r0, #0
 800273e:	f004 fb98 	bl	8006e72 <inBetween>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d018      	beq.n	800277a <updateMap+0x772>
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	220c      	movs	r2, #12
 800274c:	4619      	mov	r1, r3
 800274e:	2000      	movs	r0, #0
 8002750:	f004 fb8f 	bl	8006e72 <inBetween>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00f      	beq.n	800277a <updateMap+0x772>
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	6939      	ldr	r1, [r7, #16]
 800275e:	4823      	ldr	r0, [pc, #140]	; (80027ec <updateMap+0x7e4>)
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	4403      	add	r3, r0
 800276c:	440b      	add	r3, r1
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1bb      	bne.n	80026f2 <updateMap+0x6ea>
		for(int i=0;i<4;i++){
 800277a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800277c:	3301      	adds	r3, #1
 800277e:	673b      	str	r3, [r7, #112]	; 0x70
 8002780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002782:	2b03      	cmp	r3, #3
 8002784:	dda9      	ble.n	80026da <updateMap+0x6d2>
	while(element != NULL){
 8002786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002788:	2b00      	cmp	r3, #0
 800278a:	d187      	bne.n	800269c <updateMap+0x694>
			}
		}
	}
	for(int i=0;i<playerCount;i++){
 800278c:	2300      	movs	r3, #0
 800278e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002790:	e01b      	b.n	80027ca <updateMap+0x7c2>
		Vector2 index=getPlayerIndex(&players[i]);
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <updateMap+0x7e8>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002798:	214c      	movs	r1, #76	; 0x4c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	441a      	add	r2, r3
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fbde 	bl	8001f68 <getPlayerIndex>
		walkMap[index.y][index.x]=true;
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	480e      	ldr	r0, [pc, #56]	; (80027ec <updateMap+0x7e4>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	4403      	add	r3, r0
 80027be:	440b      	add	r3, r1
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<playerCount;i++){
 80027c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c6:	3301      	adds	r3, #1
 80027c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <updateMap+0x7ec>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbde      	blt.n	8002792 <updateMap+0x78a>
	}

}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	377c      	adds	r7, #124	; 0x7c
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000d70 	.word	0x20000d70
 80027e4:	20002e20 	.word	0x20002e20
 80027e8:	20000c18 	.word	0x20000c18
 80027ec:	20000cc4 	.word	0x20000cc4
 80027f0:	20002e18 	.word	0x20002e18
 80027f4:	2000018c 	.word	0x2000018c

080027f8 <BFSValue_init>:
typedef struct BFSValueStruct{
	Vector2 index;
	int weight;
	Direction startDirection;
}BFSValue;
BFSValue* BFSValue_init(Vector2 index,int weight,Direction startDirection){
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	f107 0408 	add.w	r4, r7, #8
 8002802:	e884 0003 	stmia.w	r4, {r0, r1}
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	70fb      	strb	r3, [r7, #3]
	BFSValue* val=(BFSValue*)malloc(sizeof(BFSValue ));
 800280a:	2010      	movs	r0, #16
 800280c:	f00a f8c6 	bl	800c99c <malloc>
 8002810:	4603      	mov	r3, r0
 8002812:	617b      	str	r3, [r7, #20]
	val->index = index;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	461a      	mov	r2, r3
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002820:	e882 0003 	stmia.w	r2, {r0, r1}
	val->weight = weight;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
	val->startDirection = startDirection;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	731a      	strb	r2, [r3, #12]
	return val;
 8002830:	697b      	ldr	r3, [r7, #20]
}
 8002832:	4618      	mov	r0, r3
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
	...

0800283c <findNextIndex>:
Vector2 findNextIndex(Player* player){
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8002842:	af00      	add	r7, sp, #0
 8002844:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002848:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800284c:	6018      	str	r0, [r3, #0]
 800284e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002852:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002856:	6019      	str	r1, [r3, #0]
	Vector2 startIndex = getPlayerIndex(player);
 8002858:	f507 7266 	add.w	r2, r7, #920	; 0x398
 800285c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002860:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	4610      	mov	r0, r2
 8002868:	f7ff fb7e 	bl	8001f68 <getPlayerIndex>
	bool havePasts[MAP_HEIGHT][MAP_WIDTH];
	for(int i=0;i<MAP_HEIGHT;i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002872:	e022      	b.n	80028ba <findNextIndex+0x7e>
		for(int j=0;j<MAP_WIDTH;j++){
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 800287a:	e015      	b.n	80028a8 <findNextIndex+0x6c>
			havePasts[i][j]=false;
 800287c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002880:	f5a3 7182 	sub.w	r1, r3, #260	; 0x104
 8002884:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	18ca      	adds	r2, r1, r3
 8002894:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002898:	4413      	add	r3, r2
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<MAP_WIDTH;j++){
 800289e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80028a2:	3301      	adds	r3, #1
 80028a4:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80028a8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	dde5      	ble.n	800287c <findNextIndex+0x40>
	for(int i=0;i<MAP_HEIGHT;i++){
 80028b0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80028b4:	3301      	adds	r3, #1
 80028b6:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80028ba:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	ddd8      	ble.n	8002874 <findNextIndex+0x38>
		}
	}
	havePasts[startIndex.y][startIndex.x]=true;
 80028c2:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 80028c6:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80028ca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028ce:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	4403      	add	r3, r0
 80028de:	440b      	add	r3, r1
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
	if(dangerMap[startIndex.y][startIndex.x]){
 80028e4:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 80028e8:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80028ec:	48cd      	ldr	r0, [pc, #820]	; (8002c24 <findNextIndex+0x3e8>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	4403      	add	r3, r0
 80028fa:	440b      	add	r3, r1
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8201 	beq.w	8002d06 <findNextIndex+0x4ca>
		Queue q = {NULL,NULL,0};
 8002904:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002908:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002914:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002920:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
		Vector2 index;
		for(int i=0;i<4;i++){
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800292e:	e0d3      	b.n	8002ad8 <findNextIndex+0x29c>
			index = getIndexAtDirection(startIndex,(Direction)i);
 8002930:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800293a:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 800293e:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8002942:	ca06      	ldmia	r2, {r1, r2}
 8002944:	f7ff fb1f 	bl	8001f86 <getIndexAtDirection>
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8002948:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800294c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	220c      	movs	r2, #12
 8002954:	4619      	mov	r1, r3
 8002956:	2000      	movs	r0, #0
 8002958:	f004 fa8b 	bl	8006e72 <inBetween>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80b5 	beq.w	8002ace <findNextIndex+0x292>
 8002964:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002968:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	220c      	movs	r2, #12
 8002970:	4619      	mov	r1, r3
 8002972:	2000      	movs	r0, #0
 8002974:	f004 fa7d 	bl	8006e72 <inBetween>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a7 	beq.w	8002ace <findNextIndex+0x292>
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002980:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800298e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	48a4      	ldr	r0, [pc, #656]	; (8002c28 <findNextIndex+0x3ec>)
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	4403      	add	r3, r0
 80029a2:	440b      	add	r3, r1
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 808e 	beq.w	8002ace <findNextIndex+0x292>
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 80029b2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029ca:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	4403      	add	r3, r0
 80029da:	440b      	add	r3, r1
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f083 0301 	eor.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d072      	beq.n	8002ace <findNextIndex+0x292>
					(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 80029e8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029f4:	f7ff f940 	bl	8001c78 <getCell>
 80029f8:	4603      	mov	r3, r0
 80029fa:	7e1b      	ldrb	r3, [r3, #24]
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d108      	bne.n	8002a12 <findNextIndex+0x1d6>
					(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002a00:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a04:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d05d      	beq.n	8002ace <findNextIndex+0x292>
				if(!dangerMap[index.y][index.x]){
 8002a12:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a16:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	487f      	ldr	r0, [pc, #508]	; (8002c24 <findNextIndex+0x3e8>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	4403      	add	r3, r0
 8002a34:	440b      	add	r3, r1
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01c      	beq.n	8002a7c <findNextIndex+0x240>
					while(q.size!=0)
 8002a42:	e004      	b.n	8002a4e <findNextIndex+0x212>
						dequeue(&q);
 8002a44:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 facf 	bl	8006fec <dequeue>
					while(q.size!=0)
 8002a4e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f3      	bne.n	8002a44 <findNextIndex+0x208>
					return index;
 8002a5c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a60:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a6a:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002a6e:	460b      	mov	r3, r1
 8002a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a74:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a78:	f000 bda1 	b.w	80035be <findNextIndex+0xd82>
				}
				else{
					havePasts[index.y][index.x]=true;
 8002a7c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a94:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4403      	add	r3, r0
 8002aa4:	440b      	add	r3, r1
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
					enqueue(&q,BFSValue_init(index,1,(Direction)i));
 8002aaa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002ab4:	f5a2 718c 	sub.w	r1, r2, #280	; 0x118
 8002ab8:	2201      	movs	r2, #1
 8002aba:	c903      	ldmia	r1, {r0, r1}
 8002abc:	f7ff fe9c 	bl	80027f8 <BFSValue_init>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 fa5b 	bl	8006f84 <enqueue>
		for(int i=0;i<4;i++){
 8002ace:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8002ad8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	f77f af27 	ble.w	8002930 <findNextIndex+0xf4>
				}
			}
		}
		while(q.size!=0){
 8002ae2:	e0fa      	b.n	8002cda <findNextIndex+0x49e>
			BFSValue* val = (BFSValue*)q.front->value;
 8002ae4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ae8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
			for(int i=0;i<4;i++){
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002afa:	e0e4      	b.n	8002cc6 <findNextIndex+0x48a>
				index = getIndexAtDirection(val->index,(Direction)i);
 8002afc:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002b06:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8002b10:	ca06      	ldmia	r2, {r1, r2}
 8002b12:	f7ff fa38 	bl	8001f86 <getIndexAtDirection>
 8002b16:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b1a:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002b1e:	4623      	mov	r3, r4
 8002b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b24:	e883 0003 	stmia.w	r3, {r0, r1}
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)
 8002b28:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	220c      	movs	r2, #12
 8002b34:	4619      	mov	r1, r3
 8002b36:	2000      	movs	r0, #0
 8002b38:	f004 f99b 	bl	8006e72 <inBetween>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80bc 	beq.w	8002cbc <findNextIndex+0x480>
 8002b44:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	220c      	movs	r2, #12
 8002b50:	4619      	mov	r1, r3
 8002b52:	2000      	movs	r0, #0
 8002b54:	f004 f98d 	bl	8006e72 <inBetween>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80ae 	beq.w	8002cbc <findNextIndex+0x480>
						&&!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002b60:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	482c      	ldr	r0, [pc, #176]	; (8002c28 <findNextIndex+0x3ec>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	4403      	add	r3, r0
 8002b82:	440b      	add	r3, r1
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8095 	beq.w	8002cbc <findNextIndex+0x480>
 8002b92:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ba0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002baa:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4403      	add	r3, r0
 8002bba:	440b      	add	r3, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d079      	beq.n	8002cbc <findNextIndex+0x480>
						(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002bc8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bd4:	f7ff f850 	bl	8001c78 <getCell>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	7e1b      	ldrb	r3, [r3, #24]
						&&!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d108      	bne.n	8002bf2 <findNextIndex+0x3b6>
						(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002be0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002be4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d064      	beq.n	8002cbc <findNextIndex+0x480>
					if(!dangerMap[index.y][index.x]){
 8002bf2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bf6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	4807      	ldr	r0, [pc, #28]	; (8002c24 <findNextIndex+0x3e8>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	4403      	add	r3, r0
 8002c14:	440b      	add	r3, r1
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d020      	beq.n	8002c64 <findNextIndex+0x428>
						while(q.size!=0)
 8002c22:	e008      	b.n	8002c36 <findNextIndex+0x3fa>
 8002c24:	20000c18 	.word	0x20000c18
 8002c28:	20000cc4 	.word	0x20000cc4
							dequeue(&q);
 8002c2c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 f9db 	bl	8006fec <dequeue>
						while(q.size!=0)
 8002c36:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f3      	bne.n	8002c2c <findNextIndex+0x3f0>
						return getIndexAtDirection(startIndex,val->startDirection);
 8002c44:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c48:	7b1a      	ldrb	r2, [r3, #12]
 8002c4a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c4e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8002c5a:	ca06      	ldmia	r2, {r1, r2}
 8002c5c:	f7ff f993 	bl	8001f86 <getIndexAtDirection>
 8002c60:	f000 bcad 	b.w	80035be <findNextIndex+0xd82>
					}
					else{
						havePasts[index.y][index.x]=true;
 8002c64:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c7c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	4403      	add	r3, r0
 8002c8c:	440b      	add	r3, r1
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
						enqueue(&q,BFSValue_init(index,val->weight+1,val->startDirection));
 8002c92:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ca0:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8002ca4:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8002ca8:	c903      	ldmia	r1, {r0, r1}
 8002caa:	f7ff fda5 	bl	80027f8 <BFSValue_init>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 f964 	bl	8006f84 <enqueue>
			for(int i=0;i<4;i++){
 8002cbc:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002cc6:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	f77f af16 	ble.w	8002afc <findNextIndex+0x2c0>
					}
				}
			}
			dequeue(&q);
 8002cd0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f004 f989 	bl	8006fec <dequeue>
		while(q.size!=0){
 8002cda:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aefd 	bne.w	8002ae4 <findNextIndex+0x2a8>
		}
		return startIndex;
 8002cea:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cee:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002cfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cfe:	e882 0003 	stmia.w	r2, {r0, r1}
 8002d02:	f000 bc5c 	b.w	80035be <findNextIndex+0xd82>
	}
	else{
		int scoreMap[MAP_HEIGHT][MAP_WIDTH];
		for(int i=0;i<MAP_HEIGHT;i++){
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002d0c:	e0e3      	b.n	8002ed6 <findNextIndex+0x69a>
			for(int j=0;j<MAP_WIDTH;j++){
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002d14:	e0d5      	b.n	8002ec2 <findNextIndex+0x686>
				scoreMap[i][j]=0;
 8002d16:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d1a:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002d1e:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d30:	4413      	add	r3, r2
 8002d32:	2200      	movs	r2, #0
 8002d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k=0;k<4;k++){
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002d3e:	e051      	b.n	8002de4 <findNextIndex+0x5a8>
					if(bombRangeMap[i][j][k]&&player->bombRange>=bombRangeMap[i][j][k]){
 8002d40:	4982      	ldr	r1, [pc, #520]	; (8002f4c <findNextIndex+0x710>)
 8002d42:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d54:	4413      	add	r3, r2
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d039      	beq.n	8002dda <findNextIndex+0x59e>
 8002d66:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d6a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a19      	ldr	r1, [r3, #32]
 8002d72:	4876      	ldr	r0, [pc, #472]	; (8002f4c <findNextIndex+0x710>)
 8002d74:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d86:	4413      	add	r3, r2
 8002d88:	009a      	lsls	r2, r3, #2
 8002d8a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d8e:	4413      	add	r3, r2
 8002d90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d94:	4299      	cmp	r1, r3
 8002d96:	db20      	blt.n	8002dda <findNextIndex+0x59e>
						scoreMap[i][j]+=5;
 8002d98:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d9c:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002da0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002db2:	4413      	add	r3, r2
 8002db4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002db8:	1d58      	adds	r0, r3, #5
 8002dba:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002dbe:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002dc2:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k=0;k<4;k++){
 8002dda:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002dde:	3301      	adds	r3, #1
 8002de0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002de4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	dda9      	ble.n	8002d40 <findNextIndex+0x504>
					}
				}
				if(map[i][j].objType==SpeedItem||
 8002dec:	4958      	ldr	r1, [pc, #352]	; (8002f50 <findNextIndex+0x714>)
 8002dee:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e00:	4413      	add	r3, r2
 8002e02:	015b      	lsls	r3, r3, #5
 8002e04:	440b      	add	r3, r1
 8002e06:	3318      	adds	r3, #24
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d032      	beq.n	8002e74 <findNextIndex+0x638>
					map[i][j].objType==BombAmountItem||
 8002e0e:	4950      	ldr	r1, [pc, #320]	; (8002f50 <findNextIndex+0x714>)
 8002e10:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e22:	4413      	add	r3, r2
 8002e24:	015b      	lsls	r3, r3, #5
 8002e26:	440b      	add	r3, r1
 8002e28:	3318      	adds	r3, #24
 8002e2a:	781b      	ldrb	r3, [r3, #0]
				if(map[i][j].objType==SpeedItem||
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d021      	beq.n	8002e74 <findNextIndex+0x638>
					map[i][j].objType==BombRangeItem||
 8002e30:	4947      	ldr	r1, [pc, #284]	; (8002f50 <findNextIndex+0x714>)
 8002e32:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e44:	4413      	add	r3, r2
 8002e46:	015b      	lsls	r3, r3, #5
 8002e48:	440b      	add	r3, r1
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	781b      	ldrb	r3, [r3, #0]
					map[i][j].objType==BombAmountItem||
 8002e4e:	2b07      	cmp	r3, #7
 8002e50:	d010      	beq.n	8002e74 <findNextIndex+0x638>
					map[i][j].objType==HealthItem){
 8002e52:	493f      	ldr	r1, [pc, #252]	; (8002f50 <findNextIndex+0x714>)
 8002e54:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e66:	4413      	add	r3, r2
 8002e68:	015b      	lsls	r3, r3, #5
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	781b      	ldrb	r3, [r3, #0]
					map[i][j].objType==BombRangeItem||
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d121      	bne.n	8002eb8 <findNextIndex+0x67c>
					scoreMap[i][j]+=15;
 8002e74:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e78:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002e7c:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e8e:	4413      	add	r3, r2
 8002e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e94:	f103 000f 	add.w	r0, r3, #15
 8002e98:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e9c:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002ea0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			for(int j=0;j<MAP_WIDTH;j++){
 8002eb8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002ec2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	f77f af25 	ble.w	8002d16 <findNextIndex+0x4da>
		for(int i=0;i<MAP_HEIGHT;i++){
 8002ecc:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002ed6:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	f77f af17 	ble.w	8002d0e <findNextIndex+0x4d2>
				}

			}
		}
		for(int i=0;i<playerCount;i++){
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8002ee6:	e0e0      	b.n	80030aa <findNextIndex+0x86e>
			if((&players[i])!=player){
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <findNextIndex+0x718>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002ef0:	214c      	movs	r1, #76	; 0x4c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002efc:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f000 80cc 	beq.w	80030a0 <findNextIndex+0x864>
				for(int j=0;j<4;j++){
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002f0e:	e0c2      	b.n	8003096 <findNextIndex+0x85a>
					Vector2 index = getIndexAtDirection(getPlayerIndex(&players[i]),(Direction)j);
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <findNextIndex+0x718>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002f18:	214c      	movs	r1, #76	; 0x4c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	441a      	add	r2, r3
 8002f20:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f81e 	bl	8001f68 <getPlayerIndex>
 8002f2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f36:	f5a2 709e 	sub.w	r0, r2, #316	; 0x13c
 8002f3a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8002f3e:	ca06      	ldmia	r2, {r1, r2}
 8002f40:	f7ff f821 	bl	8001f86 <getIndexAtDirection>
					for(int k=0;k<player->bombRange&&inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&(!walkMap[index.y][index.x]||Equal(index,startIndex) );k++,index=getIndexAtDirection(index,(Direction)j)){
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002f4a:	e054      	b.n	8002ff6 <findNextIndex+0x7ba>
 8002f4c:	20000d70 	.word	0x20000d70
 8002f50:	200018f4 	.word	0x200018f4
 8002f54:	20002e18 	.word	0x20002e18
						scoreMap[index.y][index.x]+=10-2*k;
 8002f58:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f70:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4403      	add	r3, r0
 8002f80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002f84:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002f88:	f1c3 0305 	rsb	r3, r3, #5
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f92:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002f96:	6852      	ldr	r2, [r2, #4]
 8002f98:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8002f9c:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 8002fa0:	6804      	ldr	r4, [r0, #0]
 8002fa2:	18c8      	adds	r0, r1, r3
 8002fa4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fa8:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4423      	add	r3, r4
 8002fb8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
					for(int k=0;k<player->bombRange&&inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&(!walkMap[index.y][index.x]||Equal(index,startIndex) );k++,index=getIndexAtDirection(index,(Direction)j)){
 8002fbc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002fc6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002fd0:	f5a2 749e 	sub.w	r4, r2, #316	; 0x13c
 8002fd4:	4638      	mov	r0, r7
 8002fd6:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002fda:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002fde:	ca06      	ldmia	r2, {r1, r2}
 8002fe0:	f7fe ffd1 	bl	8001f86 <getIndexAtDirection>
 8002fe4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fe8:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002fec:	4623      	mov	r3, r4
 8002fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ff6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ffa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8003006:	429a      	cmp	r2, r3
 8003008:	da40      	bge.n	800308c <findNextIndex+0x850>
 800300a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800300e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	220c      	movs	r2, #12
 8003016:	4619      	mov	r1, r3
 8003018:	2000      	movs	r0, #0
 800301a:	f003 ff2a 	bl	8006e72 <inBetween>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d033      	beq.n	800308c <findNextIndex+0x850>
 8003024:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003028:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	220c      	movs	r2, #12
 8003030:	4619      	mov	r1, r3
 8003032:	2000      	movs	r0, #0
 8003034:	f003 ff1d 	bl	8006e72 <inBetween>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d026      	beq.n	800308c <findNextIndex+0x850>
 800303e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003042:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800304c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	48a7      	ldr	r0, [pc, #668]	; (80032f0 <findNextIndex+0xab4>)
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	4403      	add	r3, r0
 8003060:	440b      	add	r3, r1
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	f083 0301 	eor.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	f47f af74 	bne.w	8002f58 <findNextIndex+0x71c>
 8003070:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003074:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8003078:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800307c:	cb0c      	ldmia	r3, {r2, r3}
 800307e:	c903      	ldmia	r1, {r0, r1}
 8003080:	f7fd fcb5 	bl	80009ee <Equal>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f af66 	bne.w	8002f58 <findNextIndex+0x71c>
				for(int j=0;j<4;j++){
 800308c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8003090:	3301      	adds	r3, #1
 8003092:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8003096:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800309a:	2b03      	cmp	r3, #3
 800309c:	f77f af38 	ble.w	8002f10 <findNextIndex+0x6d4>
		for(int i=0;i<playerCount;i++){
 80030a0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80030a4:	3301      	adds	r3, #1
 80030a6:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80030aa:	4b92      	ldr	r3, [pc, #584]	; (80032f4 <findNextIndex+0xab8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80030b2:	429a      	cmp	r2, r3
 80030b4:	f6ff af18 	blt.w	8002ee8 <findNextIndex+0x6ac>
					}
				}
			}
		}
		Vector2 resultIndex=startIndex;
 80030b8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030c0:	461a      	mov	r2, r3
 80030c2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80030c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030ca:	e882 0003 	stmia.w	r2, {r0, r1}
		Direction resultDirection;
		int mxResult=scoreMap[startIndex.y][startIndex.x];
 80030ce:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 80030d2:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 80030d6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030da:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	4403      	add	r3, r0
 80030ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ee:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		Queue q = {NULL,NULL,0};
 80030f2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003106:	2200      	movs	r2, #0
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800310e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
		Vector2 index;
		for(int i=0;i<4;i++){
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800311c:	e0d5      	b.n	80032ca <findNextIndex+0xa8e>
			index = getIndexAtDirection(startIndex,(Direction)i);
 800311e:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003128:	f5a2 709a 	sub.w	r0, r2, #308	; 0x134
 800312c:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8003130:	ca06      	ldmia	r2, {r1, r2}
 8003132:	f7fe ff28 	bl	8001f86 <getIndexAtDirection>
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8003136:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800313a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	220c      	movs	r2, #12
 8003142:	4619      	mov	r1, r3
 8003144:	2000      	movs	r0, #0
 8003146:	f003 fe94 	bl	8006e72 <inBetween>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80b7 	beq.w	80032c0 <findNextIndex+0xa84>
 8003152:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003156:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	220c      	movs	r2, #12
 800315e:	4619      	mov	r1, r3
 8003160:	2000      	movs	r0, #0
 8003162:	f003 fe86 	bl	8006e72 <inBetween>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a9 	beq.w	80032c0 <findNextIndex+0xa84>
					!walkMap[index.y][index.x]&&
 800316e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003172:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800317c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	485b      	ldr	r0, [pc, #364]	; (80032f0 <findNextIndex+0xab4>)
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	4403      	add	r3, r0
 8003190:	440b      	add	r3, r1
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8090 	beq.w	80032c0 <findNextIndex+0xa84>
					!havePasts[index.y][index.x]&&
 80031a0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031b8:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	4403      	add	r3, r0
 80031c8:	440b      	add	r3, r1
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
					!walkMap[index.y][index.x]&&
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d074      	beq.n	80032c0 <findNextIndex+0xa84>
					!dangerMap[index.y][index.x]){
 80031d6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	4843      	ldr	r0, [pc, #268]	; (80032f8 <findNextIndex+0xabc>)
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	4403      	add	r3, r0
 80031f8:	440b      	add	r3, r1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f083 0301 	eor.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
					!havePasts[index.y][index.x]&&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d05c      	beq.n	80032c0 <findNextIndex+0xa84>
				int newResult =scoreMap[index.y][index.x]-2;
 8003206:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800320a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003214:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800321e:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	4403      	add	r3, r0
 800322e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003232:	3b02      	subs	r3, #2
 8003234:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
				if(mxResult<newResult){
 8003238:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800323c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8003240:	429a      	cmp	r2, r3
 8003242:	da14      	bge.n	800326e <findNextIndex+0xa32>
					mxResult = newResult;
 8003244:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8003248:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
					resultIndex = index;
 800324c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003250:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8003254:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003258:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800325c:	460b      	mov	r3, r1
 800325e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003262:	e883 0003 	stmia.w	r3, {r0, r1}
					resultDirection = i;
 8003266:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800326a:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
				}
				havePasts[index.y][index.x]=true;
 800326e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003272:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800327c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003286:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	4403      	add	r3, r0
 8003296:	440b      	add	r3, r1
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
				enqueue(&q,BFSValue_init(index,2,(Direction)i));
 800329c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80032a6:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 80032aa:	2202      	movs	r2, #2
 80032ac:	c903      	ldmia	r1, {r0, r1}
 80032ae:	f7ff faa3 	bl	80027f8 <BFSValue_init>
 80032b2:	4602      	mov	r2, r0
 80032b4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fe62 	bl	8006f84 <enqueue>
		for(int i=0;i<4;i++){
 80032c0:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80032c4:	3301      	adds	r3, #1
 80032c6:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80032ca:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	f77f af25 	ble.w	800311e <findNextIndex+0x8e2>
			}
		}
		while(q.size!=0){
 80032d4:	e125      	b.n	8003522 <findNextIndex+0xce6>
			BFSValue* val = (BFSValue*)q.front->value;
 80032d6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
			for(int i=0;i<4;i++){
 80032e6:	2300      	movs	r3, #0
 80032e8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80032ec:	e10f      	b.n	800350e <findNextIndex+0xcd2>
 80032ee:	bf00      	nop
 80032f0:	20000cc4 	.word	0x20000cc4
 80032f4:	2000018c 	.word	0x2000018c
 80032f8:	20000c18 	.word	0x20000c18
				index = getIndexAtDirection(val->index,(Direction)i);
 80032fc:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003306:	f5a2 749a 	sub.w	r4, r2, #308	; 0x134
 800330a:	4638      	mov	r0, r7
 800330c:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8003310:	ca06      	ldmia	r2, {r1, r2}
 8003312:	f7fe fe38 	bl	8001f86 <getIndexAtDirection>
 8003316:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800331a:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 800331e:	4623      	mov	r3, r4
 8003320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003324:	e883 0003 	stmia.w	r3, {r0, r1}
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8003328:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800332c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	220c      	movs	r2, #12
 8003334:	4619      	mov	r1, r3
 8003336:	2000      	movs	r0, #0
 8003338:	f003 fd9b 	bl	8006e72 <inBetween>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80e0 	beq.w	8003504 <findNextIndex+0xcc8>
 8003344:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003348:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	220c      	movs	r2, #12
 8003350:	4619      	mov	r1, r3
 8003352:	2000      	movs	r0, #0
 8003354:	f003 fd8d 	bl	8006e72 <inBetween>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80d2 	beq.w	8003504 <findNextIndex+0xcc8>
						!walkMap[index.y][index.x]&&
 8003360:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003364:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800336e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	4896      	ldr	r0, [pc, #600]	; (80035d0 <findNextIndex+0xd94>)
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	4403      	add	r3, r0
 8003382:	440b      	add	r3, r1
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80b9 	beq.w	8003504 <findNextIndex+0xcc8>
						!havePasts[index.y][index.x]&&
 8003392:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003396:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033aa:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	4403      	add	r3, r0
 80033ba:	440b      	add	r3, r1
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	f083 0301 	eor.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
						!walkMap[index.y][index.x]&&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 809d 	beq.w	8003504 <findNextIndex+0xcc8>
						!dangerMap[index.y][index.x]){
 80033ca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	487d      	ldr	r0, [pc, #500]	; (80035d4 <findNextIndex+0xd98>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	4403      	add	r3, r0
 80033ec:	440b      	add	r3, r1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f083 0301 	eor.w	r3, r3, #1
 80033f4:	b2db      	uxtb	r3, r3
						!havePasts[index.y][index.x]&&
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8084 	beq.w	8003504 <findNextIndex+0xcc8>
					int newResult =scoreMap[index.y][index.x]-(val->weight*2);
 80033fc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003400:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800340a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003414:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	4403      	add	r3, r0
 8003424:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003428:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
					if(scoreMap[index.y][index.x]>0 && newResult<=0){
 8003436:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800343a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003444:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800344e:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	4403      	add	r3, r0
 800345e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003462:	2b00      	cmp	r3, #0
 8003464:	dd06      	ble.n	8003474 <findNextIndex+0xc38>
 8003466:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc02      	bgt.n	8003474 <findNextIndex+0xc38>
						newResult =1;
 800346e:	2301      	movs	r3, #1
 8003470:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
					}
					if(mxResult<newResult){
 8003474:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8003478:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800347c:	429a      	cmp	r2, r3
 800347e:	da15      	bge.n	80034ac <findNextIndex+0xc70>
						mxResult = newResult;
 8003480:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8003484:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
						resultIndex = index;
 8003488:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800348c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8003490:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003494:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8003498:	460b      	mov	r3, r1
 800349a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800349e:	e883 0003 	stmia.w	r3, {r0, r1}
						resultDirection = val->startDirection;
 80034a2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80034a6:	7b1b      	ldrb	r3, [r3, #12]
 80034a8:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
					}
					havePasts[index.y][index.x]=true;
 80034ac:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034c4:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	4403      	add	r3, r0
 80034d4:	440b      	add	r3, r1
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
					enqueue(&q,BFSValue_init(index,val->weight+1,val->startDirection));
 80034da:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80034e6:	7b1b      	ldrb	r3, [r3, #12]
 80034e8:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 80034ec:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80034f0:	c903      	ldmia	r1, {r0, r1}
 80034f2:	f7ff f981 	bl	80027f8 <BFSValue_init>
 80034f6:	4602      	mov	r2, r0
 80034f8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fd40 	bl	8006f84 <enqueue>
			for(int i=0;i<4;i++){
 8003504:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003508:	3301      	adds	r3, #1
 800350a:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 800350e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003512:	2b03      	cmp	r3, #3
 8003514:	f77f aef2 	ble.w	80032fc <findNextIndex+0xac0>
				}
			}
			dequeue(&q);
 8003518:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fd65 	bl	8006fec <dequeue>
		while(q.size!=0){
 8003522:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f aed2 	bne.w	80032d6 <findNextIndex+0xa9a>
		}
		if(Equal(resultIndex , startIndex) &&players->currentUseBomb<players->maxBombCount&&mxResult!=0){
 8003532:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003536:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800353a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800353e:	cb0c      	ldmia	r3, {r2, r3}
 8003540:	c903      	ldmia	r1, {r0, r1}
 8003542:	f7fd fa54 	bl	80009ee <Equal>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <findNextIndex+0xd36>
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <findNextIndex+0xd9c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <findNextIndex+0xd9c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	429a      	cmp	r2, r3
 800355a:	da0a      	bge.n	8003572 <findNextIndex+0xd36>
 800355c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <findNextIndex+0xd36>
			placeBomb(player);
 8003564:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003568:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	f7fe fb53 	bl	8001c18 <placeBomb>
		}

		if(Equal(resultIndex , startIndex))
 8003572:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003576:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800357a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800357e:	cb0c      	ldmia	r3, {r2, r3}
 8003580:	c903      	ldmia	r1, {r0, r1}
 8003582:	f7fd fa34 	bl	80009ee <Equal>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <findNextIndex+0xd6a>
			return startIndex;
 800358c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003590:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800359c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80035a4:	e00b      	b.n	80035be <findNextIndex+0xd82>
		else{
			return getIndexAtDirection(startIndex,resultDirection) ;
 80035a6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80035aa:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 80035b4:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80035b8:	ca06      	ldmia	r2, {r1, r2}
 80035ba:	f7fe fce4 	bl	8001f86 <getIndexAtDirection>
		}
	}
}
 80035be:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80035c2:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	20000cc4 	.word	0x20000cc4
 80035d4:	20000c18 	.word	0x20000c18
 80035d8:	20002e18 	.word	0x20002e18

080035dc <PlayerUI_init>:
PlayerUI PlayerUI_init(Player* player,Vector2 offset){
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b0ca      	sub	sp, #296	; 0x128
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6278      	str	r0, [r7, #36]	; 0x24
 80035e4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80035e8:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 80035ec:	6001      	str	r1, [r0, #0]
 80035ee:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80035f2:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 80035f6:	e881 000c 	stmia.w	r1, {r2, r3}
	PlayerUI playerUI;
	int x = 16 + UI_MARGIN;
 80035fa:	2312      	movs	r3, #18
 80035fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int y = 16 + UI_MARGIN;
 8003600:	2312      	movs	r3, #18
 8003602:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	playerUI.player = player;
 8003606:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800360a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
	playerUI.charactorTrans = Transform_init(Add(offset,Vector2_init(0,y)),Vector2_init(16,16),TopLeft);
 8003612:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003616:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd f92f 	bl	8000880 <Vector2_init>
 8003622:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8003626:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800362a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800362e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003638:	ca06      	ldmia	r2, {r1, r2}
 800363a:	f7fd f939 	bl	80008b0 <Add>
 800363e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003642:	2210      	movs	r2, #16
 8003644:	2110      	movs	r1, #16
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd f91a 	bl	8000880 <Vector2_init>
 800364c:	4638      	mov	r0, r7
 800364e:	2300      	movs	r3, #0
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800365c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003660:	ca06      	ldmia	r2, {r1, r2}
 8003662:	f7fd fa43 	bl	8000aec <Transform_init>
 8003666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800366a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800366e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003672:	461d      	mov	r5, r3
 8003674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	6023      	str	r3, [r4, #0]

	playerUI.speedImgTrans = Transform_init(Add(offset,Vector2_init(x,y)) ,Vector2_init(16,16),TopLeft);
 800367c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003680:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003684:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd f8f9 	bl	8000880 <Vector2_init>
 800368e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003692:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003696:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800369a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036a4:	ca06      	ldmia	r2, {r1, r2}
 80036a6:	f7fd f903 	bl	80008b0 <Add>
 80036aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036ae:	2210      	movs	r2, #16
 80036b0:	2110      	movs	r1, #16
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd f8e4 	bl	8000880 <Vector2_init>
 80036b8:	4638      	mov	r0, r7
 80036ba:	2300      	movs	r3, #0
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036c8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80036cc:	ca06      	ldmia	r2, {r1, r2}
 80036ce:	f7fd fa0d 	bl	8000aec <Transform_init>
 80036d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036da:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80036de:	461d      	mov	r5, r3
 80036e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	6023      	str	r3, [r4, #0]
	playerUI.bombAmountImgTrans = Transform_init(Add(offset,Vector2_init(x*2,y)) ,Vector2_init(16,16),TopLeft);
 80036e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036ec:	0059      	lsls	r1, r3, #1
 80036ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd f8c2 	bl	8000880 <Vector2_init>
 80036fc:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003700:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003704:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003712:	ca06      	ldmia	r2, {r1, r2}
 8003714:	f7fd f8cc 	bl	80008b0 <Add>
 8003718:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800371c:	2210      	movs	r2, #16
 800371e:	2110      	movs	r1, #16
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd f8ad 	bl	8000880 <Vector2_init>
 8003726:	4638      	mov	r0, r7
 8003728:	2300      	movs	r3, #0
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003736:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800373a:	ca06      	ldmia	r2, {r1, r2}
 800373c:	f7fd f9d6 	bl	8000aec <Transform_init>
 8003740:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003744:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003748:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800374c:	461d      	mov	r5, r3
 800374e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	6023      	str	r3, [r4, #0]
	playerUI.bombRangeImgTrans = Transform_init(Add(offset,Vector2_init(x*3,y)) ,Vector2_init(16,16),TopLeft);
 8003756:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	1899      	adds	r1, r3, r2
 8003760:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003764:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd f889 	bl	8000880 <Vector2_init>
 800376e:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8003772:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003776:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003784:	ca06      	ldmia	r2, {r1, r2}
 8003786:	f7fd f893 	bl	80008b0 <Add>
 800378a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800378e:	2210      	movs	r2, #16
 8003790:	2110      	movs	r1, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd f874 	bl	8000880 <Vector2_init>
 8003798:	4638      	mov	r0, r7
 800379a:	2300      	movs	r3, #0
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80037a8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80037ac:	ca06      	ldmia	r2, {r1, r2}
 80037ae:	f7fd f99d 	bl	8000aec <Transform_init>
 80037b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037ba:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80037be:	461d      	mov	r5, r3
 80037c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	6023      	str	r3, [r4, #0]
	playerUI.healthImgTrans = Transform_init(Add(offset,Vector2_init(x*4,y)) ,Vector2_init(16,16),TopLeft);
 80037c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037cc:	0099      	lsls	r1, r3, #2
 80037ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80037d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd f852 	bl	8000880 <Vector2_init>
 80037dc:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80037e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037e4:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037f2:	ca06      	ldmia	r2, {r1, r2}
 80037f4:	f7fd f85c 	bl	80008b0 <Add>
 80037f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037fc:	2210      	movs	r2, #16
 80037fe:	2110      	movs	r1, #16
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd f83d 	bl	8000880 <Vector2_init>
 8003806:	4638      	mov	r0, r7
 8003808:	2300      	movs	r3, #0
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003816:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800381a:	ca06      	ldmia	r2, {r1, r2}
 800381c:	f7fd f966 	bl	8000aec <Transform_init>
 8003820:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003824:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003828:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800382c:	461d      	mov	r5, r3
 800382e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	6023      	str	r3, [r4, #0]

	playerUI.startTextPos = Add(offset,Vector2_init(x,0));
 8003836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800383a:	2200      	movs	r2, #0
 800383c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd f81d 	bl	8000880 <Vector2_init>
 8003846:	4638      	mov	r0, r7
 8003848:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800384c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800385a:	ca06      	ldmia	r2, {r1, r2}
 800385c:	f7fd f828 	bl	80008b0 <Add>
 8003860:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003864:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8003868:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800386c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003870:	e883 0003 	stmia.w	r3, {r0, r1}
	return playerUI;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	4618      	mov	r0, r3
 8003878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387c:	2270      	movs	r2, #112	; 0x70
 800387e:	4619      	mov	r1, r3
 8003880:	f009 fc5c 	bl	800d13c <memcpy>
}
 8003884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003886:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800388a:	46bd      	mov	sp, r7
 800388c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003890 <DrawPlayerUI>:
void DrawPlayerUI(PlayerUI* playerUI){
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
	char str[10];

	DrawImage(&playerUI->charactorTrans,playerUI->player->imgPtr1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fd fa0d 	bl	8000cc4 <DrawImage>

	Vector2 pos =playerUI->startTextPos;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	3268      	adds	r2, #104	; 0x68
 80038b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038b6:	e883 0003 	stmia.w	r3, {r0, r1}
	DrawImage(&playerUI->speedImgTrans,shoeImage);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	332c      	adds	r3, #44	; 0x2c
 80038be:	493f      	ldr	r1, [pc, #252]	; (80039bc <DrawPlayerUI+0x12c>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd f9ff 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->speed);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	493b      	ldr	r1, [pc, #236]	; (80039c0 <DrawPlayerUI+0x130>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f009 faae 	bl	800ce34 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, WHITE, 2, BLACK);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	b2d9      	uxtb	r1, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	f107 0014 	add.w	r0, r7, #20
 80038e4:	2300      	movs	r3, #0
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2302      	movs	r3, #2
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038f0:	f003 fd30 	bl	8007354 <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3312      	adds	r3, #18
 80038f8:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->bombAmountImgTrans,addBombImage);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3340      	adds	r3, #64	; 0x40
 80038fe:	4931      	ldr	r1, [pc, #196]	; (80039c4 <DrawPlayerUI+0x134>)
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd f9df 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->maxBombCount);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	492b      	ldr	r1, [pc, #172]	; (80039c0 <DrawPlayerUI+0x130>)
 8003912:	4618      	mov	r0, r3
 8003914:	f009 fa8e 	bl	800ce34 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, GREEN, 2, BLACK);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	b2d9      	uxtb	r1, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	f107 0014 	add.w	r0, r7, #20
 8003924:	2300      	movs	r3, #0
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003930:	f003 fd10 	bl	8007354 <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3312      	adds	r3, #18
 8003938:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->bombRangeImgTrans,potionImage);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3354      	adds	r3, #84	; 0x54
 800393e:	4922      	ldr	r1, [pc, #136]	; (80039c8 <DrawPlayerUI+0x138>)
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd f9bf 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->bombRange);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	491b      	ldr	r1, [pc, #108]	; (80039c0 <DrawPlayerUI+0x130>)
 8003952:	4618      	mov	r0, r3
 8003954:	f009 fa6e 	bl	800ce34 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, BLUE, 2, BLACK);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b2d9      	uxtb	r1, r3
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	f107 0014 	add.w	r0, r7, #20
 8003964:	2300      	movs	r3, #0
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2302      	movs	r3, #2
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	231f      	movs	r3, #31
 800396e:	f003 fcf1 	bl	8007354 <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3312      	adds	r3, #18
 8003976:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->healthImgTrans,heartImage);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3318      	adds	r3, #24
 800397c:	4913      	ldr	r1, [pc, #76]	; (80039cc <DrawPlayerUI+0x13c>)
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd f9a0 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->health);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	490c      	ldr	r1, [pc, #48]	; (80039c0 <DrawPlayerUI+0x130>)
 8003990:	4618      	mov	r0, r3
 8003992:	f009 fa4f 	bl	800ce34 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, RED, 2, BLACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	b2d9      	uxtb	r1, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	f107 0014 	add.w	r0, r7, #20
 80039a2:	2300      	movs	r3, #0
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2302      	movs	r3, #2
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039ae:	f003 fcd1 	bl	8007354 <ILI9341_Draw_Text>
}
 80039b2:	bf00      	nop
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	0803bf2c 	.word	0x0803bf2c
 80039c0:	0800f108 	.word	0x0800f108
 80039c4:	0803cb2c 	.word	0x0803cb2c
 80039c8:	0803c32c 	.word	0x0803c32c
 80039cc:	0803c12c 	.word	0x0803c12c

080039d0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	; 0x38
 80039d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e6:	4bae      	ldr	r3, [pc, #696]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4aad      	ldr	r2, [pc, #692]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 80039ec:	f043 0310 	orr.w	r3, r3, #16
 80039f0:	6313      	str	r3, [r2, #48]	; 0x30
 80039f2:	4bab      	ldr	r3, [pc, #684]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039fe:	4ba8      	ldr	r3, [pc, #672]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4aa7      	ldr	r2, [pc, #668]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4ba5      	ldr	r3, [pc, #660]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a16:	4ba2      	ldr	r3, [pc, #648]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4aa1      	ldr	r2, [pc, #644]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b9f      	ldr	r3, [pc, #636]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a2e:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a9b      	ldr	r2, [pc, #620]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a46:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4a95      	ldr	r2, [pc, #596]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	; 0x30
 8003a52:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5e:	4b90      	ldr	r3, [pc, #576]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a8f      	ldr	r2, [pc, #572]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a76:	4b8a      	ldr	r3, [pc, #552]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a89      	ldr	r2, [pc, #548]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a7c:	f043 0308 	orr.w	r3, r3, #8
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b87      	ldr	r3, [pc, #540]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a8e:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <MX_GPIO_Init+0x2d0>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2168      	movs	r1, #104	; 0x68
 8003aaa:	487e      	ldr	r0, [pc, #504]	; (8003ca4 <MX_GPIO_Init+0x2d4>)
 8003aac:	f005 fd72 	bl	8009594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003ab6:	487c      	ldr	r0, [pc, #496]	; (8003ca8 <MX_GPIO_Init+0x2d8>)
 8003ab8:	f005 fd6c 	bl	8009594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	487a      	ldr	r0, [pc, #488]	; (8003cac <MX_GPIO_Init+0x2dc>)
 8003ac2:	f005 fd67 	bl	8009594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003acc:	4878      	ldr	r0, [pc, #480]	; (8003cb0 <MX_GPIO_Init+0x2e0>)
 8003ace:	f005 fd61 	bl	8009594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8003ad2:	2314      	movs	r3, #20
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	486f      	ldr	r0, [pc, #444]	; (8003ca4 <MX_GPIO_Init+0x2d4>)
 8003ae6:	f005 fb91 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8003aea:	2368      	movs	r3, #104	; 0x68
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	4619      	mov	r1, r3
 8003b00:	4868      	ldr	r0, [pc, #416]	; (8003ca4 <MX_GPIO_Init+0x2d4>)
 8003b02:	f005 fb83 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4864      	ldr	r0, [pc, #400]	; (8003cb0 <MX_GPIO_Init+0x2e0>)
 8003b1e:	f005 fb75 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b22:	2310      	movs	r3, #16
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b34:	4619      	mov	r1, r3
 8003b36:	485f      	ldr	r0, [pc, #380]	; (8003cb4 <MX_GPIO_Init+0x2e4>)
 8003b38:	f005 fb68 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003b3c:	2332      	movs	r3, #50	; 0x32
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b4c:	230b      	movs	r3, #11
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b54:	4619      	mov	r1, r3
 8003b56:	4856      	ldr	r0, [pc, #344]	; (8003cb0 <MX_GPIO_Init+0x2e0>)
 8003b58:	f005 fb58 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6e:	4619      	mov	r1, r3
 8003b70:	484f      	ldr	r0, [pc, #316]	; (8003cb0 <MX_GPIO_Init+0x2e0>)
 8003b72:	f005 fb4b 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b76:	2386      	movs	r3, #134	; 0x86
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b82:	2303      	movs	r3, #3
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b86:	230b      	movs	r3, #11
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4849      	ldr	r0, [pc, #292]	; (8003cb8 <MX_GPIO_Init+0x2e8>)
 8003b92:	f005 fb3b 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003baa:	4619      	mov	r1, r3
 8003bac:	483d      	ldr	r0, [pc, #244]	; (8003ca4 <MX_GPIO_Init+0x2d4>)
 8003bae:	f005 fb2d 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bc4:	230b      	movs	r3, #11
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4836      	ldr	r0, [pc, #216]	; (8003ca8 <MX_GPIO_Init+0x2d8>)
 8003bd0:	f005 fb1c 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003bd4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	2300      	movs	r3, #0
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bea:	4619      	mov	r1, r3
 8003bec:	482e      	ldr	r0, [pc, #184]	; (8003ca8 <MX_GPIO_Init+0x2d8>)
 8003bee:	f005 fb0d 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003bf2:	2340      	movs	r3, #64	; 0x40
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c06:	4619      	mov	r1, r3
 8003c08:	4828      	ldr	r0, [pc, #160]	; (8003cac <MX_GPIO_Init+0x2dc>)
 8003c0a:	f005 faff 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c12:	2300      	movs	r3, #0
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4822      	ldr	r0, [pc, #136]	; (8003cac <MX_GPIO_Init+0x2dc>)
 8003c22:	f005 faf3 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8003c26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c34:	2303      	movs	r3, #3
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	481c      	ldr	r0, [pc, #112]	; (8003cb0 <MX_GPIO_Init+0x2e0>)
 8003c40:	f005 fae4 	bl	800920c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003c44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c52:	2303      	movs	r3, #3
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c56:	230b      	movs	r3, #11
 8003c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4812      	ldr	r0, [pc, #72]	; (8003cac <MX_GPIO_Init+0x2dc>)
 8003c62:	f005 fad3 	bl	800920c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2100      	movs	r1, #0
 8003c6a:	2009      	movs	r0, #9
 8003c6c:	f004 ff1f 	bl	8008aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003c70:	2009      	movs	r0, #9
 8003c72:	f004 ff38 	bl	8008ae6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	200a      	movs	r0, #10
 8003c7c:	f004 ff17 	bl	8008aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003c80:	200a      	movs	r0, #10
 8003c82:	f004 ff30 	bl	8008ae6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2028      	movs	r0, #40	; 0x28
 8003c8c:	f004 ff0f 	bl	8008aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c90:	2028      	movs	r0, #40	; 0x28
 8003c92:	f004 ff28 	bl	8008ae6 <HAL_NVIC_EnableIRQ>

}
 8003c96:	bf00      	nop
 8003c98:	3738      	adds	r7, #56	; 0x38
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40021800 	.word	0x40021800
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40020000 	.word	0x40020000

08003cbc <setRotation>:
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
}

void setRotation(uint8_t rotation)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fc43 	bl	8007554 <ILI9341_Set_Rotation>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <drawImageAtPoint>:
{
	ILI9341_Draw_Image(imageArray, orientation);
}

void drawImageAtPoint(Image image, uint8_t rotation)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8003ce4:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8003ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cec:	461a      	mov	r2, r3
 8003cee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003cf2:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003cf6:	701a      	strb	r2, [r3, #0]
	setRotation(rotation);
 8003cf8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003cfc:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ffda 	bl	8003cbc <setRotation>

	Point startPoint = image.drawPoint;
 8003d08:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d0c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	Point endPoint = { 0, 0};
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206

	switch (rotation)
 8003d22:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d26:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d83d      	bhi.n	8003dac <drawImageAtPoint+0xd4>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <drawImageAtPoint+0x60>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d7b 	.word	0x08003d7b
 8003d3c:	08003d49 	.word	0x08003d49
 8003d40:	08003d7b 	.word	0x08003d7b
 8003d44:	08003d49 	.word	0x08003d49
	{
	case SCREEN_HORIZONTAL_1:
	case SCREEN_HORIZONTAL_2:
		endPoint.x = startPoint.x + image.width - 1;
 8003d48:	f8b7 2208 	ldrh.w	r2, [r7, #520]	; 0x208
 8003d4c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d50:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003d54:	891b      	ldrh	r3, [r3, #8]
 8003d56:	4413      	add	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.y + image.height;
 8003d62:	f8b7 220a 	ldrh.w	r2, [r7, #522]	; 0x20a
 8003d66:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d6a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003d6e:	895b      	ldrh	r3, [r3, #10]
 8003d70:	4413      	add	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		break;
 8003d78:	e018      	b.n	8003dac <drawImageAtPoint+0xd4>
	case SCREEN_VERTICAL_1:
	case SCREEN_VERTICAL_2:
		endPoint.x = startPoint.y + image.height - 1;
 8003d7a:	f8b7 220a 	ldrh.w	r2, [r7, #522]	; 0x20a
 8003d7e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d82:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003d86:	895b      	ldrh	r3, [r3, #10]
 8003d88:	4413      	add	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.x + image.width;
 8003d94:	f8b7 2208 	ldrh.w	r2, [r7, #520]	; 0x208
 8003d98:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d9c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003da0:	891b      	ldrh	r3, [r3, #8]
 8003da2:	4413      	add	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		break;
 8003daa:	bf00      	nop
	}

	ILI9341_Set_Address(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
 8003dac:	f8b7 0208 	ldrh.w	r0, [r7, #520]	; 0x208
 8003db0:	f8b7 120a 	ldrh.w	r1, [r7, #522]	; 0x20a
 8003db4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8003db8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8003dbc:	f003 fb60 	bl	8007480 <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dc6:	4834      	ldr	r0, [pc, #208]	; (8003e98 <drawImageAtPoint+0x1c0>)
 8003dc8:	f005 fbe4 	bl	8009594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dd2:	4831      	ldr	r0, [pc, #196]	; (8003e98 <drawImageAtPoint+0x1c0>)
 8003dd4:	f005 fbde 	bl	8009594 <HAL_GPIO_WritePin>

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];
	uint32_t counter = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003de4:	e035      	b.n	8003e52 <drawImageAtPoint+0x17a>
	{
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003dec:	e019      	b.n	8003e22 <drawImageAtPoint+0x14a>
		{
			Temp_small_buffer[k] = image.imageArray[counter + k];
 8003dee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003df2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8003dfc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e00:	440b      	add	r3, r1
 8003e02:	4413      	add	r3, r2
 8003e04:	7819      	ldrb	r1, [r3, #0]
 8003e06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e0a:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8003e0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e12:	4413      	add	r3, r2
 8003e14:	460a      	mov	r2, r1
 8003e16:	701a      	strb	r2, [r3, #0]
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8003e18:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003e22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e2a:	d3e0      	bcc.n	8003dee <drawImageAtPoint+0x116>
		}
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer, BURST_MAX_SIZE, 10);
 8003e2c:	f107 0110 	add.w	r1, r7, #16
 8003e30:	230a      	movs	r3, #10
 8003e32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e36:	4819      	ldr	r0, [pc, #100]	; (8003e9c <drawImageAtPoint+0x1c4>)
 8003e38:	f006 fe0f 	bl	800aa5a <HAL_SPI_Transmit>
		counter += BURST_MAX_SIZE;
 8003e3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003e40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003e44:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8003e48:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003e52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e56:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003e5a:	891b      	ldrh	r3, [r3, #8]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e62:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003e66:	895b      	ldrh	r3, [r3, #10]
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <drawImageAtPoint+0x1c8>)
 8003e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8003e72:	1112      	asrs	r2, r2, #4
 8003e74:	17db      	asrs	r3, r3, #31
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d3b1      	bcc.n	8003de6 <drawImageAtPoint+0x10e>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003e82:	2201      	movs	r2, #1
 8003e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e88:	4803      	ldr	r0, [pc, #12]	; (8003e98 <drawImageAtPoint+0x1c0>)
 8003e8a:	f005 fb83 	bl	8009594 <HAL_GPIO_WritePin>
}
 8003e8e:	bf00      	nop
 8003e90:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}
 8003e98:	40020800 	.word	0x40020800
 8003e9c:	20002e58 	.word	0x20002e58
 8003ea0:	10624dd3 	.word	0x10624dd3

08003ea4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea8:	f3bf 8f4f 	dsb	sy
}
 8003eac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003eae:	f3bf 8f6f 	isb	sy
}
 8003eb2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <SCB_EnableICache+0x48>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003ebc:	f3bf 8f4f 	dsb	sy
}
 8003ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ec2:	f3bf 8f6f 	isb	sy
}
 8003ec6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <SCB_EnableICache+0x48>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	4a07      	ldr	r2, [pc, #28]	; (8003eec <SCB_EnableICache+0x48>)
 8003ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ed4:	f3bf 8f4f 	dsb	sy
}
 8003ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003eda:	f3bf 8f6f 	isb	sy
}
 8003ede:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <SCB_EnableDCache+0x84>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003efe:	f3bf 8f4f 	dsb	sy
}
 8003f02:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <SCB_EnableDCache+0x84>)
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0b5b      	lsrs	r3, r3, #13
 8003f10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f14:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003f28:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f2e:	4911      	ldr	r1, [pc, #68]	; (8003f74 <SCB_EnableDCache+0x84>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	60ba      	str	r2, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ef      	bne.n	8003f20 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e5a      	subs	r2, r3, #1
 8003f44:	60fa      	str	r2, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f4a:	f3bf 8f4f 	dsb	sy
}
 8003f4e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <SCB_EnableDCache+0x84>)
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <SCB_EnableDCache+0x84>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f5c:	f3bf 8f4f 	dsb	sy
}
 8003f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f62:	f3bf 8f6f 	isb	sy
}
 8003f66:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <isTouchWithinRectangle>:
bool endGameFlag=true;
char str[90];
Player *playerWinner[4];
int playerWinnerCount=0;
int clock =0;
uint8_t isTouchWithinRectangle(Rectangle rectangle, Point point) {
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f86:	607a      	str	r2, [r7, #4]
	return (point.x >= rectangle.x0 && point.x <= rectangle.x1
 8003f88:	88ba      	ldrh	r2, [r7, #4]
 8003f8a:	893b      	ldrh	r3, [r7, #8]
			&& point.y <= rectangle.y1 && point.y >= rectangle.y0);
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d30d      	bcc.n	8003fac <isTouchWithinRectangle+0x34>
	return (point.x >= rectangle.x0 && point.x <= rectangle.x1
 8003f90:	88ba      	ldrh	r2, [r7, #4]
 8003f92:	89bb      	ldrh	r3, [r7, #12]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d809      	bhi.n	8003fac <isTouchWithinRectangle+0x34>
			&& point.y <= rectangle.y1 && point.y >= rectangle.y0);
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d805      	bhi.n	8003fac <isTouchWithinRectangle+0x34>
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d301      	bcc.n	8003fac <isTouchWithinRectangle+0x34>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <isTouchWithinRectangle+0x36>
 8003fac:	2300      	movs	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <checkMap>:
Image character112List[5];
Image character56List[5];
void startGame();
void checkMap(Point cursor, int mapState[], Rectangle mapRectangle[]) {
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e0eb      	b.n	80041a6 <checkMap+0x1ea>
		if (isTouchWithinRectangle(mapRectangle[i], cursor)) {
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4611      	mov	r1, r2
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7ff ffc8 	bl	8003f78 <isTouchWithinRectangle>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01a      	beq.n	8004024 <checkMap+0x68>
			mapState[i] = 1;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 3; j++) {
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e00e      	b.n	800401e <checkMap+0x62>
				if (j == i)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d006      	beq.n	8004016 <checkMap+0x5a>
					continue;
				mapState[j] = 0;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4413      	add	r3, r2
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e000      	b.n	8004018 <checkMap+0x5c>
					continue;
 8004016:	bf00      	nop
			for (int j = 0; j < 3; j++) {
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3301      	adds	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b02      	cmp	r3, #2
 8004022:	dded      	ble.n	8004000 <checkMap+0x44>
			}
		}
		if (mapState[i]) {
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4413      	add	r3, r2
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04e      	beq.n	80040d0 <checkMap+0x114>
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	8818      	ldrh	r0, [r3, #0]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8004044:	8859      	ldrh	r1, [r3, #2]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 800404e:	889c      	ldrh	r4, [r3, #4]
					(mapRectangle[i]).y1, 0x02e0);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8004058:	88db      	ldrh	r3, [r3, #6]
 800405a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800405e:	9200      	str	r2, [sp, #0]
 8004060:	4622      	mov	r2, r4
 8004062:	f003 f87f 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
			switch (i) {
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d024      	beq.n	80040b6 <checkMap+0xfa>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b02      	cmp	r3, #2
 8004070:	f300 8096 	bgt.w	80041a0 <checkMap+0x1e4>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <checkMap+0xc6>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d00d      	beq.n	800409c <checkMap+0xe0>
 8004080:	e08e      	b.n	80041a0 <checkMap+0x1e4>
			case 0:
				ILI9341_Draw_Text("Map 1", 48, 180, WHITE, 1, 0x02e0);
 8004082:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	2301      	movs	r3, #1
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004090:	22b4      	movs	r2, #180	; 0xb4
 8004092:	2130      	movs	r1, #48	; 0x30
 8004094:	4848      	ldr	r0, [pc, #288]	; (80041b8 <checkMap+0x1fc>)
 8004096:	f003 f95d 	bl	8007354 <ILI9341_Draw_Text>
				break;
 800409a:	e081      	b.n	80041a0 <checkMap+0x1e4>
			case 1:
				ILI9341_Draw_Text("Map 2", 118, 180, WHITE, 1, 0x02e0);
 800409c:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2301      	movs	r3, #1
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040aa:	22b4      	movs	r2, #180	; 0xb4
 80040ac:	2176      	movs	r1, #118	; 0x76
 80040ae:	4843      	ldr	r0, [pc, #268]	; (80041bc <checkMap+0x200>)
 80040b0:	f003 f950 	bl	8007354 <ILI9341_Draw_Text>
				break;
 80040b4:	e074      	b.n	80041a0 <checkMap+0x1e4>
			case 2:
				ILI9341_Draw_Text("Map 3", 188, 180, WHITE, 1, 0x02e0);
 80040b6:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	2301      	movs	r3, #1
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c4:	22b4      	movs	r2, #180	; 0xb4
 80040c6:	21bc      	movs	r1, #188	; 0xbc
 80040c8:	483d      	ldr	r0, [pc, #244]	; (80041c0 <checkMap+0x204>)
 80040ca:	f003 f943 	bl	8007354 <ILI9341_Draw_Text>
				break;
 80040ce:	e067      	b.n	80041a0 <checkMap+0x1e4>
			}
		} else {
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	8818      	ldrh	r0, [r3, #0]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 80040e2:	8859      	ldrh	r1, [r3, #2]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 80040ec:	889c      	ldrh	r4, [r3, #4]
					(mapRectangle[i]).y1,
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 80040f6:	88db      	ldrh	r3, [r3, #6]
 80040f8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80040fc:	9200      	str	r2, [sp, #0]
 80040fe:	4622      	mov	r2, r4
 8004100:	f003 f830 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
					GREEN);
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	8818      	ldrh	r0, [r3, #0]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4413      	add	r3, r2
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 8004116:	8859      	ldrh	r1, [r3, #2]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 8004120:	889c      	ldrh	r4, [r3, #4]
					(mapRectangle[i]).y1, 0x02e0);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 800412a:	88db      	ldrh	r3, [r3, #6]
 800412c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004130:	9200      	str	r2, [sp, #0]
 8004132:	4622      	mov	r2, r4
 8004134:	f002 ff95 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
			switch (i) {
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d023      	beq.n	8004186 <checkMap+0x1ca>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	dc2d      	bgt.n	80041a0 <checkMap+0x1e4>
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <checkMap+0x196>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d00d      	beq.n	800416c <checkMap+0x1b0>
 8004150:	e026      	b.n	80041a0 <checkMap+0x1e4>
			case 0:
				ILI9341_Draw_Text("Map 1", 48, 180, 0x02e0, 1,
 8004152:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	2301      	movs	r3, #1
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8004160:	22b4      	movs	r2, #180	; 0xb4
 8004162:	2130      	movs	r1, #48	; 0x30
 8004164:	4814      	ldr	r0, [pc, #80]	; (80041b8 <checkMap+0x1fc>)
 8004166:	f003 f8f5 	bl	8007354 <ILI9341_Draw_Text>
				GREEN);
				break;
 800416a:	e019      	b.n	80041a0 <checkMap+0x1e4>
			case 1:
				ILI9341_Draw_Text("Map 2", 118, 180, 0x02e0, 1,
 800416c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2301      	movs	r3, #1
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800417a:	22b4      	movs	r2, #180	; 0xb4
 800417c:	2176      	movs	r1, #118	; 0x76
 800417e:	480f      	ldr	r0, [pc, #60]	; (80041bc <checkMap+0x200>)
 8004180:	f003 f8e8 	bl	8007354 <ILI9341_Draw_Text>
				GREEN);
				break;
 8004184:	e00c      	b.n	80041a0 <checkMap+0x1e4>
			case 2:
				ILI9341_Draw_Text("Map 3", 188, 180, 0x02e0, 1,
 8004186:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	2301      	movs	r3, #1
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8004194:	22b4      	movs	r2, #180	; 0xb4
 8004196:	21bc      	movs	r1, #188	; 0xbc
 8004198:	4809      	ldr	r0, [pc, #36]	; (80041c0 <checkMap+0x204>)
 800419a:	f003 f8db 	bl	8007354 <ILI9341_Draw_Text>
				GREEN);
				break;
 800419e:	bf00      	nop
	for (int i = 0; i < 3; i++) {
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f77f af10 	ble.w	8003fce <checkMap+0x12>
			}
		}
	}
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd90      	pop	{r4, r7, pc}
 80041b8:	0800f10c 	.word	0x0800f10c
 80041bc:	0800f114 	.word	0x0800f114
 80041c0:	0800f11c 	.word	0x0800f11c

080041c4 <checkStartGame>:

int checkStartGame(int numPlayerState[], int mapState[], int characterState[],
		int characterState_2[], int* displayScreen) {
 80041c4:	b480      	push	{r7}
 80041c6:	b08b      	sub	sp, #44	; 0x2c
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
	int checkPlay = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 2; i++) {
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	e00d      	b.n	80041f8 <checkStartGame+0x34>
		if (numPlayerState[i] == 1) {
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d103      	bne.n	80041f2 <checkStartGame+0x2e>
			checkPlay++;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	3301      	adds	r3, #1
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80041f0:	e005      	b.n	80041fe <checkStartGame+0x3a>
	for (int i = 0; i < 2; i++) {
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	3301      	adds	r3, #1
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	ddee      	ble.n	80041dc <checkStartGame+0x18>
		}
	}
	for (int i = 0; i < 3; i++) {
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e00d      	b.n	8004220 <checkStartGame+0x5c>
		if (mapState[i] == 1) {
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4413      	add	r3, r2
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d103      	bne.n	800421a <checkStartGame+0x56>
			checkPlay++;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	3301      	adds	r3, #1
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8004218:	e005      	b.n	8004226 <checkStartGame+0x62>
	for (int i = 0; i < 3; i++) {
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b02      	cmp	r3, #2
 8004224:	ddee      	ble.n	8004204 <checkStartGame+0x40>
		}
	}

	for (int i = 0; i < 5; i++) {
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e00d      	b.n	8004248 <checkStartGame+0x84>
		if (characterState[i] == 1) {
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d103      	bne.n	8004242 <checkStartGame+0x7e>
			checkPlay++;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	3301      	adds	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8004240:	e005      	b.n	800424e <checkStartGame+0x8a>
	for (int i = 0; i < 5; i++) {
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3301      	adds	r3, #1
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b04      	cmp	r3, #4
 800424c:	ddee      	ble.n	800422c <checkStartGame+0x68>
		}
	}
	if (numPlayerState[1]) {
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <checkStartGame+0xbc>
		for (int i = 0; i < 5; i++) {
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e00d      	b.n	800427a <checkStartGame+0xb6>
			if (characterState_2[i] == 1) {
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4413      	add	r3, r2
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d103      	bne.n	8004274 <checkStartGame+0xb0>
				checkPlay++;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	3301      	adds	r3, #1
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004272:	e005      	b.n	8004280 <checkStartGame+0xbc>
		for (int i = 0; i < 5; i++) {
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3301      	adds	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b04      	cmp	r3, #4
 800427e:	ddee      	ble.n	800425e <checkStartGame+0x9a>
			}
		}
	}

	if (numPlayerState[0] && checkPlay == 3) {
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <checkStartGame+0xd4>
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	2b03      	cmp	r3, #3
 800428c:	d104      	bne.n	8004298 <checkStartGame+0xd4>
		*displayScreen = 2;
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2202      	movs	r2, #2
 8004292:	601a      	str	r2, [r3, #0]
		return 1;
 8004294:	2301      	movs	r3, #1
 8004296:	e00f      	b.n	80042b8 <checkStartGame+0xf4>
	} else if (numPlayerState[1] && checkPlay == 4) {
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3304      	adds	r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <checkStartGame+0xee>
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d104      	bne.n	80042b2 <checkStartGame+0xee>
		*displayScreen = 2;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2202      	movs	r2, #2
 80042ac:	601a      	str	r2, [r3, #0]
		return 1;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e002      	b.n	80042b8 <checkStartGame+0xf4>
	} else {
		checkPlay = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
		return 0;
 80042b6:	2300      	movs	r3, #0
	}
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	372c      	adds	r7, #44	; 0x2c
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <setting_winPage>:
int stateWin = 0;
int displayScreen = 0;
void setting_winPage() {
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80042ca:	af02      	add	r7, sp, #8
	int numPlayerState[2] = { 0, 0 };
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	int characterState[5] = { 0, 0, 0, 0, 0 };
 80042d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	611a      	str	r2, [r3, #16]
	int characterState_2[5] = { 0, 0, 0, 0, 0 };
 80042e8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
	int mapState[3] = { 0, 0, 0 };
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	 displayScreen = 0;
 800430a:	4bd6      	ldr	r3, [pc, #856]	; (8004664 <setting_winPage+0x3a0>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
	int mapID = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	stateWin =0;
 8004316:	4bd4      	ldr	r3, [pc, #848]	; (8004668 <setting_winPage+0x3a4>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	Rectangle numPlayerRectangle[2] = { };
 800431c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
	Rectangle charRectangle[5] = { };
 800432a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800432e:	2228      	movs	r2, #40	; 0x28
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f008 feba 	bl	800d0ac <memset>
	Rectangle charHighlightRectangle[5] = { };
 8004338:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800433c:	2228      	movs	r2, #40	; 0x28
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f008 feb3 	bl	800d0ac <memset>
	Rectangle mapRectangle[3] = { };
 8004346:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800434a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	6053      	str	r3, [r2, #4]
 8004356:	6093      	str	r3, [r2, #8]
 8004358:	60d3      	str	r3, [r2, #12]
 800435a:	6113      	str	r3, [r2, #16]
 800435c:	6153      	str	r3, [r2, #20]

	uint16_t xPos = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
	uint16_t yPos = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
//setting container
	Rectangle c1 = { 10, 50, 250, 90 }; //size: 40x240
 800436a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800436e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004372:	4abe      	ldr	r2, [pc, #760]	; (800466c <setting_winPage+0x3a8>)
 8004374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004378:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle c2 = { 10, 100, 250, 155 }; //size: 55x240
 800437c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004380:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004384:	4aba      	ldr	r2, [pc, #744]	; (8004670 <setting_winPage+0x3ac>)
 8004386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800438a:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle c3 = { 10, 160, 250, 205 }; //size: 40x240
 800438e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004392:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004396:	4ab7      	ldr	r2, [pc, #732]	; (8004674 <setting_winPage+0x3b0>)
 8004398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800439c:	e883 0003 	stmia.w	r3, {r0, r1}
//setting Button
	Rectangle bPlayer_1 = { 45, 65, 125, 85 }; //size: 80x20
 80043a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043a8:	4ab3      	ldr	r2, [pc, #716]	; (8004678 <setting_winPage+0x3b4>)
 80043aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043ae:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bPlayer_2 = { 135, 65, 215, 85 }; //size: 80x20
 80043b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043ba:	4ab0      	ldr	r2, [pc, #704]	; (800467c <setting_winPage+0x3b8>)
 80043bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043c0:	e883 0003 	stmia.w	r3, {r0, r1}
//setting character
	Rectangle ch1 = { 30, 115, 62, 147 }; //size: 32x32
 80043c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80043cc:	4aac      	ldr	r2, [pc, #688]	; (8004680 <setting_winPage+0x3bc>)
 80043ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043d2:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch2 = { 72, 115, 104, 147 }; //size: 32x32
 80043d6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043de:	4aa9      	ldr	r2, [pc, #676]	; (8004684 <setting_winPage+0x3c0>)
 80043e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043e4:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch3 = { 114, 115, 146, 147 }; //size: 32x32
 80043e8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043f0:	4aa5      	ldr	r2, [pc, #660]	; (8004688 <setting_winPage+0x3c4>)
 80043f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043f6:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch4 = { 156, 115, 188, 147 }; //size: 32x32
 80043fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043fe:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004402:	4aa2      	ldr	r2, [pc, #648]	; (800468c <setting_winPage+0x3c8>)
 8004404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004408:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch5 = { 198, 115, 230, 147 }; //size: 32x32
 800440c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004410:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004414:	4a9e      	ldr	r2, [pc, #632]	; (8004690 <setting_winPage+0x3cc>)
 8004416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800441a:	e883 0003 	stmia.w	r3, {r0, r1}
//setting hilight when choosen
	Rectangle hil_ch1 = { 28, 113, 64, 149 }; //size: 36x36
 800441e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004422:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004426:	4a9b      	ldr	r2, [pc, #620]	; (8004694 <setting_winPage+0x3d0>)
 8004428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800442c:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch2 = { 70, 113, 106, 149 }; //size: 36x36
 8004430:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004434:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004438:	4a97      	ldr	r2, [pc, #604]	; (8004698 <setting_winPage+0x3d4>)
 800443a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800443e:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch3 = { 112, 113, 148, 149 }; //size: 36x36
 8004442:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004446:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800444a:	4a94      	ldr	r2, [pc, #592]	; (800469c <setting_winPage+0x3d8>)
 800444c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004450:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch4 = { 154, 113, 190, 149 }; //size: 36x36
 8004454:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004458:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800445c:	4a90      	ldr	r2, [pc, #576]	; (80046a0 <setting_winPage+0x3dc>)
 800445e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004462:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch5 = { 196, 113, 232, 149 }; //size: 36x36
 8004466:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800446a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800446e:	4a8d      	ldr	r2, [pc, #564]	; (80046a4 <setting_winPage+0x3e0>)
 8004470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004474:	e883 0003 	stmia.w	r3, {r0, r1}
//setting Button
	Rectangle bMap_1 = { 30, 175, 90, 195 }; //size: 60x20
 8004478:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800447c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004480:	4a89      	ldr	r2, [pc, #548]	; (80046a8 <setting_winPage+0x3e4>)
 8004482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004486:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bMap_2 = { 100, 175, 160, 195 }; //size: 60x20
 800448a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800448e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004492:	4a86      	ldr	r2, [pc, #536]	; (80046ac <setting_winPage+0x3e8>)
 8004494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004498:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bMap_3 = { 170, 175, 230, 195 }; //size: 60x20
 800449c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80044a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80044a4:	4a82      	ldr	r2, [pc, #520]	; (80046b0 <setting_winPage+0x3ec>)
 80044a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044aa:	e883 0003 	stmia.w	r3, {r0, r1}

	Rectangle bPlay = { 90, 210, 170, 230 }; //size: 80x20
 80044ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80044b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80044b6:	4a7f      	ldr	r2, [pc, #508]	; (80046b4 <setting_winPage+0x3f0>)
 80044b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044bc:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bNext = { 230, 210, 250, 230 }; //size: 20x20
 80044c0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80044c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044c8:	4a7b      	ldr	r2, [pc, #492]	; (80046b8 <setting_winPage+0x3f4>)
 80044ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ce:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bBack = { 10, 210, 30, 230 }; //size: 20x20
 80044d2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80044d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80044da:	4a78      	ldr	r2, [pc, #480]	; (80046bc <setting_winPage+0x3f8>)
 80044dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044e0:	e883 0003 	stmia.w	r3, {r0, r1}

	const uint8_t SCREEN_ROTATION = SCREEN_HORIZONTAL_1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	ILI9341_Set_Rotation(SCREEN_ROTATION);
 80044ea:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80044ee:	4618      	mov	r0, r3
 80044f0:	f003 f830 	bl	8007554 <ILI9341_Set_Rotation>
	Image characterYellowList[5] = { playerIcon1Yellow_32, playerIcon2Yellow_32,
 80044f4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80044f8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80044fc:	4a70      	ldr	r2, [pc, #448]	; (80046c0 <setting_winPage+0x3fc>)
 80044fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004504:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004508:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800450c:	4a6d      	ldr	r2, [pc, #436]	; (80046c4 <setting_winPage+0x400>)
 800450e:	330c      	adds	r3, #12
 8004510:	ca07      	ldmia	r2, {r0, r1, r2}
 8004512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004516:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800451a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800451e:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <setting_winPage+0x404>)
 8004520:	3318      	adds	r3, #24
 8004522:	ca07      	ldmia	r2, {r0, r1, r2}
 8004524:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004528:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800452c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004530:	4a66      	ldr	r2, [pc, #408]	; (80046cc <setting_winPage+0x408>)
 8004532:	3324      	adds	r3, #36	; 0x24
 8004534:	ca07      	ldmia	r2, {r0, r1, r2}
 8004536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800453a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800453e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004542:	4a63      	ldr	r2, [pc, #396]	; (80046d0 <setting_winPage+0x40c>)
 8004544:	3330      	adds	r3, #48	; 0x30
 8004546:	ca07      	ldmia	r2, {r0, r1, r2}
 8004548:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			playerIcon3Yellow_32, playerIcon4Yellow_32, playerIcon5Yellow_32 };
	Image characterOrangeList[5] = { playerIcon1Orange_32, playerIcon2Orange_32,
 800454c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004550:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004554:	4a5f      	ldr	r2, [pc, #380]	; (80046d4 <setting_winPage+0x410>)
 8004556:	ca07      	ldmia	r2, {r0, r1, r2}
 8004558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800455c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004560:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <setting_winPage+0x414>)
 8004566:	330c      	adds	r3, #12
 8004568:	ca07      	ldmia	r2, {r0, r1, r2}
 800456a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800456e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004572:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004576:	4a59      	ldr	r2, [pc, #356]	; (80046dc <setting_winPage+0x418>)
 8004578:	3318      	adds	r3, #24
 800457a:	ca07      	ldmia	r2, {r0, r1, r2}
 800457c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004580:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004584:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004588:	4a55      	ldr	r2, [pc, #340]	; (80046e0 <setting_winPage+0x41c>)
 800458a:	3324      	adds	r3, #36	; 0x24
 800458c:	ca07      	ldmia	r2, {r0, r1, r2}
 800458e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004592:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004596:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800459a:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <setting_winPage+0x420>)
 800459c:	3330      	adds	r3, #48	; 0x30
 800459e:	ca07      	ldmia	r2, {r0, r1, r2}
 80045a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (displayScreen == 0) {
 80045a4:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <setting_winPage+0x3a0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 84be 	bne.w	8004f2a <setting_winPage+0xc66>
			drawPos.x = 0;
 80045ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80045b2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80045b6:	2200      	movs	r2, #0
 80045b8:	801a      	strh	r2, [r3, #0]
			drawPos.y = 0;
 80045ba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80045be:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80045c2:	2200      	movs	r2, #0
 80045c4:	805a      	strh	r2, [r3, #2]
			settingPage_1.drawPoint = drawPos;
 80045c6:	4a48      	ldr	r2, [pc, #288]	; (80046e8 <setting_winPage+0x424>)
 80045c8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80045cc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(settingPage_1, SCREEN_ROTATION);
 80045d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80045d8:	4a43      	ldr	r2, [pc, #268]	; (80046e8 <setting_winPage+0x424>)
 80045da:	ca07      	ldmia	r2, {r0, r1, r2}
 80045dc:	f7ff fb7c 	bl	8003cd8 <drawImageAtPoint>
			ILI9341_Draw_Text("Bomber Man", 10, 10, BLACK, 4, WHITE);
 80045e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	2304      	movs	r3, #4
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2300      	movs	r3, #0
 80045ec:	220a      	movs	r2, #10
 80045ee:	210a      	movs	r1, #10
 80045f0:	483e      	ldr	r0, [pc, #248]	; (80046ec <setting_winPage+0x428>)
 80045f2:	f002 feaf 	bl	8007354 <ILI9341_Draw_Text>
			drawPos.x = 157;
 80045f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80045fa:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80045fe:	229d      	movs	r2, #157	; 0x9d
 8004600:	801a      	strh	r2, [r3, #0]
			drawPos.y = 20;
 8004602:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004606:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800460a:	2214      	movs	r2, #20
 800460c:	805a      	strh	r2, [r3, #2]
			bombIcon_16.drawPoint = drawPos;
 800460e:	4a38      	ldr	r2, [pc, #224]	; (80046f0 <setting_winPage+0x42c>)
 8004610:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004614:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(bombIcon_16, SCREEN_ROTATION);
 800461c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004620:	4a33      	ldr	r2, [pc, #204]	; (80046f0 <setting_winPage+0x42c>)
 8004622:	ca07      	ldmia	r2, {r0, r1, r2}
 8004624:	f7ff fb58 	bl	8003cd8 <drawImageAtPoint>
			//draw container
			ILI9341_Draw_Filled_Rectangle_Coord(c1.x0, c1.y0, c1.x1, c1.y1,
 8004628:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800462c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004630:	8818      	ldrh	r0, [r3, #0]
 8004632:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004636:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800463a:	8859      	ldrh	r1, [r3, #2]
 800463c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004644:	889a      	ldrh	r2, [r3, #4]
 8004646:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800464a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800464e:	88db      	ldrh	r3, [r3, #6]
 8004650:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8004654:	9400      	str	r4, [sp, #0]
 8004656:	f002 fd85 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
			CYAN);
			ILI9341_Draw_Filled_Rectangle_Coord(c2.x0, c2.y0, c2.x1, c2.y1,
 800465a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800465e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004662:	e047      	b.n	80046f4 <setting_winPage+0x430>
 8004664:	200018f0 	.word	0x200018f0
 8004668:	200018ec 	.word	0x200018ec
 800466c:	0800f1d8 	.word	0x0800f1d8
 8004670:	0800f1e0 	.word	0x0800f1e0
 8004674:	0800f1e8 	.word	0x0800f1e8
 8004678:	0800f1f0 	.word	0x0800f1f0
 800467c:	0800f1f8 	.word	0x0800f1f8
 8004680:	0800f200 	.word	0x0800f200
 8004684:	0800f208 	.word	0x0800f208
 8004688:	0800f210 	.word	0x0800f210
 800468c:	0800f218 	.word	0x0800f218
 8004690:	0800f220 	.word	0x0800f220
 8004694:	0800f228 	.word	0x0800f228
 8004698:	0800f230 	.word	0x0800f230
 800469c:	0800f238 	.word	0x0800f238
 80046a0:	0800f240 	.word	0x0800f240
 80046a4:	0800f248 	.word	0x0800f248
 80046a8:	0800f250 	.word	0x0800f250
 80046ac:	0800f258 	.word	0x0800f258
 80046b0:	0800f260 	.word	0x0800f260
 80046b4:	0800f268 	.word	0x0800f268
 80046b8:	0800f270 	.word	0x0800f270
 80046bc:	0800f278 	.word	0x0800f278
 80046c0:	20000000 	.word	0x20000000
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	20000018 	.word	0x20000018
 80046cc:	20000024 	.word	0x20000024
 80046d0:	20000030 	.word	0x20000030
 80046d4:	2000003c 	.word	0x2000003c
 80046d8:	20000048 	.word	0x20000048
 80046dc:	20000054 	.word	0x20000054
 80046e0:	20000060 	.word	0x20000060
 80046e4:	2000006c 	.word	0x2000006c
 80046e8:	200000fc 	.word	0x200000fc
 80046ec:	0800f124 	.word	0x0800f124
 80046f0:	20000078 	.word	0x20000078
 80046f4:	8818      	ldrh	r0, [r3, #0]
 80046f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80046fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046fe:	8859      	ldrh	r1, [r3, #2]
 8004700:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004704:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004708:	889a      	ldrh	r2, [r3, #4]
 800470a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800470e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004712:	88db      	ldrh	r3, [r3, #6]
 8004714:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8004718:	9400      	str	r4, [sp, #0]
 800471a:	f002 fd23 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
			YELLOW);
			ILI9341_Draw_Filled_Rectangle_Coord(c3.x0, c3.y0, c3.x1, c3.y1,
 800471e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004722:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004726:	8818      	ldrh	r0, [r3, #0]
 8004728:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800472c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004730:	8859      	ldrh	r1, [r3, #2]
 8004732:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004736:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800473a:	889a      	ldrh	r2, [r3, #4]
 800473c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004740:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004744:	88db      	ldrh	r3, [r3, #6]
 8004746:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 800474a:	9400      	str	r4, [sp, #0]
 800474c:	f002 fd0a 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
			GREEN);
			//draw header text
			ILI9341_Draw_Text("Choose Number Of Players", 60, 53, BLACK, 1,
 8004750:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	2301      	movs	r3, #1
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	2300      	movs	r3, #0
 800475c:	2235      	movs	r2, #53	; 0x35
 800475e:	213c      	movs	r1, #60	; 0x3c
 8004760:	48c3      	ldr	r0, [pc, #780]	; (8004a70 <setting_winPage+0x7ac>)
 8004762:	f002 fdf7 	bl	8007354 <ILI9341_Draw_Text>
			CYAN);
			ILI9341_Draw_Text("Choose Character", 80, 103, BLACK, 1, YELLOW);
 8004766:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	2301      	movs	r3, #1
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	2267      	movs	r2, #103	; 0x67
 8004774:	2150      	movs	r1, #80	; 0x50
 8004776:	48bf      	ldr	r0, [pc, #764]	; (8004a74 <setting_winPage+0x7b0>)
 8004778:	f002 fdec 	bl	8007354 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("Choose Map", 100, 163, BLACK, 1, GREEN);
 800477c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	2301      	movs	r3, #1
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	2300      	movs	r3, #0
 8004788:	22a3      	movs	r2, #163	; 0xa3
 800478a:	2164      	movs	r1, #100	; 0x64
 800478c:	48ba      	ldr	r0, [pc, #744]	; (8004a78 <setting_winPage+0x7b4>)
 800478e:	f002 fde1 	bl	8007354 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("1 Player", 62, 70, 0x843f, 1, CYAN);
 8004792:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	2301      	movs	r3, #1
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	f248 433f 	movw	r3, #33855	; 0x843f
 80047a0:	2246      	movs	r2, #70	; 0x46
 80047a2:	213e      	movs	r1, #62	; 0x3e
 80047a4:	48b5      	ldr	r0, [pc, #724]	; (8004a7c <setting_winPage+0x7b8>)
 80047a6:	f002 fdd5 	bl	8007354 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("2 Player", 152, 70, 0x843f, 1, CYAN);
 80047aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2301      	movs	r3, #1
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	f248 433f 	movw	r3, #33855	; 0x843f
 80047b8:	2246      	movs	r2, #70	; 0x46
 80047ba:	2198      	movs	r1, #152	; 0x98
 80047bc:	48b0      	ldr	r0, [pc, #704]	; (8004a80 <setting_winPage+0x7bc>)
 80047be:	f002 fdc9 	bl	8007354 <ILI9341_Draw_Text>
			numPlayerRectangle[0] = bPlayer_1;
 80047c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047c6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80047ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d2:	e883 0003 	stmia.w	r3, {r0, r1}
			numPlayerRectangle[1] = bPlayer_2;
 80047d6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047da:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80047de:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80047e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e6:	e883 0003 	stmia.w	r3, {r0, r1}

			charRectangle[0] = ch1;
 80047ea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047ee:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80047f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80047f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047fa:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[1] = ch2;
 80047fe:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004802:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8004806:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800480a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800480e:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[2] = ch3;
 8004812:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004816:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800481a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800481e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004822:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[3] = ch4;
 8004826:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800482a:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800482e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004836:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[4] = ch5;
 800483a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800483e:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8004842:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800484a:	e883 0003 	stmia.w	r3, {r0, r1}
			//picture
			for (int i = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8004854:	e041      	b.n	80048da <setting_winPage+0x616>
					i
							< sizeof(characterYellowList)
									/ sizeof(characterYellowList[0]); i++) {
				drawPos.x = charRectangle[i].x0;
 8004856:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004860:	443b      	add	r3, r7
 8004862:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
 8004866:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800486a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800486e:	801a      	strh	r2, [r3, #0]
				drawPos.y = charRectangle[i].y0;
 8004870:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800487a:	443b      	add	r3, r7
 800487c:	f833 2cce 	ldrh.w	r2, [r3, #-206]
 8004880:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004884:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004888:	805a      	strh	r2, [r3, #2]
				characterYellowList[i].drawPoint = drawPos;
 800488a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800488e:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8004892:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004896:	4613      	mov	r3, r2
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3304      	adds	r3, #4
 80048a2:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80048a6:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	601a      	str	r2, [r3, #0]
				drawImageAtPoint(characterYellowList[i], SCREEN_ROTATION);
 80048ae:	f897 01ff 	ldrb.w	r0, [r7, #511]	; 0x1ff
 80048b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80048b6:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 80048ba:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80048be:	4613      	mov	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	18ca      	adds	r2, r1, r3
 80048c8:	4603      	mov	r3, r0
 80048ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80048cc:	f7ff fa04 	bl	8003cd8 <drawImageAtPoint>
									/ sizeof(characterYellowList[0]); i++) {
 80048d0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80048d4:	3301      	adds	r3, #1
 80048d6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
							< sizeof(characterYellowList)
 80048da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d9b9      	bls.n	8004856 <setting_winPage+0x592>
			}

			ILI9341_Draw_Filled_Rectangle_Coord(bPlay.x0, bPlay.y0, bPlay.x1,
 80048e2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80048e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80048ea:	8818      	ldrh	r0, [r3, #0]
 80048ec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80048f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80048f4:	8859      	ldrh	r1, [r3, #2]
 80048f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80048fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80048fe:	889a      	ldrh	r2, [r3, #4]
 8004900:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004904:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004908:	88db      	ldrh	r3, [r3, #6]
 800490a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800490e:	9400      	str	r4, [sp, #0]
 8004910:	f002 fc28 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
					bPlay.y1, PINK);
			ILI9341_Draw_Text("PLAY", 108, 211, WHITE, 2, PINK);
 8004914:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	2302      	movs	r3, #2
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004922:	22d3      	movs	r2, #211	; 0xd3
 8004924:	216c      	movs	r1, #108	; 0x6c
 8004926:	4857      	ldr	r0, [pc, #348]	; (8004a84 <setting_winPage+0x7c0>)
 8004928:	f002 fd14 	bl	8007354 <ILI9341_Draw_Text>
			charHighlightRectangle[0] = hil_ch1;
 800492c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004930:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8004934:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800493c:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[1] = hil_ch2;
 8004940:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004944:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8004948:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800494c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004950:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[2] = hil_ch3;
 8004954:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004958:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 800495c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004964:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[3] = hil_ch4;
 8004968:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800496c:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8004970:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004978:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[4] = hil_ch5;
 800497c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004980:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8004984:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800498c:	e883 0003 	stmia.w	r3, {r0, r1}

			mapRectangle[0] = bMap_1;
 8004990:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004994:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8004998:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800499c:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80049a0:	460b      	mov	r3, r1
 80049a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049a6:	e883 0003 	stmia.w	r3, {r0, r1}
			mapRectangle[1] = bMap_2;
 80049aa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80049ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049b2:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80049b6:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80049ba:	3308      	adds	r3, #8
 80049bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049c0:	e883 0003 	stmia.w	r3, {r0, r1}
			mapRectangle[2] = bMap_3;
 80049c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80049c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049cc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80049d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80049d4:	3310      	adds	r3, #16
 80049d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049da:	e883 0003 	stmia.w	r3, {r0, r1}
			int player2_character;
			//play & next button
			//		Rectangle bPlay = { 90, 210, 170, 230 }; //size: 80x20
			while (1) {
				if (TP_Touchpad_Pressed()) {
 80049de:	f003 facd 	bl	8007f7c <TP_Touchpad_Pressed>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d03e      	beq.n	8004a66 <setting_winPage+0x7a2>
					uint16_t position_array[2];

					if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 80049e8:	f107 031c 	add.w	r3, r7, #28
 80049ec:	4618      	mov	r0, r3
 80049ee:	f003 fa03 	bl	8007df8 <TP_Read_Coordinates>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d128      	bne.n	8004a4a <setting_winPage+0x786>
						if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1) {
 80049f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d110      	bne.n	8004a22 <setting_winPage+0x75e>
							xPos = position_array[1];
 8004a00:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a04:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8004a08:	885b      	ldrh	r3, [r3, #2]
 8004a0a:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
							yPos = SCREEN_HEIGHT - position_array[0];
 8004a0e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a12:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8004a1c:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
 8004a20:	e013      	b.n	8004a4a <setting_winPage+0x786>
						} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2) {
 8004a22:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d10f      	bne.n	8004a4a <setting_winPage+0x786>
							xPos = SCREEN_WIDTH - position_array[1];
 8004a2a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a2e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8004a32:	885b      	ldrh	r3, [r3, #2]
 8004a34:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004a38:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
							yPos = position_array[0];
 8004a3c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a40:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
						}
					}
					cursor.x = xPos;
 8004a4a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a4e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8004a52:	f8b7 2256 	ldrh.w	r2, [r7, #598]	; 0x256
 8004a56:	801a      	strh	r2, [r3, #0]
					cursor.y = yPos;
 8004a58:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a5c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8004a60:	f8b7 2254 	ldrh.w	r2, [r7, #596]	; 0x254
 8004a64:	805a      	strh	r2, [r3, #2]
				}
				for (int i = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004a6c:	e102      	b.n	8004c74 <setting_winPage+0x9b0>
 8004a6e:	bf00      	nop
 8004a70:	0800f130 	.word	0x0800f130
 8004a74:	0800f14c 	.word	0x0800f14c
 8004a78:	0800f160 	.word	0x0800f160
 8004a7c:	0800f16c 	.word	0x0800f16c
 8004a80:	0800f178 	.word	0x0800f178
 8004a84:	0800f184 	.word	0x0800f184
						i < sizeof(numPlayerState) / sizeof(numPlayerState[0]);
						i++) {
					if (isTouchWithinRectangle(numPlayerRectangle[i], cursor)) {
 8004a88:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a8c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8004a90:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004a9a:	443b      	add	r3, r7
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	3ba8      	subs	r3, #168	; 0xa8
 8004aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004aa4:	f7ff fa68 	bl	8003f78 <isTouchWithinRectangle>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <setting_winPage+0x818>
						numPlayerState[i] = 1;
 8004aae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004ab8:	443b      	add	r3, r7
 8004aba:	2201      	movs	r2, #1
 8004abc:	f843 2c64 	str.w	r2, [r3, #-100]
						numPlayerState[(i == 0) ? 1 : 0] = 0;
 8004ac0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004ad4:	443b      	add	r3, r7
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f843 2c64 	str.w	r2, [r3, #-100]
					}
					if (numPlayerState[i]) {
 8004adc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004ae6:	443b      	add	r3, r7
 8004ae8:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d058      	beq.n	8004ba2 <setting_winPage+0x8de>
						ILI9341_Draw_Filled_Rectangle_Coord(
 8004af0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004afa:	443b      	add	r3, r7
 8004afc:	f833 0ca8 	ldrh.w	r0, [r3, #-168]
 8004b00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004b0a:	443b      	add	r3, r7
 8004b0c:	f833 1ca6 	ldrh.w	r1, [r3, #-166]
 8004b10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004b1a:	443b      	add	r3, r7
 8004b1c:	f833 2ca4 	ldrh.w	r2, [r3, #-164]
 8004b20:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004b2a:	443b      	add	r3, r7
 8004b2c:	f833 3ca2 	ldrh.w	r3, [r3, #-162]
 8004b30:	241f      	movs	r4, #31
 8004b32:	9400      	str	r4, [sp, #0]
 8004b34:	f002 fb16 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
								(numPlayerRectangle[i]).x0,
								(numPlayerRectangle[i]).y0,
								(numPlayerRectangle[i]).x1,
								(numPlayerRectangle[i]).y1, BLUE);
						if (i == 0) {
 8004b38:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d124      	bne.n	8004b8a <setting_winPage+0x8c6>
							ILI9341_Draw_Text("1 Player", 62, 70, WHITE, 1,
 8004b40:	231f      	movs	r3, #31
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	2301      	movs	r3, #1
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b4c:	2246      	movs	r2, #70	; 0x46
 8004b4e:	213e      	movs	r1, #62	; 0x3e
 8004b50:	48b8      	ldr	r0, [pc, #736]	; (8004e34 <setting_winPage+0xb70>)
 8004b52:	f002 fbff 	bl	8007354 <ILI9341_Draw_Text>
							BLUE);
							ILI9341_Draw_Filled_Rectangle_Coord(
 8004b56:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004b5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b5e:	8818      	ldrh	r0, [r3, #0]
 8004b60:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004b64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b68:	8859      	ldrh	r1, [r3, #2]
 8004b6a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004b6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b72:	889a      	ldrh	r2, [r3, #4]
 8004b74:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004b78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b7c:	88db      	ldrh	r3, [r3, #6]
 8004b7e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004b82:	9400      	str	r4, [sp, #0]
 8004b84:	f002 faee 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
 8004b88:	e06f      	b.n	8004c6a <setting_winPage+0x9a6>
							                                    bNext.x1,
							                                    bNext.y1, WHITE);
						}

						else {
							ILI9341_Draw_Text("2 Player", 152, 70, WHITE, 1,
 8004b8a:	231f      	movs	r3, #31
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	2301      	movs	r3, #1
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b96:	2246      	movs	r2, #70	; 0x46
 8004b98:	2198      	movs	r1, #152	; 0x98
 8004b9a:	48a7      	ldr	r0, [pc, #668]	; (8004e38 <setting_winPage+0xb74>)
 8004b9c:	f002 fbda 	bl	8007354 <ILI9341_Draw_Text>
 8004ba0:	e063      	b.n	8004c6a <setting_winPage+0x9a6>
							BLUE);
						}

					} else {
						ILI9341_Draw_Filled_Rectangle_Coord(
 8004ba2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004bac:	443b      	add	r3, r7
 8004bae:	f833 0ca8 	ldrh.w	r0, [r3, #-168]
 8004bb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004bbc:	443b      	add	r3, r7
 8004bbe:	f833 1ca6 	ldrh.w	r1, [r3, #-166]
 8004bc2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004bcc:	443b      	add	r3, r7
 8004bce:	f833 2ca4 	ldrh.w	r2, [r3, #-164]
 8004bd2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004bdc:	443b      	add	r3, r7
 8004bde:	f833 3ca2 	ldrh.w	r3, [r3, #-162]
 8004be2:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8004be6:	9400      	str	r4, [sp, #0]
 8004be8:	f002 fabc 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
								(numPlayerRectangle[i]).x0,
								(numPlayerRectangle[i]).y0,
								(numPlayerRectangle[i]).x1,
								(numPlayerRectangle[i]).y1, CYAN);
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004bec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004bf6:	443b      	add	r3, r7
 8004bf8:	f833 0ca8 	ldrh.w	r0, [r3, #-168]
 8004bfc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004c06:	443b      	add	r3, r7
 8004c08:	f833 1ca6 	ldrh.w	r1, [r3, #-166]
 8004c0c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004c16:	443b      	add	r3, r7
 8004c18:	f833 2ca4 	ldrh.w	r2, [r3, #-164]
 8004c1c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004c26:	443b      	add	r3, r7
 8004c28:	f833 3ca2 	ldrh.w	r3, [r3, #-162]
 8004c2c:	241f      	movs	r4, #31
 8004c2e:	9400      	str	r4, [sp, #0]
 8004c30:	f002 fa17 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
								(numPlayerRectangle[i]).x0,
								(numPlayerRectangle[i]).y0,
								(numPlayerRectangle[i]).x1,
								(numPlayerRectangle[i]).y1, BLUE);
						if (i == 0)
 8004c34:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <setting_winPage+0x990>
							ILI9341_Draw_Text("1 Player", 62, 70, BLUE, 1,
 8004c3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2301      	movs	r3, #1
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	231f      	movs	r3, #31
 8004c48:	2246      	movs	r2, #70	; 0x46
 8004c4a:	213e      	movs	r1, #62	; 0x3e
 8004c4c:	4879      	ldr	r0, [pc, #484]	; (8004e34 <setting_winPage+0xb70>)
 8004c4e:	f002 fb81 	bl	8007354 <ILI9341_Draw_Text>
 8004c52:	e00a      	b.n	8004c6a <setting_winPage+0x9a6>
							CYAN);
						else
							ILI9341_Draw_Text("2 Player", 150, 70, BLUE, 1,
 8004c54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	231f      	movs	r3, #31
 8004c60:	2246      	movs	r2, #70	; 0x46
 8004c62:	2196      	movs	r1, #150	; 0x96
 8004c64:	4874      	ldr	r0, [pc, #464]	; (8004e38 <setting_winPage+0xb74>)
 8004c66:	f002 fb75 	bl	8007354 <ILI9341_Draw_Text>
						i++) {
 8004c6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
						i < sizeof(numPlayerState) / sizeof(numPlayerState[0]);
 8004c74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f67f af05 	bls.w	8004a88 <setting_winPage+0x7c4>
							CYAN);
					}
				}
				for (int i = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8004c84:	e037      	b.n	8004cf6 <setting_winPage+0xa32>
						i
								< sizeof(characterState_2)
										/ sizeof(characterState_2[0]); i++) {
					if (characterState_2[i]) {
 8004c86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004c90:	443b      	add	r3, r7
 8004c92:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d028      	beq.n	8004cec <setting_winPage+0xa28>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004c9a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004ca4:	443b      	add	r3, r7
 8004ca6:	f833 0cf8 	ldrh.w	r0, [r3, #-248]
 8004caa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004cb4:	443b      	add	r3, r7
 8004cb6:	f833 1cf6 	ldrh.w	r1, [r3, #-246]
 8004cba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004cc4:	443b      	add	r3, r7
 8004cc6:	f833 2cf4 	ldrh.w	r2, [r3, #-244]
 8004cca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004cd4:	443b      	add	r3, r7
 8004cd6:	f833 3cf2 	ldrh.w	r3, [r3, #-242]
 8004cda:	241f      	movs	r4, #31
 8004cdc:	9400      	str	r4, [sp, #0]
 8004cde:	f002 f9c0 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, BLUE);
						player2_character = i;
 8004ce2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ce6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
						break;
 8004cea:	e008      	b.n	8004cfe <setting_winPage+0xa3a>
										/ sizeof(characterState_2[0]); i++) {
 8004cec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
								< sizeof(characterState_2)
 8004cf6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d9c3      	bls.n	8004c86 <setting_winPage+0x9c2>
					}
				}
				for (int i = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8004d04:	e0a0      	b.n	8004e48 <setting_winPage+0xb84>
						i < sizeof(characterState) / sizeof(characterState[0]);
						i++) {
					if (player2_character == i)
 8004d06:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8004d0a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	f000 8094 	beq.w	8004e3c <setting_winPage+0xb78>
						continue;
					if (isTouchWithinRectangle(charHighlightRectangle[i],
 8004d14:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004d18:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8004d1c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d26:	443b      	add	r3, r7
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	3bf8      	subs	r3, #248	; 0xf8
 8004d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d30:	f7ff f922 	bl	8003f78 <isTouchWithinRectangle>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d026      	beq.n	8004d88 <setting_winPage+0xac4>
							cursor)) {
						characterState[i] = 1;
 8004d3a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d44:	443b      	add	r3, r7
 8004d46:	2201      	movs	r2, #1
 8004d48:	f843 2c78 	str.w	r2, [r3, #-120]
						for (int j = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8004d52:	e015      	b.n	8004d80 <setting_winPage+0xabc>
								j
										< sizeof(characterState)
												/ sizeof(characterState[0]);
								j++) {
							if (j == i)
 8004d54:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8004d58:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d009      	beq.n	8004d74 <setting_winPage+0xab0>
								continue;
							characterState[j] = 0;
 8004d60:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d6a:	443b      	add	r3, r7
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f843 2c78 	str.w	r2, [r3, #-120]
 8004d72:	e000      	b.n	8004d76 <setting_winPage+0xab2>
								continue;
 8004d74:	bf00      	nop
								j++) {
 8004d76:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
										< sizeof(characterState)
 8004d80:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d9e5      	bls.n	8004d54 <setting_winPage+0xa90>
						}
					}
					if (characterState[i])
 8004d88:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d92:	443b      	add	r3, r7
 8004d94:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d025      	beq.n	8004de8 <setting_winPage+0xb24>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004d9c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004da6:	443b      	add	r3, r7
 8004da8:	f833 0cf8 	ldrh.w	r0, [r3, #-248]
 8004dac:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004db6:	443b      	add	r3, r7
 8004db8:	f833 1cf6 	ldrh.w	r1, [r3, #-246]
 8004dbc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004dc6:	443b      	add	r3, r7
 8004dc8:	f833 2cf4 	ldrh.w	r2, [r3, #-244]
 8004dcc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004dd6:	443b      	add	r3, r7
 8004dd8:	f833 3cf2 	ldrh.w	r3, [r3, #-242]
 8004ddc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8004de0:	9400      	str	r4, [sp, #0]
 8004de2:	f002 f93e 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
 8004de6:	e02a      	b.n	8004e3e <setting_winPage+0xb7a>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, RED);
					else
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004de8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004df2:	443b      	add	r3, r7
 8004df4:	f833 0cf8 	ldrh.w	r0, [r3, #-248]
 8004df8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004e02:	443b      	add	r3, r7
 8004e04:	f833 1cf6 	ldrh.w	r1, [r3, #-246]
 8004e08:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004e12:	443b      	add	r3, r7
 8004e14:	f833 2cf4 	ldrh.w	r2, [r3, #-244]
 8004e18:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004e22:	443b      	add	r3, r7
 8004e24:	f833 3cf2 	ldrh.w	r3, [r3, #-242]
 8004e28:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8004e2c:	9400      	str	r4, [sp, #0]
 8004e2e:	f002 f918 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
 8004e32:	e004      	b.n	8004e3e <setting_winPage+0xb7a>
 8004e34:	0800f16c 	.word	0x0800f16c
 8004e38:	0800f178 	.word	0x0800f178
						continue;
 8004e3c:	bf00      	nop
						i++) {
 8004e3e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004e42:	3301      	adds	r3, #1
 8004e44:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
						i < sizeof(characterState) / sizeof(characterState[0]);
 8004e48:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	f67f af5a 	bls.w	8004d06 <setting_winPage+0xa42>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, YELLOW);
				}
				checkMap(cursor, mapState, mapRectangle);
 8004e52:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004e56:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8004e5a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004e5e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	f7ff f8aa 	bl	8003fbc <checkMap>
				//					if (isTouchWithinRectangle(bPlay, cursor)) {
				//						if (checkStartGame())
				//							break;
				//					}
				//				}
				if (numPlayerState[1]) {
 8004e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d038      	beq.n	8004ee2 <setting_winPage+0xc1e>
					ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0, bNext.y0,
 8004e70:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004e74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e78:	8818      	ldrh	r0, [r3, #0]
 8004e7a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004e7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e82:	8859      	ldrh	r1, [r3, #2]
 8004e84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004e88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e8c:	889a      	ldrh	r2, [r3, #4]
 8004e8e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004e92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	f647 040f 	movw	r4, #30735	; 0x780f
 8004e9c:	9400      	str	r4, [sp, #0]
 8004e9e:	f002 f961 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
							bNext.x1, bNext.y1, PURPLE);
					ILI9341_Draw_Text(">", 238, 211, WHITE, 2, PURPLE);
 8004ea2:	f647 030f 	movw	r3, #30735	; 0x780f
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eb0:	22d3      	movs	r2, #211	; 0xd3
 8004eb2:	21ee      	movs	r1, #238	; 0xee
 8004eb4:	48ca      	ldr	r0, [pc, #808]	; (80051e0 <setting_winPage+0xf1c>)
 8004eb6:	f002 fa4d 	bl	8007354 <ILI9341_Draw_Text>
					if (isTouchWithinRectangle(bNext, cursor)) {
 8004eba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004ebe:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8004ec2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004ec6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ed0:	f7ff f852 	bl	8003f78 <isTouchWithinRectangle>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <setting_winPage+0xc1e>
						displayScreen = 1;
 8004eda:	4bc2      	ldr	r3, [pc, #776]	; (80051e4 <setting_winPage+0xf20>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
						break;
 8004ee0:	e023      	b.n	8004f2a <setting_winPage+0xc66>
					}
				}
				if (checkStartGame(numPlayerState, mapState, characterState,
 8004ee2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8004ee6:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8004eea:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8004eee:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8004ef2:	4cbc      	ldr	r4, [pc, #752]	; (80051e4 <setting_winPage+0xf20>)
 8004ef4:	9400      	str	r4, [sp, #0]
 8004ef6:	f7ff f965 	bl	80041c4 <checkStartGame>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00f      	beq.n	8004f20 <setting_winPage+0xc5c>
						characterState_2,&displayScreen)) {
					if (isTouchWithinRectangle(bPlay, cursor)){
 8004f00:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f04:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8004f08:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f16:	f7ff f82f 	bl	8003f78 <isTouchWithinRectangle>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <setting_winPage+0xc64>
						break;
					}
				}

				HAL_Delay(100);
 8004f20:	2064      	movs	r0, #100	; 0x64
 8004f22:	f003 f8a1 	bl	8008068 <HAL_Delay>
				if (TP_Touchpad_Pressed()) {
 8004f26:	e55a      	b.n	80049de <setting_winPage+0x71a>
						break;
 8004f28:	bf00      	nop
			}
		}
		if (displayScreen == 1) {
 8004f2a:	4bae      	ldr	r3, [pc, #696]	; (80051e4 <setting_winPage+0xf20>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	f040 8297 	bne.w	8005462 <setting_winPage+0x119e>
			int player1_character;
			drawPos.x = 250;
 8004f34:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f38:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004f3c:	22fa      	movs	r2, #250	; 0xfa
 8004f3e:	801a      	strh	r2, [r3, #0]
			drawPos.y = 0;
 8004f40:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f44:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004f48:	2200      	movs	r2, #0
 8004f4a:	805a      	strh	r2, [r3, #2]
			settingPage_2.drawPoint = drawPos;
 8004f4c:	4aa6      	ldr	r2, [pc, #664]	; (80051e8 <setting_winPage+0xf24>)
 8004f4e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f52:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(settingPage_2, SCREEN_ROTATION);
 8004f5a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f5e:	4aa2      	ldr	r2, [pc, #648]	; (80051e8 <setting_winPage+0xf24>)
 8004f60:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f62:	f7fe feb9 	bl	8003cd8 <drawImageAtPoint>
			ILI9341_Draw_Filled_Rectangle_Coord(c2.x0, c2.y0, c2.x1, c2.y1,
 8004f66:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f6e:	8818      	ldrh	r0, [r3, #0]
 8004f70:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f78:	8859      	ldrh	r1, [r3, #2]
 8004f7a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f82:	889a      	ldrh	r2, [r3, #4]
 8004f84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004f88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f8c:	88db      	ldrh	r3, [r3, #6]
 8004f8e:	f64f 34e0 	movw	r4, #64480	; 0xfbe0
 8004f92:	9400      	str	r4, [sp, #0]
 8004f94:	f002 f8e6 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
					0xFBE0);
			ILI9341_Draw_Text("Choose Character Of Player 2", 50, 103, BLACK, 1,
 8004f98:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2267      	movs	r2, #103	; 0x67
 8004fa6:	2132      	movs	r1, #50	; 0x32
 8004fa8:	4890      	ldr	r0, [pc, #576]	; (80051ec <setting_winPage+0xf28>)
 8004faa:	f002 f9d3 	bl	8007354 <ILI9341_Draw_Text>
			//			RED);
			//			ILI9341_Draw_Filled_Rectangle_Coord(ch4.x0, ch4.y0, ch4.x1, ch4.y1,
			//			RED);
			//			ILI9341_Draw_Filled_Rectangle_Coord(ch5.x0, ch5.y0, ch5.x1, ch5.y1,
			//			RED);
			for (int i = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8004fb4:	e041      	b.n	800503a <setting_winPage+0xd76>
					i
							< sizeof(characterOrangeList)
									/ sizeof(characterOrangeList[0]); i++) {
				drawPos.x = charRectangle[i].x0;
 8004fb6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004fc0:	443b      	add	r3, r7
 8004fc2:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
 8004fc6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004fca:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004fce:	801a      	strh	r2, [r3, #0]
				drawPos.y = charRectangle[i].y0;
 8004fd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004fda:	443b      	add	r3, r7
 8004fdc:	f833 2cce 	ldrh.w	r2, [r3, #-206]
 8004fe0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004fe4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8004fe8:	805a      	strh	r2, [r3, #2]
				characterOrangeList[i].drawPoint = drawPos;
 8004fea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004fee:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 8004ff2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3304      	adds	r3, #4
 8005002:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8005006:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	601a      	str	r2, [r3, #0]
				drawImageAtPoint(characterOrangeList[i], SCREEN_ROTATION);
 800500e:	f897 01ff 	ldrb.w	r0, [r7, #511]	; 0x1ff
 8005012:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005016:	f5a3 710c 	sub.w	r1, r3, #560	; 0x230
 800501a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	18ca      	adds	r2, r1, r3
 8005028:	4603      	mov	r3, r0
 800502a:	ca07      	ldmia	r2, {r0, r1, r2}
 800502c:	f7fe fe54 	bl	8003cd8 <drawImageAtPoint>
									/ sizeof(characterOrangeList[0]); i++) {
 8005030:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005034:	3301      	adds	r3, #1
 8005036:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
							< sizeof(characterOrangeList)
 800503a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800503e:	2b04      	cmp	r3, #4
 8005040:	d9b9      	bls.n	8004fb6 <setting_winPage+0xcf2>
			}
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2, bNext.y0 - 2,
 8005042:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005046:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	3b02      	subs	r3, #2
 800504e:	b298      	uxth	r0, r3
 8005050:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005054:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005058:	885b      	ldrh	r3, [r3, #2]
 800505a:	3b02      	subs	r3, #2
 800505c:	b299      	uxth	r1, r3
					bNext.x1 + 2, bNext.y1 + 2, WHITE);
 800505e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005062:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005066:	889b      	ldrh	r3, [r3, #4]
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2, bNext.y0 - 2,
 8005068:	3302      	adds	r3, #2
 800506a:	b29a      	uxth	r2, r3
					bNext.x1 + 2, bNext.y1 + 2, WHITE);
 800506c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005070:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005074:	88db      	ldrh	r3, [r3, #6]
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2, bNext.y0 - 2,
 8005076:	3302      	adds	r3, #2
 8005078:	b29b      	uxth	r3, r3
 800507a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800507e:	9400      	str	r4, [sp, #0]
 8005080:	f002 f870 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
			//			ILI9341_Draw_Filled_Rectangle_Coord(bPlay.x0, bPlay.y0, bPlay.x1,
			//					bPlay.y1, PINK);
			//			ILI9341_Draw_Text("PLAY", 108, 211, WHITE, 2, PINK);
			ILI9341_Draw_Filled_Rectangle_Coord(bBack.x0, bBack.y0, bBack.x1,
 8005084:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005088:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800508c:	8818      	ldrh	r0, [r3, #0]
 800508e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005092:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005096:	8859      	ldrh	r1, [r3, #2]
 8005098:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800509c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80050a0:	889a      	ldrh	r2, [r3, #4]
 80050a2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80050a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80050aa:	88db      	ldrh	r3, [r3, #6]
 80050ac:	f647 040f 	movw	r4, #30735	; 0x780f
 80050b0:	9400      	str	r4, [sp, #0]
 80050b2:	f002 f857 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
					bBack.y1, PURPLE);
			ILI9341_Draw_Text("<", 15, 211, WHITE, 2, PURPLE);
 80050b6:	f647 030f 	movw	r3, #30735	; 0x780f
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	2302      	movs	r3, #2
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050c4:	22d3      	movs	r2, #211	; 0xd3
 80050c6:	210f      	movs	r1, #15
 80050c8:	4849      	ldr	r0, [pc, #292]	; (80051f0 <setting_winPage+0xf2c>)
 80050ca:	f002 f943 	bl	8007354 <ILI9341_Draw_Text>
			while (1) {
				for (int i = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80050d4:	e038      	b.n	8005148 <setting_winPage+0xe84>
						i < sizeof(characterState) / sizeof(characterState[0]);
						i++) {
					if (characterState[i]) {
 80050d6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80050e0:	443b      	add	r3, r7
 80050e2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d029      	beq.n	800513e <setting_winPage+0xe7a>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 80050ea:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80050f4:	443b      	add	r3, r7
 80050f6:	f833 0cf8 	ldrh.w	r0, [r3, #-248]
 80050fa:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005104:	443b      	add	r3, r7
 8005106:	f833 1cf6 	ldrh.w	r1, [r3, #-246]
 800510a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005114:	443b      	add	r3, r7
 8005116:	f833 2cf4 	ldrh.w	r2, [r3, #-244]
 800511a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005124:	443b      	add	r3, r7
 8005126:	f833 3cf2 	ldrh.w	r3, [r3, #-242]
 800512a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800512e:	9400      	str	r4, [sp, #0]
 8005130:	f001 ff97 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, RED);
						player1_character = i;
 8005134:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005138:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
						break;
 800513c:	e008      	b.n	8005150 <setting_winPage+0xe8c>
						i++) {
 800513e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005142:	3301      	adds	r3, #1
 8005144:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
						i < sizeof(characterState) / sizeof(characterState[0]);
 8005148:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800514c:	2b04      	cmp	r3, #4
 800514e:	d9c2      	bls.n	80050d6 <setting_winPage+0xe12>
					}
				}
				if (TP_Touchpad_Pressed()) {
 8005150:	f002 ff14 	bl	8007f7c <TP_Touchpad_Pressed>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03e      	beq.n	80051d8 <setting_winPage+0xf14>
					uint16_t position_array[2];

					if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 800515a:	f107 0318 	add.w	r3, r7, #24
 800515e:	4618      	mov	r0, r3
 8005160:	f002 fe4a 	bl	8007df8 <TP_Read_Coordinates>
 8005164:	4603      	mov	r3, r0
 8005166:	2b01      	cmp	r3, #1
 8005168:	d128      	bne.n	80051bc <setting_winPage+0xef8>
						if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1) {
 800516a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800516e:	2b01      	cmp	r3, #1
 8005170:	d110      	bne.n	8005194 <setting_winPage+0xed0>
							xPos = position_array[1];
 8005172:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005176:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800517a:	885b      	ldrh	r3, [r3, #2]
 800517c:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
							yPos = SCREEN_HEIGHT - position_array[0];
 8005180:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005184:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800518e:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
 8005192:	e013      	b.n	80051bc <setting_winPage+0xef8>
						} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2) {
 8005194:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005198:	2b03      	cmp	r3, #3
 800519a:	d10f      	bne.n	80051bc <setting_winPage+0xef8>
							xPos = SCREEN_WIDTH - position_array[1];
 800519c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80051a0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80051a4:	885b      	ldrh	r3, [r3, #2]
 80051a6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80051aa:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
							yPos = position_array[0];
 80051ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80051b2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
						}
					}
					cursor.x = xPos;
 80051bc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80051c0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80051c4:	f8b7 2256 	ldrh.w	r2, [r7, #598]	; 0x256
 80051c8:	801a      	strh	r2, [r3, #0]
					cursor.y = yPos;
 80051ca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80051ce:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80051d2:	f8b7 2254 	ldrh.w	r2, [r7, #596]	; 0x254
 80051d6:	805a      	strh	r2, [r3, #2]
				}
				for (int i = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80051de:	e0a5      	b.n	800532c <setting_winPage+0x1068>
 80051e0:	0800f18c 	.word	0x0800f18c
 80051e4:	200018f0 	.word	0x200018f0
 80051e8:	20000108 	.word	0x20000108
 80051ec:	0800f190 	.word	0x0800f190
 80051f0:	0800f1b0 	.word	0x0800f1b0
						i
								< sizeof(characterState_2)
										/ sizeof(characterState_2[0]); i++) {
					if (player1_character == i)
 80051f4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80051f8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80051fc:	429a      	cmp	r2, r3
 80051fe:	f000 808f 	beq.w	8005320 <setting_winPage+0x105c>
						continue;
					if (isTouchWithinRectangle(charHighlightRectangle[i],
 8005202:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005206:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800520a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005214:	443b      	add	r3, r7
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	3bf8      	subs	r3, #248	; 0xf8
 800521a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800521e:	f7fe feab 	bl	8003f78 <isTouchWithinRectangle>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d026      	beq.n	8005276 <setting_winPage+0xfb2>
							cursor)) {
						characterState_2[i] = 1;
 8005228:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005232:	443b      	add	r3, r7
 8005234:	2201      	movs	r2, #1
 8005236:	f843 2c8c 	str.w	r2, [r3, #-140]
						for (int j = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8005240:	e015      	b.n	800526e <setting_winPage+0xfaa>
								j
										< sizeof(characterState_2)
												/ sizeof(characterState_2[0]);
								j++) {
							if (j == i)
 8005242:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8005246:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800524a:	429a      	cmp	r2, r3
 800524c:	d009      	beq.n	8005262 <setting_winPage+0xf9e>
								continue;
							characterState_2[j] = 0;
 800524e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005258:	443b      	add	r3, r7
 800525a:	2200      	movs	r2, #0
 800525c:	f843 2c8c 	str.w	r2, [r3, #-140]
 8005260:	e000      	b.n	8005264 <setting_winPage+0xfa0>
								continue;
 8005262:	bf00      	nop
								j++) {
 8005264:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005268:	3301      	adds	r3, #1
 800526a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
										< sizeof(characterState_2)
 800526e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005272:	2b04      	cmp	r3, #4
 8005274:	d9e5      	bls.n	8005242 <setting_winPage+0xf7e>
						}
					}
					if (characterState_2[i])
 8005276:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005280:	443b      	add	r3, r7
 8005282:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d024      	beq.n	80052d4 <setting_winPage+0x1010>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 800528a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005294:	443b      	add	r3, r7
 8005296:	f833 0cf8 	ldrh.w	r0, [r3, #-248]
 800529a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052a4:	443b      	add	r3, r7
 80052a6:	f833 1cf6 	ldrh.w	r1, [r3, #-246]
 80052aa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052b4:	443b      	add	r3, r7
 80052b6:	f833 2cf4 	ldrh.w	r2, [r3, #-244]
 80052ba:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052c4:	443b      	add	r3, r7
 80052c6:	f833 3cf2 	ldrh.w	r3, [r3, #-242]
 80052ca:	241f      	movs	r4, #31
 80052cc:	9400      	str	r4, [sp, #0]
 80052ce:	f001 fec8 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
 80052d2:	e026      	b.n	8005322 <setting_winPage+0x105e>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, BLUE);
					else
						ILI9341_Draw_Hollow_Rectangle_Coord(
 80052d4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052de:	443b      	add	r3, r7
 80052e0:	f833 0cf8 	ldrh.w	r0, [r3, #-248]
 80052e4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052ee:	443b      	add	r3, r7
 80052f0:	f833 1cf6 	ldrh.w	r1, [r3, #-246]
 80052f4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052fe:	443b      	add	r3, r7
 8005300:	f833 2cf4 	ldrh.w	r2, [r3, #-244]
 8005304:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800530e:	443b      	add	r3, r7
 8005310:	f833 3cf2 	ldrh.w	r3, [r3, #-242]
 8005314:	f64f 34e0 	movw	r4, #64480	; 0xfbe0
 8005318:	9400      	str	r4, [sp, #0]
 800531a:	f001 fea2 	bl	8007062 <ILI9341_Draw_Hollow_Rectangle_Coord>
 800531e:	e000      	b.n	8005322 <setting_winPage+0x105e>
						continue;
 8005320:	bf00      	nop
										/ sizeof(characterState_2[0]); i++) {
 8005322:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005326:	3301      	adds	r3, #1
 8005328:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
								< sizeof(characterState_2)
 800532c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005330:	2b04      	cmp	r3, #4
 8005332:	f67f af5f 	bls.w	80051f4 <setting_winPage+0xf30>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, 0xFBE0);
				}
				checkMap(cursor, mapState, mapRectangle);
 8005336:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800533a:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800533e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005342:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	f7fe fe38 	bl	8003fbc <checkMap>
				if (isTouchWithinRectangle(bBack, cursor)) {
 800534c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005350:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8005354:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005358:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005362:	f7fe fe09 	bl	8003f78 <isTouchWithinRectangle>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <setting_winPage+0x10b0>
					displayScreen = 0;
 800536c:	4b6e      	ldr	r3, [pc, #440]	; (8005528 <setting_winPage+0x1264>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
					break;
 8005372:	e076      	b.n	8005462 <setting_winPage+0x119e>
				}
				if (isTouchWithinRectangle(numPlayerRectangle[0], cursor)) {
 8005374:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005378:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005382:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005386:	f7fe fdf7 	bl	8003f78 <isTouchWithinRectangle>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01f      	beq.n	80053d0 <setting_winPage+0x110c>
					displayScreen = 0;
 8005390:	4b65      	ldr	r3, [pc, #404]	; (8005528 <setting_winPage+0x1264>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
					numPlayerState[0] = 1;
 8005396:	2301      	movs	r3, #1
 8005398:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
					numPlayerState[1] = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
					for (int i = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80053a8:	e00d      	b.n	80053c6 <setting_winPage+0x1102>
							i
									< sizeof(characterState_2)
											/ sizeof(characterState_2[0]);
							i++) {
						characterState_2[i] = 0;
 80053aa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80053b4:	443b      	add	r3, r7
 80053b6:	2200      	movs	r2, #0
 80053b8:	f843 2c8c 	str.w	r2, [r3, #-140]
							i++) {
 80053bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
									< sizeof(characterState_2)
 80053c6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d9ed      	bls.n	80053aa <setting_winPage+0x10e6>
					}
					break;
 80053ce:	e048      	b.n	8005462 <setting_winPage+0x119e>
				}
				//				if (isTouchWithinRectangle(bPlay, cursor)) {
				//					if (checkStartGame())
				//						break;
				//				}
				if (checkStartGame(numPlayerState, mapState, characterState,
 80053d0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80053d4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80053d8:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 80053dc:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 80053e0:	4c51      	ldr	r4, [pc, #324]	; (8005528 <setting_winPage+0x1264>)
 80053e2:	9400      	str	r4, [sp, #0]
 80053e4:	f7fe feee 	bl	80041c4 <checkStartGame>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d034      	beq.n	8005458 <setting_winPage+0x1194>
						characterState_2, &displayScreen)) {
					ILI9341_Draw_Filled_Rectangle_Coord(bPlay.x0, bPlay.y0,
 80053ee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80053f2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053f6:	8818      	ldrh	r0, [r3, #0]
 80053f8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80053fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005400:	8859      	ldrh	r1, [r3, #2]
 8005402:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005406:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800540a:	889a      	ldrh	r2, [r3, #4]
 800540c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005410:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005414:	88db      	ldrh	r3, [r3, #6]
 8005416:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800541a:	9400      	str	r4, [sp, #0]
 800541c:	f001 fea2 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
							bPlay.x1, bPlay.y1, PINK);
					ILI9341_Draw_Text("PLAY", 108, 211, WHITE, 2, PINK);
 8005420:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	2302      	movs	r3, #2
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800542e:	22d3      	movs	r2, #211	; 0xd3
 8005430:	216c      	movs	r1, #108	; 0x6c
 8005432:	483e      	ldr	r0, [pc, #248]	; (800552c <setting_winPage+0x1268>)
 8005434:	f001 ff8e 	bl	8007354 <ILI9341_Draw_Text>
					if (isTouchWithinRectangle(bPlay, cursor))
 8005438:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800543c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8005440:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005444:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800544e:	f7fe fd93 	bl	8003f78 <isTouchWithinRectangle>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <setting_winPage+0x119c>
						break;
				}
				HAL_Delay(100);
 8005458:	2064      	movs	r0, #100	; 0x64
 800545a:	f002 fe05 	bl	8008068 <HAL_Delay>
				for (int i = 0;
 800545e:	e636      	b.n	80050ce <setting_winPage+0xe0a>
						break;
 8005460:	bf00      	nop
			}
		}
		if (displayScreen == 2) {
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <setting_winPage+0x1264>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	f040 8098 	bne.w	800559c <setting_winPage+0x12d8>
			clock = 0;
 800546c:	4b30      	ldr	r3, [pc, #192]	; (8005530 <setting_winPage+0x126c>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			endGameFlag = false;
 8005472:	4b30      	ldr	r3, [pc, #192]	; (8005534 <setting_winPage+0x1270>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
			int playerCount;
			for(int i=0;i<2;i++){
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800547e:	e013      	b.n	80054a8 <setting_winPage+0x11e4>
				if(numPlayerState[i]){
 8005480:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800548a:	443b      	add	r3, r7
 800548c:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <setting_winPage+0x11da>
					playerCount = i+1;
 8005494:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005498:	3301      	adds	r3, #1
 800549a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
			for(int i=0;i<2;i++){
 800549e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80054a2:	3301      	adds	r3, #1
 80054a4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80054a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	dde7      	ble.n	8005480 <setting_winPage+0x11bc>
				}
			}
			int player1Index;
			for(int i=0;i<5;i++){
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80054b6:	e013      	b.n	80054e0 <setting_winPage+0x121c>
				if(characterState[i]){
 80054b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80054c2:	443b      	add	r3, r7
 80054c4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <setting_winPage+0x1212>
					player1Index = i+1;
 80054cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054d0:	3301      	adds	r3, #1
 80054d2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			for(int i=0;i<5;i++){
 80054d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054da:	3301      	adds	r3, #1
 80054dc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80054e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	dde7      	ble.n	80054b8 <setting_winPage+0x11f4>
				}
			}
			int player2Index;
			for(int i=0;i<5;i++){
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80054ee:	e013      	b.n	8005518 <setting_winPage+0x1254>
				if(characterState_2[i]){
 80054f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80054fa:	443b      	add	r3, r7
 80054fc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <setting_winPage+0x124a>
					player2Index = i+1;
 8005504:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005508:	3301      	adds	r3, #1
 800550a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			for(int i=0;i<5;i++){
 800550e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005512:	3301      	adds	r3, #1
 8005514:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005518:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800551c:	2b04      	cmp	r3, #4
 800551e:	dde7      	ble.n	80054f0 <setting_winPage+0x122c>
				}
			}
			int mapIndex;
			for(int i=0;i<3;i++){
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005526:	e01a      	b.n	800555e <setting_winPage+0x129a>
 8005528:	200018f0 	.word	0x200018f0
 800552c:	0800f184 	.word	0x0800f184
 8005530:	20001870 	.word	0x20001870
 8005534:	20000120 	.word	0x20000120
				if(mapState[i]){
 8005538:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005542:	443b      	add	r3, r7
 8005544:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <setting_winPage+0x1290>
					mapIndex = i;
 800554c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005550:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
			for(int i=0;i<3;i++){
 8005554:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005558:	3301      	adds	r3, #1
 800555a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800555e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005562:	2b02      	cmp	r3, #2
 8005564:	dde8      	ble.n	8005538 <setting_winPage+0x1274>
				}
			}
			startGame(playerCount,player1Index,player2Index,mapIndex);
 8005566:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800556a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800556e:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8005572:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8005576:	f000 fefd 	bl	8006374 <startGame>
			while(!endGameFlag){}
 800557a:	bf00      	nop
 800557c:	4b64      	ldr	r3, [pc, #400]	; (8005710 <setting_winPage+0x144c>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	f083 0301 	eor.w	r3, r3, #1
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f8      	bne.n	800557c <setting_winPage+0x12b8>
			printOut("END LOOP\n");
 800558a:	4862      	ldr	r0, [pc, #392]	; (8005714 <setting_winPage+0x1450>)
 800558c:	f001 fc8c 	bl	8006ea8 <printOut>
			HAL_TIM_Base_Stop_IT(&htim1);
 8005590:	4861      	ldr	r0, [pc, #388]	; (8005718 <setting_winPage+0x1454>)
 8005592:	f005 fe29 	bl	800b1e8 <HAL_TIM_Base_Stop_IT>
			displayScreen = 3;
 8005596:	4b61      	ldr	r3, [pc, #388]	; (800571c <setting_winPage+0x1458>)
 8005598:	2203      	movs	r2, #3
 800559a:	601a      	str	r2, [r3, #0]
		}
		if (displayScreen == 3) {
 800559c:	4b5f      	ldr	r3, [pc, #380]	; (800571c <setting_winPage+0x1458>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	f47e afff 	bne.w	80045a4 <setting_winPage+0x2e0>
			drawPos.x = 0;
 80055a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80055aa:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]
			drawPos.y = 0;
 80055b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80055b6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80055ba:	2200      	movs	r2, #0
 80055bc:	805a      	strh	r2, [r3, #2]
			winnerPage.drawPoint = drawPos;
 80055be:	4a58      	ldr	r2, [pc, #352]	; (8005720 <setting_winPage+0x145c>)
 80055c0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80055c4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(winnerPage, SCREEN_ROTATION);
 80055cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055d0:	4a53      	ldr	r2, [pc, #332]	; (8005720 <setting_winPage+0x145c>)
 80055d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80055d4:	f7fe fb80 	bl	8003cd8 <drawImageAtPoint>
			Rectangle winnerPic = { 100, 25, 212, 137 };
 80055d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80055dc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80055e0:	4a50      	ldr	r2, [pc, #320]	; (8005724 <setting_winPage+0x1460>)
 80055e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e6:	e883 0003 	stmia.w	r3, {r0, r1}

			Rectangle winnerTextContainer = { 95, 142, 215, 170 };
 80055ea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80055ee:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80055f2:	4a4d      	ldr	r2, [pc, #308]	; (8005728 <setting_winPage+0x1464>)
 80055f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055f8:	e883 0003 	stmia.w	r3, {r0, r1}
			ILI9341_Draw_Filled_Rectangle_Coord(winnerTextContainer.x0,
 80055fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005600:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8005604:	8818      	ldrh	r0, [r3, #0]
 8005606:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800560a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800560e:	8859      	ldrh	r1, [r3, #2]
 8005610:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005614:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8005618:	889a      	ldrh	r2, [r3, #4]
 800561a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800561e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8005622:	88db      	ldrh	r3, [r3, #6]
 8005624:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8005628:	9400      	str	r4, [sp, #0]
 800562a:	f001 fd9b 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
					winnerTextContainer.y0, winnerTextContainer.x1,
					winnerTextContainer.y1, YELLOW);

//			Rectangle bReplay = { 55, 175, 150, 200 };
//			Rectangle bNext = { 155, 175, 250, 200 };
			Rectangle bExit = { 108, 190, 203, 215 };
 800562e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005632:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005636:	4a3d      	ldr	r2, [pc, #244]	; (800572c <setting_winPage+0x1468>)
 8005638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800563c:	e883 0003 	stmia.w	r3, {r0, r1}

//			ILI9341_Draw_Filled_Rectangle_Coord(bReplay.x0, bReplay.y0,
//					bReplay.x1, bReplay.y1, CYAN);
//			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0, bNext.y0, bNext.x1,
//					bNext.y1, GREEN);
			ILI9341_Draw_Filled_Rectangle_Coord(bExit.x0, bExit.y0, bExit.x1,
 8005640:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005644:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005648:	8818      	ldrh	r0, [r3, #0]
 800564a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800564e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005652:	8859      	ldrh	r1, [r3, #2]
 8005654:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005658:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800565c:	889a      	ldrh	r2, [r3, #4]
 800565e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005662:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005666:	88db      	ldrh	r3, [r3, #6]
 8005668:	f64f 5420 	movw	r4, #64800	; 0xfd20
 800566c:	9400      	str	r4, [sp, #0]
 800566e:	f001 fd79 	bl	8007164 <ILI9341_Draw_Filled_Rectangle_Coord>
					bExit.y1, ORANGE);

//			ILI9341_Draw_Text("<REPLAY", 60, 179, BLACK, 2, CYAN);
//			ILI9341_Draw_Text("NEXT>", 175, 179, BLACK, 2, GREEN);
			ILI9341_Draw_Text("EXIT", 133, 195, RED, 2, ORANGE);
 8005672:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	2302      	movs	r3, #2
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005680:	22c3      	movs	r2, #195	; 0xc3
 8005682:	2185      	movs	r1, #133	; 0x85
 8005684:	482a      	ldr	r0, [pc, #168]	; (8005730 <setting_winPage+0x146c>)
 8005686:	f001 fe65 	bl	8007354 <ILI9341_Draw_Text>
			//�����褹����
			if(stateWin == 0){
 800568a:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <setting_winPage+0x1470>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d158      	bne.n	8005744 <setting_winPage+0x1480>
				ILI9341_Draw_Text("WINNER", 103, 143, BLUE, 3, YELLOW);
 8005692:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	2303      	movs	r3, #3
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	231f      	movs	r3, #31
 800569e:	228f      	movs	r2, #143	; 0x8f
 80056a0:	2167      	movs	r1, #103	; 0x67
 80056a2:	4825      	ldr	r0, [pc, #148]	; (8005738 <setting_winPage+0x1474>)
 80056a4:	f001 fe56 	bl	8007354 <ILI9341_Draw_Text>
				drawPos.x = winnerPic.x0;
 80056a8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80056ac:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80056b6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80056ba:	801a      	strh	r2, [r3, #0]
				drawPos.y = winnerPic.y0;
 80056bc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80056c0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80056c4:	885a      	ldrh	r2, [r3, #2]
 80056c6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80056ca:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80056ce:	805a      	strh	r2, [r3, #2]
				character112List[playerWinner[0]->imageIndex].drawPoint = drawPos;
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <setting_winPage+0x1478>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d6:	491a      	ldr	r1, [pc, #104]	; (8005740 <setting_winPage+0x147c>)
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3304      	adds	r3, #4
 80056e4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80056e8:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	601a      	str	r2, [r3, #0]
				drawImageAtPoint(character112List[playerWinner[0]->imageIndex], SCREEN_ROTATION);
 80056f0:	4b12      	ldr	r3, [pc, #72]	; (800573c <setting_winPage+0x1478>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f6:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 80056fa:	4811      	ldr	r0, [pc, #68]	; (8005740 <setting_winPage+0x147c>)
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	18c2      	adds	r2, r0, r3
 8005706:	460b      	mov	r3, r1
 8005708:	ca07      	ldmia	r2, {r0, r1, r2}
 800570a:	f7fe fae5 	bl	8003cd8 <drawImageAtPoint>
 800570e:	e21f      	b.n	8005b50 <setting_winPage+0x188c>
 8005710:	20000120 	.word	0x20000120
 8005714:	0800f1b4 	.word	0x0800f1b4
 8005718:	20002ec0 	.word	0x20002ec0
 800571c:	200018f0 	.word	0x200018f0
 8005720:	20000114 	.word	0x20000114
 8005724:	0800f280 	.word	0x0800f280
 8005728:	0800f288 	.word	0x0800f288
 800572c:	0800f290 	.word	0x0800f290
 8005730:	0800f1c0 	.word	0x0800f1c0
 8005734:	200018ec 	.word	0x200018ec
 8005738:	0800f1c8 	.word	0x0800f1c8
 800573c:	2000185c 	.word	0x2000185c
 8005740:	20001874 	.word	0x20001874
			}
			//����
			else if(stateWin > 0){
 8005744:	4bc0      	ldr	r3, [pc, #768]	; (8005a48 <setting_winPage+0x1784>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f340 8201 	ble.w	8005b50 <setting_winPage+0x188c>
				ILI9341_Draw_Text("DRAW", 120, 143, BLUE, 3, YELLOW);
 800574e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	2303      	movs	r3, #3
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	231f      	movs	r3, #31
 800575a:	228f      	movs	r2, #143	; 0x8f
 800575c:	2178      	movs	r1, #120	; 0x78
 800575e:	48bb      	ldr	r0, [pc, #748]	; (8005a4c <setting_winPage+0x1788>)
 8005760:	f001 fdf8 	bl	8007354 <ILI9341_Draw_Text>
				//���� 2
				if(stateWin == 1){
 8005764:	4bb8      	ldr	r3, [pc, #736]	; (8005a48 <setting_winPage+0x1784>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d16b      	bne.n	8005844 <setting_winPage+0x1580>
					drawPos.x = winnerPic.x0;
 800576c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005770:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005774:	881a      	ldrh	r2, [r3, #0]
 8005776:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800577a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800577e:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+28;
 8005780:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005784:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005788:	885b      	ldrh	r3, [r3, #2]
 800578a:	331c      	adds	r3, #28
 800578c:	b29a      	uxth	r2, r3
 800578e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005792:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005796:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[0]->imageIndex].drawPoint = drawPos;
 8005798:	4bad      	ldr	r3, [pc, #692]	; (8005a50 <setting_winPage+0x178c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800579e:	49ad      	ldr	r1, [pc, #692]	; (8005a54 <setting_winPage+0x1790>)
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3304      	adds	r3, #4
 80057ac:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80057b0:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[0]->imageIndex], SCREEN_ROTATION);
 80057b8:	4ba5      	ldr	r3, [pc, #660]	; (8005a50 <setting_winPage+0x178c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057be:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 80057c2:	48a4      	ldr	r0, [pc, #656]	; (8005a54 <setting_winPage+0x1790>)
 80057c4:	4613      	mov	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	18c2      	adds	r2, r0, r3
 80057ce:	460b      	mov	r3, r1
 80057d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80057d2:	f7fe fa81 	bl	8003cd8 <drawImageAtPoint>
					drawPos.x = winnerPic.x1-56;
 80057d6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80057da:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80057de:	889b      	ldrh	r3, [r3, #4]
 80057e0:	3b38      	subs	r3, #56	; 0x38
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80057e8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80057ec:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+28;
 80057ee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80057f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80057f6:	885b      	ldrh	r3, [r3, #2]
 80057f8:	331c      	adds	r3, #28
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005800:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005804:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[1]->imageIndex].drawPoint = drawPos;
 8005806:	4b92      	ldr	r3, [pc, #584]	; (8005a50 <setting_winPage+0x178c>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580c:	4991      	ldr	r1, [pc, #580]	; (8005a54 <setting_winPage+0x1790>)
 800580e:	4613      	mov	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3304      	adds	r3, #4
 800581a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800581e:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[1]->imageIndex], SCREEN_ROTATION);
 8005826:	4b8a      	ldr	r3, [pc, #552]	; (8005a50 <setting_winPage+0x178c>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582c:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 8005830:	4888      	ldr	r0, [pc, #544]	; (8005a54 <setting_winPage+0x1790>)
 8005832:	4613      	mov	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	18c2      	adds	r2, r0, r3
 800583c:	460b      	mov	r3, r1
 800583e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005840:	f7fe fa4a 	bl	8003cd8 <drawImageAtPoint>
				}
				//���� 3
				if(stateWin == 2){
 8005844:	4b80      	ldr	r3, [pc, #512]	; (8005a48 <setting_winPage+0x1784>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b02      	cmp	r3, #2
 800584a:	f040 809f 	bne.w	800598c <setting_winPage+0x16c8>
					drawPos.x = winnerPic.x0;
 800584e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005852:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800585c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005860:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 8005862:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005866:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800586a:	885a      	ldrh	r2, [r3, #2]
 800586c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005870:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005874:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[0]->imageIndex].drawPoint = drawPos;
 8005876:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <setting_winPage+0x178c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587c:	4975      	ldr	r1, [pc, #468]	; (8005a54 <setting_winPage+0x1790>)
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3304      	adds	r3, #4
 800588a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800588e:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[0]->imageIndex], SCREEN_ROTATION);
 8005896:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <setting_winPage+0x178c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589c:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 80058a0:	486c      	ldr	r0, [pc, #432]	; (8005a54 <setting_winPage+0x1790>)
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	18c2      	adds	r2, r0, r3
 80058ac:	460b      	mov	r3, r1
 80058ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80058b0:	f7fe fa12 	bl	8003cd8 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+56;
 80058b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80058b8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	3338      	adds	r3, #56	; 0x38
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80058c6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80058ca:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 80058cc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80058d0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80058d4:	885a      	ldrh	r2, [r3, #2]
 80058d6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80058da:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80058de:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[1]->imageIndex].drawPoint = drawPos;
 80058e0:	4b5b      	ldr	r3, [pc, #364]	; (8005a50 <setting_winPage+0x178c>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e6:	495b      	ldr	r1, [pc, #364]	; (8005a54 <setting_winPage+0x1790>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	3304      	adds	r3, #4
 80058f4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80058f8:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[1]->imageIndex], SCREEN_ROTATION);
 8005900:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <setting_winPage+0x178c>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005906:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 800590a:	4852      	ldr	r0, [pc, #328]	; (8005a54 <setting_winPage+0x1790>)
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	18c2      	adds	r2, r0, r3
 8005916:	460b      	mov	r3, r1
 8005918:	ca07      	ldmia	r2, {r0, r1, r2}
 800591a:	f7fe f9dd 	bl	8003cd8 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+32;
 800591e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005922:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	3320      	adds	r3, #32
 800592a:	b29a      	uxth	r2, r3
 800592c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005930:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005934:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+56;
 8005936:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800593a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800593e:	885b      	ldrh	r3, [r3, #2]
 8005940:	3338      	adds	r3, #56	; 0x38
 8005942:	b29a      	uxth	r2, r3
 8005944:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005948:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800594c:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[2]->imageIndex].drawPoint = drawPos;
 800594e:	4b40      	ldr	r3, [pc, #256]	; (8005a50 <setting_winPage+0x178c>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005954:	493f      	ldr	r1, [pc, #252]	; (8005a54 <setting_winPage+0x1790>)
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	3304      	adds	r3, #4
 8005962:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8005966:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[2]->imageIndex], SCREEN_ROTATION);
 800596e:	4b38      	ldr	r3, [pc, #224]	; (8005a50 <setting_winPage+0x178c>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005974:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 8005978:	4836      	ldr	r0, [pc, #216]	; (8005a54 <setting_winPage+0x1790>)
 800597a:	4613      	mov	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	18c2      	adds	r2, r0, r3
 8005984:	460b      	mov	r3, r1
 8005986:	ca07      	ldmia	r2, {r0, r1, r2}
 8005988:	f7fe f9a6 	bl	8003cd8 <drawImageAtPoint>

				}
				//���� 4
				if(stateWin == 3){
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <setting_winPage+0x1784>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b03      	cmp	r3, #3
 8005992:	f040 80dd 	bne.w	8005b50 <setting_winPage+0x188c>
					drawPos.x = winnerPic.x0;
 8005996:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800599a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80059a4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80059a8:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 80059aa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80059ae:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80059b2:	885a      	ldrh	r2, [r3, #2]
 80059b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80059b8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80059bc:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[0]->imageIndex].drawPoint = drawPos;
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <setting_winPage+0x178c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c4:	4923      	ldr	r1, [pc, #140]	; (8005a54 <setting_winPage+0x1790>)
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	3304      	adds	r3, #4
 80059d2:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80059d6:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[0]->imageIndex], SCREEN_ROTATION);
 80059de:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <setting_winPage+0x178c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e4:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 80059e8:	481a      	ldr	r0, [pc, #104]	; (8005a54 <setting_winPage+0x1790>)
 80059ea:	4613      	mov	r3, r2
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	18c2      	adds	r2, r0, r3
 80059f4:	460b      	mov	r3, r1
 80059f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80059f8:	f7fe f96e 	bl	8003cd8 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+56;
 80059fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a00:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	3338      	adds	r3, #56	; 0x38
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a0e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005a12:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 8005a14:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a18:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005a1c:	885a      	ldrh	r2, [r3, #2]
 8005a1e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a22:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005a26:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[1]->imageIndex].drawPoint = drawPos;
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <setting_winPage+0x178c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2e:	4909      	ldr	r1, [pc, #36]	; (8005a54 <setting_winPage+0x1790>)
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8005a40:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	e007      	b.n	8005a58 <setting_winPage+0x1794>
 8005a48:	200018ec 	.word	0x200018ec
 8005a4c:	0800f1d0 	.word	0x0800f1d0
 8005a50:	2000185c 	.word	0x2000185c
 8005a54:	200018b0 	.word	0x200018b0
 8005a58:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[1]->imageIndex], SCREEN_ROTATION);
 8005a5a:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <setting_winPage+0x18e4>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a60:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 8005a64:	4851      	ldr	r0, [pc, #324]	; (8005bac <setting_winPage+0x18e8>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	18c2      	adds	r2, r0, r3
 8005a70:	460b      	mov	r3, r1
 8005a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a74:	f7fe f930 	bl	8003cd8 <drawImageAtPoint>
					drawPos.x = winnerPic.x0;
 8005a78:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a7c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005a80:	881a      	ldrh	r2, [r3, #0]
 8005a82:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a86:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005a8a:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+56;
 8005a8c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a90:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005a94:	885b      	ldrh	r3, [r3, #2]
 8005a96:	3338      	adds	r3, #56	; 0x38
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005a9e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005aa2:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[2]->imageIndex].drawPoint = drawPos;
 8005aa4:	4b40      	ldr	r3, [pc, #256]	; (8005ba8 <setting_winPage+0x18e4>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aaa:	4940      	ldr	r1, [pc, #256]	; (8005bac <setting_winPage+0x18e8>)
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8005abc:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[2]->imageIndex], SCREEN_ROTATION);
 8005ac4:	4b38      	ldr	r3, [pc, #224]	; (8005ba8 <setting_winPage+0x18e4>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aca:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 8005ace:	4837      	ldr	r0, [pc, #220]	; (8005bac <setting_winPage+0x18e8>)
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	18c2      	adds	r2, r0, r3
 8005ada:	460b      	mov	r3, r1
 8005adc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ade:	f7fe f8fb 	bl	8003cd8 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+56;
 8005ae2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005ae6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	3338      	adds	r3, #56	; 0x38
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005af4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005af8:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+56;
 8005afa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005afe:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005b02:	885b      	ldrh	r3, [r3, #2]
 8005b04:	3338      	adds	r3, #56	; 0x38
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005b0c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8005b10:	805a      	strh	r2, [r3, #2]
					character56List[playerWinner[3]->imageIndex].drawPoint = drawPos;
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <setting_winPage+0x18e4>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	4924      	ldr	r1, [pc, #144]	; (8005bac <setting_winPage+0x18e8>)
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3304      	adds	r3, #4
 8005b26:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8005b2a:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	601a      	str	r2, [r3, #0]
					drawImageAtPoint(character56List[playerWinner[3]->imageIndex], SCREEN_ROTATION);
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <setting_winPage+0x18e4>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b38:	f897 11ff 	ldrb.w	r1, [r7, #511]	; 0x1ff
 8005b3c:	481b      	ldr	r0, [pc, #108]	; (8005bac <setting_winPage+0x18e8>)
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	18c2      	adds	r2, r0, r3
 8005b48:	460b      	mov	r3, r1
 8005b4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b4c:	f7fe f8c4 	bl	8003cd8 <drawImageAtPoint>
				}
			}
			while (1) {
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8005b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b54:	4816      	ldr	r0, [pc, #88]	; (8005bb0 <setting_winPage+0x18ec>)
 8005b56:	f003 fd05 	bl	8009564 <HAL_GPIO_ReadPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01d      	beq.n	8005b9c <setting_winPage+0x18d8>
					//displayScreen = 2;
					break;
				}
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == GPIO_PIN_RESET) {
 8005b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b64:	4812      	ldr	r0, [pc, #72]	; (8005bb0 <setting_winPage+0x18ec>)
 8005b66:	f003 fcfd 	bl	8009564 <HAL_GPIO_ReadPin>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d018      	beq.n	8005ba2 <setting_winPage+0x18de>
					//displayScreen = 2;
					//mapID++;
					break;
				}
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8005b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b74:	480e      	ldr	r0, [pc, #56]	; (8005bb0 <setting_winPage+0x18ec>)
 8005b76:	f003 fcf5 	bl	8009564 <HAL_GPIO_ReadPin>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <setting_winPage+0x18d0>
					displayScreen = 0;
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <setting_winPage+0x18f0>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
					numPlayerState[0] = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
					numPlayerState[1] = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
					break;
 8005b92:	e007      	b.n	8005ba4 <setting_winPage+0x18e0>
				}
				HAL_Delay(200);
 8005b94:	20c8      	movs	r0, #200	; 0xc8
 8005b96:	f002 fa67 	bl	8008068 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8005b9a:	e7d9      	b.n	8005b50 <setting_winPage+0x188c>
					break;
 8005b9c:	bf00      	nop
 8005b9e:	f7fe bd01 	b.w	80045a4 <setting_winPage+0x2e0>
					break;
 8005ba2:	bf00      	nop
		if (displayScreen == 0) {
 8005ba4:	f7fe bcfe 	b.w	80045a4 <setting_winPage+0x2e0>
 8005ba8:	2000185c 	.word	0x2000185c
 8005bac:	200018b0 	.word	0x200018b0
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	200018f0 	.word	0x200018f0

08005bb8 <HAL_TIM_PeriodElapsedCallback>:
Player* players ;
PlayerUI* playerUIs;
Queue bombs ={NULL,NULL,0};
Queue detonateEffects = {NULL,NULL,0};
int32_t buffer[4];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	if(clock>=GAME_TIME){
 8005bc0:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005bc8:	db08      	blt.n	8005bdc <HAL_TIM_PeriodElapsedCallback+0x24>
		stateWin = playerWinnerCount-1;
 8005bca:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	4a30      	ldr	r2, [pc, #192]	; (8005c94 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005bd2:	6013      	str	r3, [r2, #0]
		endGameFlag = true;
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
		return;
 8005bda:	e054      	b.n	8005c86 <HAL_TIM_PeriodElapsedCallback+0xce>
	}
	playerWinnerCount=0;
 8005bdc:	4b2c      	ldr	r3, [pc, #176]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
	if(htim==&htim1){
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2d      	ldr	r2, [pc, #180]	; (8005c9c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d144      	bne.n	8005c74 <HAL_TIM_PeriodElapsedCallback+0xbc>
		TimeTotal += 20;
 8005bea:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005bf2:	6013      	str	r3, [r2, #0]
		int deadFlagTotal = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<playerCount;i++){
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	e020      	b.n	8005c40 <HAL_TIM_PeriodElapsedCallback+0x88>
			if(players[i].deadFlag)
 8005bfe:	4b29      	ldr	r3, [pc, #164]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	214c      	movs	r1, #76	; 0x4c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_TIM_PeriodElapsedCallback+0x64>
				deadFlagTotal ++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e00e      	b.n	8005c3a <HAL_TIM_PeriodElapsedCallback+0x82>
			else
				playerWinner[playerWinnerCount++]=&players[i];
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	224c      	movs	r2, #76	; 0x4c
 8005c24:	fb03 f202 	mul.w	r2, r3, r2
 8005c28:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	1c58      	adds	r0, r3, #1
 8005c2e:	4c18      	ldr	r4, [pc, #96]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005c30:	6020      	str	r0, [r4, #0]
 8005c32:	440a      	add	r2, r1
 8005c34:	491c      	ldr	r1, [pc, #112]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0;i<playerCount;i++){
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	dbd9      	blt.n	8005bfe <HAL_TIM_PeriodElapsedCallback+0x46>
		}
		if(deadFlagTotal+1<playerCount){
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	4b17      	ldr	r3, [pc, #92]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	da05      	bge.n	8005c62 <HAL_TIM_PeriodElapsedCallback+0xaa>
			HAL_ADC_Start_DMA(&hadc1,(uint32_t *)buffer,4);
 8005c56:	2204      	movs	r2, #4
 8005c58:	4915      	ldr	r1, [pc, #84]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005c5a:	4816      	ldr	r0, [pc, #88]	; (8005cb4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8005c5c:	f002 fa6c 	bl	8008138 <HAL_ADC_Start_DMA>
 8005c60:	e011      	b.n	8005c86 <HAL_TIM_PeriodElapsedCallback+0xce>
		}
		else{
			stateWin = playerWinnerCount-1;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005c6a:	6013      	str	r3, [r2, #0]
			endGameFlag = true;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
			return;
 8005c72:	e008      	b.n	8005c86 <HAL_TIM_PeriodElapsedCallback+0xce>
		}
	}
	else if(htim==&htim2){
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PeriodElapsedCallback+0xce>
		clock++;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4a02      	ldr	r2, [pc, #8]	; (8005c8c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005c84:	6013      	str	r3, [r2, #0]
	}
}
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd90      	pop	{r4, r7, pc}
 8005c8c:	20001870 	.word	0x20001870
 8005c90:	2000186c 	.word	0x2000186c
 8005c94:	200018ec 	.word	0x200018ec
 8005c98:	20000120 	.word	0x20000120
 8005c9c:	20002ec0 	.word	0x20002ec0
 8005ca0:	20002e14 	.word	0x20002e14
 8005ca4:	20002e18 	.word	0x20002e18
 8005ca8:	2000185c 	.word	0x2000185c
 8005cac:	2000018c 	.word	0x2000018c
 8005cb0:	20002e38 	.word	0x20002e38
 8005cb4:	20000b70 	.word	0x20000b70
 8005cb8:	20002f0c 	.word	0x20002f0c

08005cbc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	ed2d 8b02 	vpush	{d8}
 8005cc2:	b099      	sub	sp, #100	; 0x64
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
	int time=TimeTotal;
 8005cc8:	4b9a      	ldr	r3, [pc, #616]	; (8005f34 <HAL_ADC_ConvCpltCallback+0x278>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44

	while(bombs.size&&((Bomb*)bombs.front->value)->detonateTime<time){
 8005cce:	e005      	b.n	8005cdc <HAL_ADC_ConvCpltCallback+0x20>

		detonate((Bomb*)bombs.front->value);
 8005cd0:	4b99      	ldr	r3, [pc, #612]	; (8005f38 <HAL_ADC_ConvCpltCallback+0x27c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fc f800 	bl	8001cdc <detonate>
	while(bombs.size&&((Bomb*)bombs.front->value)->detonateTime<time){
 8005cdc:	4b96      	ldr	r3, [pc, #600]	; (8005f38 <HAL_ADC_ConvCpltCallback+0x27c>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00f      	beq.n	8005d04 <HAL_ADC_ConvCpltCallback+0x48>
 8005ce4:	4b94      	ldr	r3, [pc, #592]	; (8005f38 <HAL_ADC_ConvCpltCallback+0x27c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	dcee      	bgt.n	8005cd0 <HAL_ADC_ConvCpltCallback+0x14>
	}
	while(detonateEffects.size&&((DetonateEffect*)detonateEffects.front->value)->deconstructTime<time){
 8005cf2:	e007      	b.n	8005d04 <HAL_ADC_ConvCpltCallback+0x48>

		clearObject(((DetonateEffect*)detonateEffects.front->value)->index,true);
 8005cf4:	4b91      	ldr	r3, [pc, #580]	; (8005f3c <HAL_ADC_ConvCpltCallback+0x280>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d00:	f7fb fed2 	bl	8001aa8 <clearObject>
	while(detonateEffects.size&&((DetonateEffect*)detonateEffects.front->value)->deconstructTime<time){
 8005d04:	4b8d      	ldr	r3, [pc, #564]	; (8005f3c <HAL_ADC_ConvCpltCallback+0x280>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <HAL_ADC_ConvCpltCallback+0x5e>
 8005d0c:	4b8b      	ldr	r3, [pc, #556]	; (8005f3c <HAL_ADC_ConvCpltCallback+0x280>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d16:	429a      	cmp	r2, r3
 8005d18:	dcec      	bgt.n	8005cf4 <HAL_ADC_ConvCpltCallback+0x38>
	}
	for(int i=0;i<playerCount;i++){
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d1e:	e025      	b.n	8005d6c <HAL_ADC_ConvCpltCallback+0xb0>
		if(players[i].immortalFlag&&time-players[i].initialImmortalTime>IMMORTAL_DURATION)
 8005d20:	4b87      	ldr	r3, [pc, #540]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d26:	214c      	movs	r1, #76	; 0x4c
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d017      	beq.n	8005d66 <HAL_ADC_ConvCpltCallback+0xaa>
 8005d36:	4b82      	ldr	r3, [pc, #520]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3c:	214c      	movs	r1, #76	; 0x4c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	dd09      	ble.n	8005d66 <HAL_ADC_ConvCpltCallback+0xaa>
			players[i].immortalFlag = false;
 8005d52:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d58:	214c      	movs	r1, #76	; 0x4c
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for(int i=0;i<playerCount;i++){
 8005d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d68:	3301      	adds	r3, #1
 8005d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d6c:	4b75      	ldr	r3, [pc, #468]	; (8005f44 <HAL_ADC_ConvCpltCallback+0x288>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d72:	429a      	cmp	r2, r3
 8005d74:	dbd4      	blt.n	8005d20 <HAL_ADC_ConvCpltCallback+0x64>
	}
	updateMap();
 8005d76:	f7fc f947 	bl	8002008 <updateMap>
	for(int i=0,humanPlayerCount =0;i<playerCount;i++){
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d7e:	2300      	movs	r3, #0
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d82:	e0c5      	b.n	8005f10 <HAL_ADC_ConvCpltCallback+0x254>
		if(players[i].botFlag){
 8005d84:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8a:	214c      	movs	r1, #76	; 0x4c
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	4413      	add	r3, r2
 8005d92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d054      	beq.n	8005e44 <HAL_ADC_ConvCpltCallback+0x188>
			if(!players[i].deadFlag){
 8005d9a:	4b69      	ldr	r3, [pc, #420]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da0:	214c      	movs	r1, #76	; 0x4c
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dac:	f083 0301 	eor.w	r3, r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80a9 	beq.w	8005f0a <HAL_ADC_ConvCpltCallback+0x24e>
				Vector2 dst=Sub( toPosition(findNextIndex(&players[i])) ,players[i].transform.position);
 8005db8:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbe:	214c      	movs	r1, #76	; 0x4c
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	441a      	add	r2, r3
 8005dc6:	f107 031c 	add.w	r3, r7, #28
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fc fd35 	bl	800283c <findNextIndex>
 8005dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dd6:	f107 031c 	add.w	r3, r7, #28
 8005dda:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005dde:	f7fa fe65 	bl	8000aac <toPosition>
 8005de2:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de8:	214c      	movs	r1, #76	; 0x4c
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	4413      	add	r3, r2
 8005df0:	f107 000c 	add.w	r0, r7, #12
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	9200      	str	r2, [sp, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005dfe:	ca06      	ldmia	r2, {r1, r2}
 8005e00:	f7fa fd75 	bl	80008ee <Sub>
				dst.x = clamp(-1,dst.x,1);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0e:	f001 f817 	bl	8006e40 <clamp>
 8005e12:	4603      	mov	r3, r0
 8005e14:	60fb      	str	r3, [r7, #12]
				dst.y = clamp(-1,dst.y,1);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e20:	f001 f80e 	bl	8006e40 <clamp>
 8005e24:	4603      	mov	r3, r0
 8005e26:	613b      	str	r3, [r7, #16]
				Move(&players[i],dst);
 8005e28:	4b45      	ldr	r3, [pc, #276]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2e:	214c      	movs	r1, #76	; 0x4c
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	18d0      	adds	r0, r2, r3
 8005e36:	f107 030c 	add.w	r3, r7, #12
 8005e3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005e3e:	f7fb f8b7 	bl	8000fb0 <Move>
 8005e42:	e062      	b.n	8005f0a <HAL_ADC_ConvCpltCallback+0x24e>
			}
		}
		else{
			int num =(humanPlayerCount == 0)?0:2;
 8005e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_ADC_ConvCpltCallback+0x192>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <HAL_ADC_ConvCpltCallback+0x194>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
			if(humanPlayerCount<2){
 8005e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	dc55      	bgt.n	8005f04 <HAL_ADC_ConvCpltCallback+0x248>
				if(!players[i].deadFlag)
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5e:	214c      	movs	r1, #76	; 0x4c
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e6a:	f083 0301 	eor.w	r3, r3, #1
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d047      	beq.n	8005f04 <HAL_ADC_ConvCpltCallback+0x248>
					Move(&players[i],Vector2_init(mappingValue(buffer[num],0,0xfff,-3,3) ,mappingValue(buffer[num+1],0,0xfff,3,-3)));
 8005e74:	4b32      	ldr	r3, [pc, #200]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7a:	214c      	movs	r1, #76	; 0x4c
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	18d4      	adds	r4, r2, r3
 8005e82:	4a31      	ldr	r2, [pc, #196]	; (8005f48 <HAL_ADC_ConvCpltCallback+0x28c>)
 8005e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e92:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8005e96:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8005e9a:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8005f4c <HAL_ADC_ConvCpltCallback+0x290>
 8005e9e:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8005f50 <HAL_ADC_ConvCpltCallback+0x294>
 8005ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ea6:	f000 ff9d 	bl	8006de4 <mappingValue>
 8005eaa:	eef0 7a40 	vmov.f32	s15, s0
 8005eae:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a24      	ldr	r2, [pc, #144]	; (8005f48 <HAL_ADC_ConvCpltCallback+0x28c>)
 8005eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ec4:	eeb8 2a08 	vmov.f32	s4, #136	; 0xc0400000 -3.0
 8005ec8:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8005ecc:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8005f4c <HAL_ADC_ConvCpltCallback+0x290>
 8005ed0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8005f50 <HAL_ADC_ConvCpltCallback+0x294>
 8005ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed8:	f000 ff84 	bl	8006de4 <mappingValue>
 8005edc:	eef0 7a40 	vmov.f32	s15, s0
 8005ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	ee18 1a10 	vmov	r1, s16
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fcc5 	bl	8000880 <Vector2_init>
 8005ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005efa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fb f856 	bl	8000fb0 <Move>
			}

			humanPlayerCount++;
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	3301      	adds	r3, #1
 8005f08:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i=0,humanPlayerCount =0;i<playerCount;i++){
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <HAL_ADC_ConvCpltCallback+0x288>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f16:	429a      	cmp	r2, r3
 8005f18:	f6ff af34 	blt.w	8005d84 <HAL_ADC_ConvCpltCallback+0xc8>
		}
	}

	drawPlayers(players,playerCount);
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x284>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <HAL_ADC_ConvCpltCallback+0x288>)
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fb fa98 	bl	800145c <drawPlayers>
	for(int i=0;i<playerCount;i++)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f30:	e01e      	b.n	8005f70 <HAL_ADC_ConvCpltCallback+0x2b4>
 8005f32:	bf00      	nop
 8005f34:	20002e14 	.word	0x20002e14
 8005f38:	20002e20 	.word	0x20002e20
 8005f3c:	20002e2c 	.word	0x20002e2c
 8005f40:	20002e18 	.word	0x20002e18
 8005f44:	2000018c 	.word	0x2000018c
 8005f48:	20002e38 	.word	0x20002e38
 8005f4c:	457ff000 	.word	0x457ff000
 8005f50:	00000000 	.word	0x00000000
		DrawPlayerUI(&playerUIs[i]);
 8005f54:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <HAL_ADC_ConvCpltCallback+0x34c>)
 8005f56:	6819      	ldr	r1, [r3, #0]
 8005f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	440b      	add	r3, r1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fd fc93 	bl	8003890 <DrawPlayerUI>
	for(int i=0;i<playerCount;i++)
 8005f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f70:	4b26      	ldr	r3, [pc, #152]	; (800600c <HAL_ADC_ConvCpltCallback+0x350>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f76:	429a      	cmp	r2, r3
 8005f78:	dbec      	blt.n	8005f54 <HAL_ADC_ConvCpltCallback+0x298>
	Vector2 clockPosition = Vector2_init(UI_MARGIN,10);
 8005f7a:	f107 0314 	add.w	r3, r7, #20
 8005f7e:	220a      	movs	r2, #10
 8005f80:	2102      	movs	r1, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa fc7c 	bl	8000880 <Vector2_init>
	int timeLeft = GAME_TIME - clock;
 8005f88:	4b21      	ldr	r3, [pc, #132]	; (8006010 <HAL_ADC_ConvCpltCallback+0x354>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
	int minute = timeLeft/60,second=timeLeft%60;
 8005f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f94:	4a1f      	ldr	r2, [pc, #124]	; (8006014 <HAL_ADC_ConvCpltCallback+0x358>)
 8005f96:	fb82 1203 	smull	r1, r2, r2, r3
 8005f9a:	441a      	add	r2, r3
 8005f9c:	1152      	asrs	r2, r2, #5
 8005f9e:	17db      	asrs	r3, r3, #31
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa6:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <HAL_ADC_ConvCpltCallback+0x358>)
 8005fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8005fac:	4413      	add	r3, r2
 8005fae:	1159      	asrs	r1, r3, #5
 8005fb0:	17d3      	asrs	r3, r2, #31
 8005fb2:	1ac9      	subs	r1, r1, r3
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	1a5b      	subs	r3, r3, r1
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if(second<10)
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	dc06      	bgt.n	8005fd4 <HAL_ADC_ConvCpltCallback+0x318>
		sprintf(str,"%d:0%d",minute,second);
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fca:	4913      	ldr	r1, [pc, #76]	; (8006018 <HAL_ADC_ConvCpltCallback+0x35c>)
 8005fcc:	4813      	ldr	r0, [pc, #76]	; (800601c <HAL_ADC_ConvCpltCallback+0x360>)
 8005fce:	f006 ff31 	bl	800ce34 <siprintf>
 8005fd2:	e005      	b.n	8005fe0 <HAL_ADC_ConvCpltCallback+0x324>
	else
		sprintf(str,"%d:%d",minute,second);
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	4911      	ldr	r1, [pc, #68]	; (8006020 <HAL_ADC_ConvCpltCallback+0x364>)
 8005fda:	4810      	ldr	r0, [pc, #64]	; (800601c <HAL_ADC_ConvCpltCallback+0x360>)
 8005fdc:	f006 ff2a 	bl	800ce34 <siprintf>
	ILI9341_Draw_Text(str,clockPosition.x,clockPosition.y, WHITE, 2, BLACK);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	b2d9      	uxtb	r1, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	2302      	movs	r3, #2
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff4:	4809      	ldr	r0, [pc, #36]	; (800601c <HAL_ADC_ConvCpltCallback+0x360>)
 8005ff6:	f001 f9ad 	bl	8007354 <ILI9341_Draw_Text>
}
 8005ffa:	bf00      	nop
 8005ffc:	375c      	adds	r7, #92	; 0x5c
 8005ffe:	46bd      	mov	sp, r7
 8006000:	ecbd 8b02 	vpop	{d8}
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	bf00      	nop
 8006008:	20002e1c 	.word	0x20002e1c
 800600c:	2000018c 	.word	0x2000018c
 8006010:	20001870 	.word	0x20001870
 8006014:	88888889 	.word	0x88888889
 8006018:	0800f298 	.word	0x0800f298
 800601c:	20001800 	.word	0x20001800
 8006020:	0800f2a0 	.word	0x0800f2a0

08006024 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	80fb      	strh	r3, [r7, #6]
	int humanTotal = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
	int val=-1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006036:	613b      	str	r3, [r7, #16]
	if(GPIO_Pin==GPIO_PIN_3){ val =1; }
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d102      	bne.n	8006044 <HAL_GPIO_EXTI_Callback+0x20>
 800603e:	2301      	movs	r3, #1
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	e004      	b.n	800604e <HAL_GPIO_EXTI_Callback+0x2a>
	else if(GPIO_Pin==GPIO_PIN_4){ val =2; }
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	2b10      	cmp	r3, #16
 8006048:	d101      	bne.n	800604e <HAL_GPIO_EXTI_Callback+0x2a>
 800604a:	2302      	movs	r3, #2
 800604c:	613b      	str	r3, [r7, #16]
	if((GPIO_Pin==GPIO_PIN_3||GPIO_Pin==GPIO_PIN_4)&&val!=-1){
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d002      	beq.n	800605a <HAL_GPIO_EXTI_Callback+0x36>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b10      	cmp	r3, #16
 8006058:	d12e      	bne.n	80060b8 <HAL_GPIO_EXTI_Callback+0x94>
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006060:	d02a      	beq.n	80060b8 <HAL_GPIO_EXTI_Callback+0x94>
		for(int i=0;i<playerCount;i++){
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	e022      	b.n	80060ae <HAL_GPIO_EXTI_Callback+0x8a>
			if(!players[i].botFlag){
 8006068:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	214c      	movs	r1, #76	; 0x4c
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800607a:	f083 0301 	eor.w	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d011      	beq.n	80060a8 <HAL_GPIO_EXTI_Callback+0x84>
				humanTotal++;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	3301      	adds	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
				if(humanTotal == val){
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	429a      	cmp	r2, r3
 8006090:	d10a      	bne.n	80060a8 <HAL_GPIO_EXTI_Callback+0x84>
					placeBomb(&players[i]);
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	214c      	movs	r1, #76	; 0x4c
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fb fdb9 	bl	8001c18 <placeBomb>
					break;
 80060a6:	e007      	b.n	80060b8 <HAL_GPIO_EXTI_Callback+0x94>
		for(int i=0;i<playerCount;i++){
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_GPIO_EXTI_Callback+0xa8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	dbd7      	blt.n	8006068 <HAL_GPIO_EXTI_Callback+0x44>
				}
			}
		}
	}
	if(GPIO_Pin==GPIO_PIN_10&&displayScreen==3){
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		//displayScreen = 0;

	}
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20002e18 	.word	0x20002e18
 80060cc:	2000018c 	.word	0x2000018c

080060d0 <SetPlayers>:
void SetPlayers(int humanCount,int player1Index,int player2Index,bool* isBot){
 80060d0:	b5b0      	push	{r4, r5, r7, lr}
 80060d2:	b0d4      	sub	sp, #336	; 0x150
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80060da:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80060de:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	playerCount = 2;
 80060e6:	4ba0      	ldr	r3, [pc, #640]	; (8006368 <SetPlayers+0x298>)
 80060e8:	2202      	movs	r2, #2
 80060ea:	601a      	str	r2, [r3, #0]
	players = calloc(playerCount,sizeof(Player));
 80060ec:	4b9e      	ldr	r3, [pc, #632]	; (8006368 <SetPlayers+0x298>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	214c      	movs	r1, #76	; 0x4c
 80060f2:	4618      	mov	r0, r3
 80060f4:	f006 f98a 	bl	800c40c <calloc>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	4b9b      	ldr	r3, [pc, #620]	; (800636c <SetPlayers+0x29c>)
 80060fe:	601a      	str	r2, [r3, #0]
	playerUIs = calloc(playerCount,sizeof(PlayerUI));
 8006100:	4b99      	ldr	r3, [pc, #612]	; (8006368 <SetPlayers+0x298>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2170      	movs	r1, #112	; 0x70
 8006106:	4618      	mov	r0, r3
 8006108:	f006 f980 	bl	800c40c <calloc>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	4b97      	ldr	r3, [pc, #604]	; (8006370 <SetPlayers+0x2a0>)
 8006112:	601a      	str	r2, [r3, #0]
	bool b[5] = {false,false,false,false};
 8006114:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	711a      	strb	r2, [r3, #4]
	int ind[4]={0,0,0,0};
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	605a      	str	r2, [r3, #4]
 8006128:	609a      	str	r2, [r3, #8]
 800612a:	60da      	str	r2, [r3, #12]
	Vector2 startPosition[4]={
		Vector2_init(0,0),
 800612c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006130:	2200      	movs	r2, #0
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f7fa fba3 	bl	8000880 <Vector2_init>
		Vector2_init(0,MAP_HEIGHT-1),
 800613a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800613e:	220c      	movs	r2, #12
 8006140:	2100      	movs	r1, #0
 8006142:	4618      	mov	r0, r3
 8006144:	f7fa fb9c 	bl	8000880 <Vector2_init>
		Vector2_init(MAP_WIDTH-1,0),
 8006148:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800614c:	2200      	movs	r2, #0
 800614e:	210c      	movs	r1, #12
 8006150:	4618      	mov	r0, r3
 8006152:	f7fa fb95 	bl	8000880 <Vector2_init>
		Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1)
 8006156:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800615a:	220c      	movs	r2, #12
 800615c:	210c      	movs	r1, #12
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa fb8e 	bl	8000880 <Vector2_init>
	};
	ind[0]=player1Index;
 8006164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006168:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	b[player1Index-1]=true;
 800616c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006170:	3b01      	subs	r3, #1
 8006172:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006176:	443b      	add	r3, r7
 8006178:	2201      	movs	r2, #1
 800617a:	f803 2c30 	strb.w	r2, [r3, #-48]
	if(humanCount==2){
 800617e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006182:	2b02      	cmp	r3, #2
 8006184:	d10c      	bne.n	80061a0 <SetPlayers+0xd0>
		ind[1]=player2Index;
 8006186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800618a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		b[player2Index-1] = true;
 800618e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006192:	3b01      	subs	r3, #1
 8006194:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006198:	443b      	add	r3, r7
 800619a:	2201      	movs	r2, #1
 800619c:	f803 2c30 	strb.w	r2, [r3, #-48]
	}
	for(int i=1;i<playerCount;i++){
 80061a0:	2301      	movs	r3, #1
 80061a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80061a6:	e039      	b.n	800621c <SetPlayers+0x14c>
		if(ind[i]==0){
 80061a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80061b2:	443b      	add	r3, r7
 80061b4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d12a      	bne.n	8006212 <SetPlayers+0x142>
			for(int j=0;j<5;j++){
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80061c2:	e022      	b.n	800620a <SetPlayers+0x13a>
				if(!b[j]){
 80061c4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80061c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f083 0301 	eor.w	r3, r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d012      	beq.n	8006200 <SetPlayers+0x130>
					ind[i] = j+1;
 80061da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80061ea:	443b      	add	r3, r7
 80061ec:	f843 2c40 	str.w	r2, [r3, #-64]
					b[j]=true;
 80061f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80061f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80061f8:	4413      	add	r3, r2
 80061fa:	2201      	movs	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
					break;
 80061fe:	e008      	b.n	8006212 <SetPlayers+0x142>
			for(int j=0;j<5;j++){
 8006200:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006204:	3301      	adds	r3, #1
 8006206:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800620a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800620e:	2b04      	cmp	r3, #4
 8006210:	ddd8      	ble.n	80061c4 <SetPlayers+0xf4>
	for(int i=1;i<playerCount;i++){
 8006212:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006216:	3301      	adds	r3, #1
 8006218:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800621c:	4b52      	ldr	r3, [pc, #328]	; (8006368 <SetPlayers+0x298>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006224:	429a      	cmp	r2, r3
 8006226:	dbbf      	blt.n	80061a8 <SetPlayers+0xd8>
				}
			}
		}
	}
	for(int i=0;i<playerCount;i++){
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800622e:	e030      	b.n	8006292 <SetPlayers+0x1c2>
		players[i] = Player_init(startPosition[i],ind[i]-1,isBot[i]);
 8006230:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800623a:	443b      	add	r3, r7
 800623c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006240:	1e5c      	subs	r4, r3, #1
 8006242:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006246:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	4a47      	ldr	r2, [pc, #284]	; (800636c <SetPlayers+0x29c>)
 8006250:	6811      	ldr	r1, [r2, #0]
 8006252:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006256:	204c      	movs	r0, #76	; 0x4c
 8006258:	fb00 f202 	mul.w	r2, r0, r2
 800625c:	188d      	adds	r5, r1, r2
 800625e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8006262:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006266:	00d2      	lsls	r2, r2, #3
 8006268:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 800626c:	443a      	add	r2, r7
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4623      	mov	r3, r4
 8006272:	3a60      	subs	r2, #96	; 0x60
 8006274:	ca06      	ldmia	r2, {r1, r2}
 8006276:	f7fb fde7 	bl	8001e48 <Player_init>
 800627a:	4628      	mov	r0, r5
 800627c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006280:	224c      	movs	r2, #76	; 0x4c
 8006282:	4619      	mov	r1, r3
 8006284:	f006 ff5a 	bl	800d13c <memcpy>
	for(int i=0;i<playerCount;i++){
 8006288:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800628c:	3301      	adds	r3, #1
 800628e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006292:	4b35      	ldr	r3, [pc, #212]	; (8006368 <SetPlayers+0x298>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800629a:	429a      	cmp	r2, r3
 800629c:	dbc8      	blt.n	8006230 <SetPlayers+0x160>

	}
	for(int i=0;i<playerCount;i++){
 800629e:	2300      	movs	r3, #0
 80062a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80062a4:	e033      	b.n	800630e <SetPlayers+0x23e>
		playerUIs[i] = PlayerUI_init(&players[i],Vector2_init(5,40+(16+UI_MARGIN)*3*i));
 80062a6:	4b31      	ldr	r3, [pc, #196]	; (800636c <SetPlayers+0x29c>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062ae:	214c      	movs	r1, #76	; 0x4c
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	18d4      	adds	r4, r2, r3
 80062b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062ba:	2236      	movs	r2, #54	; 0x36
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80062c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80062c8:	2105      	movs	r1, #5
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fa fad8 	bl	8000880 <Vector2_init>
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <SetPlayers+0x2a0>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80062d8:	4613      	mov	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	18cd      	adds	r5, r1, r3
 80062e2:	4638      	mov	r0, r7
 80062e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80062e8:	cb0c      	ldmia	r3, {r2, r3}
 80062ea:	4621      	mov	r1, r4
 80062ec:	f7fd f976 	bl	80035dc <PlayerUI_init>
 80062f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80062f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062f8:	4628      	mov	r0, r5
 80062fa:	4619      	mov	r1, r3
 80062fc:	2370      	movs	r3, #112	; 0x70
 80062fe:	461a      	mov	r2, r3
 8006300:	f006 ff1c 	bl	800d13c <memcpy>
	for(int i=0;i<playerCount;i++){
 8006304:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006308:	3301      	adds	r3, #1
 800630a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800630e:	4b16      	ldr	r3, [pc, #88]	; (8006368 <SetPlayers+0x298>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006316:	429a      	cmp	r2, r3
 8006318:	dbc5      	blt.n	80062a6 <SetPlayers+0x1d6>
	}
	Transform UI_Bg =Transform_init(Vector2_init(0,0),Vector2_init(5+(16+UI_MARGIN)*5,240),TopLeft);
 800631a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800631e:	2200      	movs	r2, #0
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f7fa faac 	bl	8000880 <Vector2_init>
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	22f0      	movs	r2, #240	; 0xf0
 800632e:	215f      	movs	r1, #95	; 0x5f
 8006330:	4618      	mov	r0, r3
 8006332:	f7fa faa5 	bl	8000880 <Vector2_init>
 8006336:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800633a:	2300      	movs	r3, #0
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006348:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800634c:	ca06      	ldmia	r2, {r1, r2}
 800634e:	f7fa fbcd 	bl	8000aec <Transform_init>
	Draw(&UI_Bg,BLACK);
 8006352:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006356:	2100      	movs	r1, #0
 8006358:	4618      	mov	r0, r3
 800635a:	f7fa fc8a 	bl	8000c72 <Draw>
}
 800635e:	bf00      	nop
 8006360:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006364:	46bd      	mov	sp, r7
 8006366:	bdb0      	pop	{r4, r5, r7, pc}
 8006368:	2000018c 	.word	0x2000018c
 800636c:	20002e18 	.word	0x20002e18
 8006370:	20002e1c 	.word	0x20002e1c

08006374 <startGame>:
void startGame(int count,int player1Index,int player2Index,int mapIndex){
 8006374:	b5b0      	push	{r4, r5, r7, lr}
 8006376:	b094      	sub	sp, #80	; 0x50
 8006378:	af02      	add	r7, sp, #8
 800637a:	6278      	str	r0, [r7, #36]	; 0x24
 800637c:	6239      	str	r1, [r7, #32]
 800637e:	61fa      	str	r2, [r7, #28]
 8006380:	61bb      	str	r3, [r7, #24]
	for(int i=0;i<mapSize.y;i++){
 8006382:	2300      	movs	r3, #0
 8006384:	647b      	str	r3, [r7, #68]	; 0x44
 8006386:	e039      	b.n	80063fc <startGame+0x88>
		for(int j=0;j<mapSize.x;j++){
 8006388:	2300      	movs	r3, #0
 800638a:	643b      	str	r3, [r7, #64]	; 0x40
 800638c:	e02e      	b.n	80063ec <startGame+0x78>
			Vector2 index = Vector2_init(j,i);
 800638e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa fa72 	bl	8000880 <Vector2_init>
			map[i][j].floor = Transform_init(toPosition(index),cellSize,MiddleCenter);
 800639c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80063a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80063a8:	f7fa fb80 	bl	8000aac <toPosition>
 80063ac:	4926      	ldr	r1, [pc, #152]	; (8006448 <startGame+0xd4>)
 80063ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b0:	4613      	mov	r3, r2
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063bc:	4413      	add	r3, r2
 80063be:	015b      	lsls	r3, r3, #5
 80063c0:	18cc      	adds	r4, r1, r3
 80063c2:	4638      	mov	r0, r7
 80063c4:	4b21      	ldr	r3, [pc, #132]	; (800644c <startGame+0xd8>)
 80063c6:	2204      	movs	r2, #4
 80063c8:	9201      	str	r2, [sp, #4]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	9200      	str	r2, [sp, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80063d4:	ca06      	ldmia	r2, {r1, r2}
 80063d6:	f7fa fb89 	bl	8000aec <Transform_init>
 80063da:	4625      	mov	r5, r4
 80063dc:	463c      	mov	r4, r7
 80063de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	602b      	str	r3, [r5, #0]
		for(int j=0;j<mapSize.x;j++){
 80063e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e8:	3301      	adds	r3, #1
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
 80063ec:	4b18      	ldr	r3, [pc, #96]	; (8006450 <startGame+0xdc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063f2:	429a      	cmp	r2, r3
 80063f4:	dbcb      	blt.n	800638e <startGame+0x1a>
	for(int i=0;i<mapSize.y;i++){
 80063f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f8:	3301      	adds	r3, #1
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <startGame+0xdc>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006402:	429a      	cmp	r2, r3
 8006404:	dbc0      	blt.n	8006388 <startGame+0x14>
		}
	}
	ILI9341_Fill_Screen(0x5AED);
 8006406:	f645 20ed 	movw	r0, #23277	; 0x5aed
 800640a:	f001 faad 	bl	8007968 <ILI9341_Fill_Screen>
	setMap(mapIndex);
 800640e:	69b8      	ldr	r0, [r7, #24]
 8006410:	f7fb f9c6 	bl	80017a0 <setMap>

	bool isBot[4]={false,false,true,true};
 8006414:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <startGame+0xe0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
	 isBot[1] = count==1?true:false;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SetPlayers(count,player1Index,player2Index,isBot);
 800642a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	6a39      	ldr	r1, [r7, #32]
 8006432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006434:	f7ff fe4c 	bl	80060d0 <SetPlayers>
	HAL_TIM_Base_Start_IT(&htim1);
 8006438:	4807      	ldr	r0, [pc, #28]	; (8006458 <startGame+0xe4>)
 800643a:	f004 fe5d 	bl	800b0f8 <HAL_TIM_Base_Start_IT>
}
 800643e:	bf00      	nop
 8006440:	3748      	adds	r7, #72	; 0x48
 8006442:	46bd      	mov	sp, r7
 8006444:	bdb0      	pop	{r4, r5, r7, pc}
 8006446:	bf00      	nop
 8006448:	200018f4 	.word	0x200018f4
 800644c:	20000134 	.word	0x20000134
 8006450:	2000012c 	.word	0x2000012c
 8006454:	0800f2a8 	.word	0x0800f2a8
 8006458:	20002ec0 	.word	0x20002ec0

0800645c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b0a0      	sub	sp, #128	; 0x80
 8006460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8006462:	f7fd fd1f 	bl	8003ea4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8006466:	f7fd fd43 	bl	8003ef0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800646a:	f001 fd97 	bl	8007f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800646e:	f000 f8a7 	bl	80065c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006472:	f7fd faad 	bl	80039d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006476:	f7fa f9e5 	bl	8000844 <MX_DMA_Init>
  MX_TIM1_Init();
 800647a:	f000 fb3d 	bl	8006af8 <MX_TIM1_Init>
  MX_RNG_Init();
 800647e:	f000 f913 	bl	80066a8 <MX_RNG_Init>
  MX_ADC1_Init();
 8006482:	f7fa f8b3 	bl	80005ec <MX_ADC1_Init>
  MX_SPI5_Init();
 8006486:	f000 f957 	bl	8006738 <MX_SPI5_Init>
  MX_USART3_UART_Init();
 800648a:	f000 fc1b 	bl	8006cc4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800648e:	f000 fb89 	bl	8006ba4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8006492:	f001 f8bd 	bl	8007610 <ILI9341_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Image arr1[5]	= { playerIcon1_56, playerIcon2_56,playerIcon3_56, playerIcon4_56, playerIcon5_56 };
 8006496:	4a3d      	ldr	r2, [pc, #244]	; (800658c <main+0x130>)
 8006498:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800649c:	ca07      	ldmia	r2, {r0, r1, r2}
 800649e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064a2:	4a3b      	ldr	r2, [pc, #236]	; (8006590 <main+0x134>)
 80064a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80064a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80064aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064ae:	4a39      	ldr	r2, [pc, #228]	; (8006594 <main+0x138>)
 80064b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80064b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064ba:	4a37      	ldr	r2, [pc, #220]	; (8006598 <main+0x13c>)
 80064bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80064c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80064c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064c6:	4a35      	ldr	r2, [pc, #212]	; (800659c <main+0x140>)
 80064c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80064cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80064ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Image arr2[5] = { playerIcon1_112, playerIcon2_112,playerIcon3_112, playerIcon4_112, playerIcon5_112 };
 80064d2:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <main+0x144>)
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80064d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064dc:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <main+0x148>)
 80064de:	f107 0310 	add.w	r3, r7, #16
 80064e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80064e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <main+0x14c>)
 80064ea:	f107 031c 	add.w	r3, r7, #28
 80064ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80064f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <main+0x150>)
 80064f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80064fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <main+0x154>)
 8006502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006506:	ca07      	ldmia	r2, {r0, r1, r2}
 8006508:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(int i=0;i<5;i++){
 800650c:	2300      	movs	r3, #0
 800650e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006510:	e02a      	b.n	8006568 <main+0x10c>
	  character56List[i]= arr1[i];
 8006512:	4928      	ldr	r1, [pc, #160]	; (80065b4 <main+0x158>)
 8006514:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006516:	4613      	mov	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4419      	add	r1, r3
 8006520:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	3380      	adds	r3, #128	; 0x80
 800652c:	443b      	add	r3, r7
 800652e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8006532:	460b      	mov	r3, r1
 8006534:	ca07      	ldmia	r2, {r0, r1, r2}
 8006536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  character112List[i]=arr2[i];
 800653a:	491f      	ldr	r1, [pc, #124]	; (80065b8 <main+0x15c>)
 800653c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800653e:	4613      	mov	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4419      	add	r1, r3
 8006548:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800654a:	4613      	mov	r3, r2
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	3380      	adds	r3, #128	; 0x80
 8006554:	443b      	add	r3, r7
 8006556:	f1a3 027c 	sub.w	r2, r3, #124	; 0x7c
 800655a:	460b      	mov	r3, r1
 800655c:	ca07      	ldmia	r2, {r0, r1, r2}
 800655e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(int i=0;i<5;i++){
 8006562:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006564:	3301      	adds	r3, #1
 8006566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800656a:	2b04      	cmp	r3, #4
 800656c:	ddd1      	ble.n	8006512 <main+0xb6>
  }
  srand(HAL_GetTick());
 800656e:	f001 fd6f 	bl	8008050 <HAL_GetTick>
 8006572:	4603      	mov	r3, r0
 8006574:	4618      	mov	r0, r3
 8006576:	f006 fc7d 	bl	800ce74 <srand>
  HAL_TIM_Base_Start_IT(&htim2);
 800657a:	4810      	ldr	r0, [pc, #64]	; (80065bc <main+0x160>)
 800657c:	f004 fdbc 	bl	800b0f8 <HAL_TIM_Base_Start_IT>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8006580:	2001      	movs	r0, #1
 8006582:	f000 ffe7 	bl	8007554 <ILI9341_Set_Rotation>
  while (1)
  {
	  setting_winPage();
 8006586:	f7fd fe9d 	bl	80042c4 <setting_winPage>
 800658a:	e7fc      	b.n	8006586 <main+0x12a>
 800658c:	20000084 	.word	0x20000084
 8006590:	20000090 	.word	0x20000090
 8006594:	2000009c 	.word	0x2000009c
 8006598:	200000a8 	.word	0x200000a8
 800659c:	200000b4 	.word	0x200000b4
 80065a0:	200000c0 	.word	0x200000c0
 80065a4:	200000cc 	.word	0x200000cc
 80065a8:	200000d8 	.word	0x200000d8
 80065ac:	200000e4 	.word	0x200000e4
 80065b0:	200000f0 	.word	0x200000f0
 80065b4:	200018b0 	.word	0x200018b0
 80065b8:	20001874 	.word	0x20001874
 80065bc:	20002f0c 	.word	0x20002f0c

080065c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b094      	sub	sp, #80	; 0x50
 80065c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065c6:	f107 031c 	add.w	r3, r7, #28
 80065ca:	2234      	movs	r2, #52	; 0x34
 80065cc:	2100      	movs	r1, #0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f006 fd6c 	bl	800d0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	609a      	str	r2, [r3, #8]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80065e4:	f003 f808 	bl	80095f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <SystemClock_Config+0xd8>)
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	4a2a      	ldr	r2, [pc, #168]	; (8006698 <SystemClock_Config+0xd8>)
 80065ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f2:	6413      	str	r3, [r2, #64]	; 0x40
 80065f4:	4b28      	ldr	r3, [pc, #160]	; (8006698 <SystemClock_Config+0xd8>)
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fc:	607b      	str	r3, [r7, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006600:	4b26      	ldr	r3, [pc, #152]	; (800669c <SystemClock_Config+0xdc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a25      	ldr	r2, [pc, #148]	; (800669c <SystemClock_Config+0xdc>)
 8006606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4b23      	ldr	r3, [pc, #140]	; (800669c <SystemClock_Config+0xdc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006618:	2301      	movs	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800661c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006622:	2302      	movs	r3, #2
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800662a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800662c:	2304      	movs	r3, #4
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006630:	23d8      	movs	r3, #216	; 0xd8
 8006632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006634:	2302      	movs	r3, #2
 8006636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006638:	2309      	movs	r3, #9
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800663c:	2302      	movs	r3, #2
 800663e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006640:	f107 031c 	add.w	r3, r7, #28
 8006644:	4618      	mov	r0, r3
 8006646:	f003 f837 	bl	80096b8 <HAL_RCC_OscConfig>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006650:	f000 f826 	bl	80066a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006654:	f002 ffe0 	bl	8009618 <HAL_PWREx_EnableOverDrive>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800665e:	f000 f81f 	bl	80066a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006662:	230f      	movs	r3, #15
 8006664:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006666:	2302      	movs	r3, #2
 8006668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800666e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006678:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	2107      	movs	r1, #7
 8006680:	4618      	mov	r0, r3
 8006682:	f003 fac7 	bl	8009c14 <HAL_RCC_ClockConfig>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800668c:	f000 f808 	bl	80066a0 <Error_Handler>
  }
}
 8006690:	bf00      	nop
 8006692:	3750      	adds	r7, #80	; 0x50
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	40007000 	.word	0x40007000

080066a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80066a4:	e7fe      	b.n	80066a4 <Error_Handler+0x4>
	...

080066a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80066ac:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <MX_RNG_Init+0x20>)
 80066ae:	4a07      	ldr	r2, [pc, #28]	; (80066cc <MX_RNG_Init+0x24>)
 80066b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80066b2:	4805      	ldr	r0, [pc, #20]	; (80066c8 <MX_RNG_Init+0x20>)
 80066b4:	f004 f8fc 	bl	800a8b0 <HAL_RNG_Init>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80066be:	f7ff ffef 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20002e48 	.word	0x20002e48
 80066cc:	50060800 	.word	0x50060800

080066d0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b0a8      	sub	sp, #160	; 0xa0
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066d8:	f107 0310 	add.w	r3, r7, #16
 80066dc:	2290      	movs	r2, #144	; 0x90
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f006 fce3 	bl	800d0ac <memset>
  if(rngHandle->Instance==RNG)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a11      	ldr	r2, [pc, #68]	; (8006730 <HAL_RNG_MspInit+0x60>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d11b      	bne.n	8006728 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80066f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80066f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	4618      	mov	r0, r3
 8006702:	f003 fcad 	bl	800a060 <HAL_RCCEx_PeriphCLKConfig>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800670c:	f7ff ffc8 	bl	80066a0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006710:	4b08      	ldr	r3, [pc, #32]	; (8006734 <HAL_RNG_MspInit+0x64>)
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	4a07      	ldr	r2, [pc, #28]	; (8006734 <HAL_RNG_MspInit+0x64>)
 8006716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671a:	6353      	str	r3, [r2, #52]	; 0x34
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <HAL_RNG_MspInit+0x64>)
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006728:	bf00      	nop
 800672a:	37a0      	adds	r7, #160	; 0xa0
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	50060800 	.word	0x50060800
 8006734:	40023800 	.word	0x40023800

08006738 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <MX_SPI5_Init+0x74>)
 800673e:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <MX_SPI5_Init+0x78>)
 8006740:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006742:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <MX_SPI5_Init+0x74>)
 8006744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006748:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <MX_SPI5_Init+0x74>)
 800674c:	2200      	movs	r2, #0
 800674e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <MX_SPI5_Init+0x74>)
 8006752:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006756:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <MX_SPI5_Init+0x74>)
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <MX_SPI5_Init+0x74>)
 8006760:	2200      	movs	r2, #0
 8006762:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006764:	4b11      	ldr	r3, [pc, #68]	; (80067ac <MX_SPI5_Init+0x74>)
 8006766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800676a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <MX_SPI5_Init+0x74>)
 800676e:	2200      	movs	r2, #0
 8006770:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <MX_SPI5_Init+0x74>)
 8006774:	2200      	movs	r2, #0
 8006776:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <MX_SPI5_Init+0x74>)
 800677a:	2200      	movs	r2, #0
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <MX_SPI5_Init+0x74>)
 8006780:	2200      	movs	r2, #0
 8006782:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <MX_SPI5_Init+0x74>)
 8006786:	2207      	movs	r2, #7
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <MX_SPI5_Init+0x74>)
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006790:	4b06      	ldr	r3, [pc, #24]	; (80067ac <MX_SPI5_Init+0x74>)
 8006792:	2200      	movs	r2, #0
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006796:	4805      	ldr	r0, [pc, #20]	; (80067ac <MX_SPI5_Init+0x74>)
 8006798:	f004 f8b4 	bl	800a904 <HAL_SPI_Init>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80067a2:	f7ff ff7d 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20002e58 	.word	0x20002e58
 80067b0:	40015000 	.word	0x40015000

080067b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	; 0x28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067bc:	f107 0314 	add.w	r3, r7, #20
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	609a      	str	r2, [r3, #8]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a17      	ldr	r2, [pc, #92]	; (8006830 <HAL_SPI_MspInit+0x7c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d128      	bne.n	8006828 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <HAL_SPI_MspInit+0x80>)
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	4a16      	ldr	r2, [pc, #88]	; (8006834 <HAL_SPI_MspInit+0x80>)
 80067dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067e0:	6453      	str	r3, [r2, #68]	; 0x44
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_SPI_MspInit+0x80>)
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_SPI_MspInit+0x80>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <HAL_SPI_MspInit+0x80>)
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6313      	str	r3, [r2, #48]	; 0x30
 80067fa:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <HAL_SPI_MspInit+0x80>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006806:	f44f 7360 	mov.w	r3, #896	; 0x380
 800680a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680c:	2302      	movs	r3, #2
 800680e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006814:	2303      	movs	r3, #3
 8006816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006818:	2305      	movs	r3, #5
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	4619      	mov	r1, r3
 8006822:	4805      	ldr	r0, [pc, #20]	; (8006838 <HAL_SPI_MspInit+0x84>)
 8006824:	f002 fcf2 	bl	800920c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8006828:	bf00      	nop
 800682a:	3728      	adds	r7, #40	; 0x28
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40015000 	.word	0x40015000
 8006834:	40023800 	.word	0x40023800
 8006838:	40021400 	.word	0x40021400

0800683c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <HAL_MspInit+0x44>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <HAL_MspInit+0x44>)
 8006848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <HAL_MspInit+0x44>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <HAL_MspInit+0x44>)
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685e:	4a08      	ldr	r2, [pc, #32]	; (8006880 <HAL_MspInit+0x44>)
 8006860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006864:	6453      	str	r3, [r2, #68]	; 0x44
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_MspInit+0x44>)
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006872:	2005      	movs	r0, #5
 8006874:	f002 f910 	bl	8008a98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006878:	bf00      	nop
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40023800 	.word	0x40023800

08006884 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006888:	f001 fbce 	bl	8008028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800688c:	bf00      	nop
 800688e:	bd80      	pop	{r7, pc}

08006890 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006894:	2008      	movs	r0, #8
 8006896:	f002 fe97 	bl	80095c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800689a:	bf00      	nop
 800689c:	bd80      	pop	{r7, pc}

0800689e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80068a2:	2010      	movs	r0, #16
 80068a4:	f002 fe90 	bl	80095c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80068a8:	bf00      	nop
 80068aa:	bd80      	pop	{r7, pc}

080068ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80068b0:	4802      	ldr	r0, [pc, #8]	; (80068bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80068b2:	f004 fcc8 	bl	800b246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80068b6:	bf00      	nop
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20002ec0 	.word	0x20002ec0

080068c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80068c4:	4802      	ldr	r0, [pc, #8]	; (80068d0 <TIM2_IRQHandler+0x10>)
 80068c6:	f004 fcbe 	bl	800b246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20002f0c 	.word	0x20002f0c

080068d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80068d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80068dc:	f002 fe74 	bl	80095c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80068e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80068e4:	f002 fe70 	bl	80095c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80068e8:	bf00      	nop
 80068ea:	bd80      	pop	{r7, pc}

080068ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068f0:	4802      	ldr	r0, [pc, #8]	; (80068fc <DMA2_Stream0_IRQHandler+0x10>)
 80068f2:	f002 fa21 	bl	8008d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000bb8 	.word	0x20000bb8

08006900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
	return 1;
 8006904:	2301      	movs	r3, #1
}
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <_kill>:

int _kill(int pid, int sig)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800691a:	f006 fbe3 	bl	800d0e4 <__errno>
 800691e:	4603      	mov	r3, r0
 8006920:	2216      	movs	r2, #22
 8006922:	601a      	str	r2, [r3, #0]
	return -1;
 8006924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <_exit>:

void _exit (int status)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff ffe7 	bl	8006910 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006942:	e7fe      	b.n	8006942 <_exit+0x12>

08006944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e00a      	b.n	800696c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006956:	f3af 8000 	nop.w
 800695a:	4601      	mov	r1, r0
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	60ba      	str	r2, [r7, #8]
 8006962:	b2ca      	uxtb	r2, r1
 8006964:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	3301      	adds	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	dbf0      	blt.n	8006956 <_read+0x12>
	}

return len;
 8006974:	687b      	ldr	r3, [r7, #4]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e009      	b.n	80069a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	60ba      	str	r2, [r7, #8]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	3301      	adds	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	dbf1      	blt.n	8006990 <_write+0x12>
	}
	return len;
 80069ac:	687b      	ldr	r3, [r7, #4]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <_close>:

int _close(int file)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
	return -1;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069de:	605a      	str	r2, [r3, #4]
	return 0;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <_isatty>:

int _isatty(int file)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
	return 1;
 80069f6:	2301      	movs	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a28:	4a14      	ldr	r2, [pc, #80]	; (8006a7c <_sbrk+0x5c>)
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <_sbrk+0x60>)
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a34:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <_sbrk+0x64>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <_sbrk+0x64>)
 8006a3e:	4a12      	ldr	r2, [pc, #72]	; (8006a88 <_sbrk+0x68>)
 8006a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <_sbrk+0x64>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4413      	add	r3, r2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d207      	bcs.n	8006a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a50:	f006 fb48 	bl	800d0e4 <__errno>
 8006a54:	4603      	mov	r3, r0
 8006a56:	220c      	movs	r2, #12
 8006a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5e:	e009      	b.n	8006a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a60:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <_sbrk+0x64>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <_sbrk+0x64>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	4a05      	ldr	r2, [pc, #20]	; (8006a84 <_sbrk+0x64>)
 8006a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20080000 	.word	0x20080000
 8006a80:	00000400 	.word	0x00000400
 8006a84:	20002ebc 	.word	0x20002ebc
 8006a88:	20003130 	.word	0x20003130

08006a8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a90:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <SystemInit+0x5c>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <SystemInit+0x5c>)
 8006a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006aa0:	4b12      	ldr	r3, [pc, #72]	; (8006aec <SystemInit+0x60>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a11      	ldr	r2, [pc, #68]	; (8006aec <SystemInit+0x60>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <SystemInit+0x60>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <SystemInit+0x60>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	490d      	ldr	r1, [pc, #52]	; (8006aec <SystemInit+0x60>)
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <SystemInit+0x64>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006abe:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <SystemInit+0x60>)
 8006ac0:	4a0c      	ldr	r2, [pc, #48]	; (8006af4 <SystemInit+0x68>)
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006ac4:	4b09      	ldr	r3, [pc, #36]	; (8006aec <SystemInit+0x60>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a08      	ldr	r2, [pc, #32]	; (8006aec <SystemInit+0x60>)
 8006aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ace:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <SystemInit+0x60>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ad6:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <SystemInit+0x5c>)
 8006ad8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006adc:	609a      	str	r2, [r3, #8]
#endif
}
 8006ade:	bf00      	nop
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	e000ed00 	.word	0xe000ed00
 8006aec:	40023800 	.word	0x40023800
 8006af0:	fef6ffff 	.word	0xfef6ffff
 8006af4:	24003010 	.word	0x24003010

08006af8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006afe:	f107 0310 	add.w	r3, r7, #16
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b0c:	1d3b      	adds	r3, r7, #4
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	605a      	str	r2, [r3, #4]
 8006b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b16:	4b21      	ldr	r3, [pc, #132]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <MX_TIM1_Init+0xa8>)
 8006b1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 8006b1c:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b1e:	f640 026f 	movw	r2, #2159	; 0x86f
 8006b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b24:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8006b2a:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006b32:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b40:	4b16      	ldr	r3, [pc, #88]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006b46:	4815      	ldr	r0, [pc, #84]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b48:	f004 fa7e 	bl	800b048 <HAL_TIM_Base_Init>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8006b52:	f7ff fda5 	bl	80066a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006b5c:	f107 0310 	add.w	r3, r7, #16
 8006b60:	4619      	mov	r1, r3
 8006b62:	480e      	ldr	r0, [pc, #56]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b64:	f004 fc8e 	bl	800b484 <HAL_TIM_ConfigClockSource>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006b6e:	f7ff fd97 	bl	80066a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4806      	ldr	r0, [pc, #24]	; (8006b9c <MX_TIM1_Init+0xa4>)
 8006b84:	f004 feaa 	bl	800b8dc <HAL_TIMEx_MasterConfigSynchronization>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8006b8e:	f7ff fd87 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006b92:	bf00      	nop
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20002ec0 	.word	0x20002ec0
 8006ba0:	40010000 	.word	0x40010000

08006ba4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006baa:	f107 0310 	add.w	r3, r7, #16
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
 8006bb4:	609a      	str	r2, [r3, #8]
 8006bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bb8:	1d3b      	adds	r3, r7, #4
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	605a      	str	r2, [r3, #4]
 8006bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006bc2:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8006bca:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006bcc:	f240 4237 	movw	r2, #1079	; 0x437
 8006bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006bda:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <MX_TIM2_Init+0x9c>)
 8006bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bde:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006bea:	4814      	ldr	r0, [pc, #80]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006bec:	f004 fa2c 	bl	800b048 <HAL_TIM_Base_Init>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006bf6:	f7ff fd53 	bl	80066a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006c00:	f107 0310 	add.w	r3, r7, #16
 8006c04:	4619      	mov	r1, r3
 8006c06:	480d      	ldr	r0, [pc, #52]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006c08:	f004 fc3c 	bl	800b484 <HAL_TIM_ConfigClockSource>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006c12:	f7ff fd45 	bl	80066a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006c1e:	1d3b      	adds	r3, r7, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4806      	ldr	r0, [pc, #24]	; (8006c3c <MX_TIM2_Init+0x98>)
 8006c24:	f004 fe5a 	bl	800b8dc <HAL_TIMEx_MasterConfigSynchronization>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006c2e:	f7ff fd37 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006c32:	bf00      	nop
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20002f0c 	.word	0x20002f0c
 8006c40:	000186a0 	.word	0x000186a0

08006c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <HAL_TIM_Base_MspInit+0x78>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d114      	bne.n	8006c80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <HAL_TIM_Base_MspInit+0x7c>)
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <HAL_TIM_Base_MspInit+0x7c>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6453      	str	r3, [r2, #68]	; 0x44
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <HAL_TIM_Base_MspInit+0x7c>)
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2102      	movs	r1, #2
 8006c72:	2019      	movs	r0, #25
 8006c74:	f001 ff1b 	bl	8008aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006c78:	2019      	movs	r0, #25
 8006c7a:	f001 ff34 	bl	8008ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006c7e:	e018      	b.n	8006cb2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d113      	bne.n	8006cb2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <HAL_TIM_Base_MspInit+0x7c>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	4a0c      	ldr	r2, [pc, #48]	; (8006cc0 <HAL_TIM_Base_MspInit+0x7c>)
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	6413      	str	r3, [r2, #64]	; 0x40
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_TIM_Base_MspInit+0x7c>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	201c      	movs	r0, #28
 8006ca8:	f001 ff01 	bl	8008aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006cac:	201c      	movs	r0, #28
 8006cae:	f001 ff1a 	bl	8008ae6 <HAL_NVIC_EnableIRQ>
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40023800 	.word	0x40023800

08006cc4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006cc8:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <MX_USART3_UART_Init+0x5c>)
 8006ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cea:	220c      	movs	r2, #12
 8006cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006d06:	4805      	ldr	r0, [pc, #20]	; (8006d1c <MX_USART3_UART_Init+0x58>)
 8006d08:	f004 fe94 	bl	800ba34 <HAL_UART_Init>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8006d12:	f7ff fcc5 	bl	80066a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006d16:	bf00      	nop
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20002f58 	.word	0x20002f58
 8006d20:	40004800 	.word	0x40004800

08006d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b0ae      	sub	sp, #184	; 0xb8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	605a      	str	r2, [r3, #4]
 8006d36:	609a      	str	r2, [r3, #8]
 8006d38:	60da      	str	r2, [r3, #12]
 8006d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d3c:	f107 0314 	add.w	r3, r7, #20
 8006d40:	2290      	movs	r2, #144	; 0x90
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f006 f9b1 	bl	800d0ac <memset>
  if(uartHandle->Instance==USART3)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <HAL_UART_MspInit+0xb4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d13c      	bne.n	8006dce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d5e:	f107 0314 	add.w	r3, r7, #20
 8006d62:	4618      	mov	r0, r3
 8006d64:	f003 f97c 	bl	800a060 <HAL_RCCEx_PeriphCLKConfig>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006d6e:	f7ff fc97 	bl	80066a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d72:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_UART_MspInit+0xb8>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <HAL_UART_MspInit+0xb8>)
 8006d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7e:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <HAL_UART_MspInit+0xb8>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d8a:	4b14      	ldr	r3, [pc, #80]	; (8006ddc <HAL_UART_MspInit+0xb8>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_UART_MspInit+0xb8>)
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	6313      	str	r3, [r2, #48]	; 0x30
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <HAL_UART_MspInit+0xb8>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006daa:	2302      	movs	r3, #2
 8006dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db6:	2303      	movs	r3, #3
 8006db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006dbc:	2307      	movs	r3, #7
 8006dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4805      	ldr	r0, [pc, #20]	; (8006de0 <HAL_UART_MspInit+0xbc>)
 8006dca:	f002 fa1f 	bl	800920c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006dce:	bf00      	nop
 8006dd0:	37b8      	adds	r7, #184	; 0xb8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	40004800 	.word	0x40004800
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	40020c00 	.word	0x40020c00

08006de4 <mappingValue>:
#include "utility.h"
extern UART_HandleTypeDef huart3;

float mappingValue(float val,float preMin,float preMax,float postMin,float postMax){
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	ed87 0a05 	vstr	s0, [r7, #20]
 8006dee:	edc7 0a04 	vstr	s1, [r7, #16]
 8006df2:	ed87 1a03 	vstr	s2, [r7, #12]
 8006df6:	edc7 1a02 	vstr	s3, [r7, #8]
 8006dfa:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (val-preMin)/(preMax-preMin)*(postMax-postMin)+postMin;
 8006dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1a:	edd7 6a01 	vldr	s13, [r7, #4]
 8006e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
  }
 8006e32:	eeb0 0a67 	vmov.f32	s0, s15
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <clamp>:
int clamp(int min,int value,int max){
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
	if(min>value)
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	dd01      	ble.n	8006e58 <clamp+0x18>
		return min;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	e006      	b.n	8006e66 <clamp+0x26>
	else if(max<value)
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	da01      	bge.n	8006e64 <clamp+0x24>
		return max;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	e000      	b.n	8006e66 <clamp+0x26>
	else
		return value;
 8006e64:	68bb      	ldr	r3, [r7, #8]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <inBetween>:
bool inBetween(int min,int value,int max){
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
	return (min<=value)&&(value<=max);
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	dc05      	bgt.n	8006e92 <inBetween+0x20>
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	dc01      	bgt.n	8006e92 <inBetween+0x20>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <inBetween+0x22>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <printOut>:
	char ch1;
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
	HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
	return ch1;
}
void printOut(char* str){
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8006eb0:	bf00      	nop
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <printOut+0x38>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d1f8      	bne.n	8006eb2 <printOut+0xa>
		HAL_UART_Transmit(&huart3, (uint8_t*) str,strlen(str),1000);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7f9 fa0d 	bl	80002e0 <strlen>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <printOut+0x38>)
 8006ed2:	f004 fdfd 	bl	800bad0 <HAL_UART_Transmit>

}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20002f58 	.word	0x20002f58

08006ee4 <QueueElement_init>:
	tim->Instance -> CCR2 = (1000-1) * dutyCycle;
}
void setBlue(TIM_HandleTypeDef* tim,float dutyCycle){
	tim->Instance -> CCR3 = (1000-1) * dutyCycle;
}
QueueElement* QueueElement_init(void* value){
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	QueueElement* element = malloc(sizeof(QueueElement));
 8006eec:	200c      	movs	r0, #12
 8006eee:	f005 fd55 	bl	800c99c <malloc>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	60fb      	str	r3, [r7, #12]
	element->value = value;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	601a      	str	r2, [r3, #0]
	element->previous = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	609a      	str	r2, [r3, #8]
	element->next = NULL;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]
	return element;
 8006f08:	68fb      	ldr	r3, [r7, #12]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <DeleteQueueElement>:
	q->front = NULL;
	q->back = NULL;
	q->size = 0;
	return q;
}
void DeleteQueueElement(Queue* q,QueueElement* element){
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
	if(q==NULL||element==NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d02c      	beq.n	8006f7c <DeleteQueueElement+0x6a>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d029      	beq.n	8006f7c <DeleteQueueElement+0x6a>
		return;
	q->size--;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	1e5a      	subs	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]
	if(element->next == NULL){
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <DeleteQueueElement+0x32>
		q->back = element->previous;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	e004      	b.n	8006f4e <DeleteQueueElement+0x3c>
	}
	else{
		element->next->previous = element->previous;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	6892      	ldr	r2, [r2, #8]
 8006f4c:	609a      	str	r2, [r3, #8]
	}
	if(element->previous == NULL){
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <DeleteQueueElement+0x4e>
		q->front = element->next;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e004      	b.n	8006f6a <DeleteQueueElement+0x58>
	}
	else{
		element->previous->next = element->next;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	6852      	ldr	r2, [r2, #4]
 8006f68:	605a      	str	r2, [r3, #4]
	}
	free(element->value);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f005 fd1c 	bl	800c9ac <free>
	free(element);
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	f005 fd19 	bl	800c9ac <free>
 8006f7a:	e000      	b.n	8006f7e <DeleteQueueElement+0x6c>
		return;
 8006f7c:	bf00      	nop
}
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <enqueue>:
QueueElement* enqueue(Queue* q,void* ptr){
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	if(q == NULL&&ptr == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <enqueue+0x1a>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <enqueue+0x1a>
		return NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e022      	b.n	8006fe4 <enqueue+0x60>
	QueueElement* element = QueueElement_init(ptr);
 8006f9e:	6838      	ldr	r0, [r7, #0]
 8006fa0:	f7ff ffa0 	bl	8006ee4 <QueueElement_init>
 8006fa4:	60f8      	str	r0, [r7, #12]
	if(q->size){
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <enqueue+0x3c>
		q->back->next =element;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]
		element->previous = q->back;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	609a      	str	r2, [r3, #8]
 8006fbe:	e008      	b.n	8006fd2 <enqueue+0x4e>
	}
	else{
		q->front = element;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]
		element->previous = NULL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	609a      	str	r2, [r3, #8]
		element->next = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	605a      	str	r2, [r3, #4]
	}
	q->size++;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	609a      	str	r2, [r3, #8]
	q->back=element;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	605a      	str	r2, [r3, #4]
	return element;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <dequeue>:
void dequeue(Queue* q){
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	if(q != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <dequeue+0x1a>
		DeleteQueueElement(q,q->front);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff86 	bl	8006f12 <DeleteQueueElement>

}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007048 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007016:	e003      	b.n	8007020 <LoopCopyDataInit>

08007018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800701a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800701c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800701e:	3104      	adds	r1, #4

08007020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007020:	480b      	ldr	r0, [pc, #44]	; (8007050 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007028:	d3f6      	bcc.n	8007018 <CopyDataInit>
  ldr  r2, =_sbss
 800702a:	4a0b      	ldr	r2, [pc, #44]	; (8007058 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800702c:	e002      	b.n	8007034 <LoopFillZerobss>

0800702e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800702e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007030:	f842 3b04 	str.w	r3, [r2], #4

08007034 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007034:	4b09      	ldr	r3, [pc, #36]	; (800705c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007036:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007038:	d3f9      	bcc.n	800702e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800703a:	f7ff fd27 	bl	8006a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800703e:	f006 f857 	bl	800d0f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007042:	f7ff fa0b 	bl	800645c <main>
  bx  lr    
 8007046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007048:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800704c:	080906a8 	.word	0x080906a8
  ldr  r0, =_sdata
 8007050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007054:	20000b54 	.word	0x20000b54
  ldr  r2, =_sbss
 8007058:	20000b54 	.word	0x20000b54
  ldr  r3, = _ebss
 800705c:	20003130 	.word	0x20003130

08007060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007060:	e7fe      	b.n	8007060 <ADC_IRQHandler>

08007062 <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8007062:	b590      	push	{r4, r7, lr}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	461a      	mov	r2, r3
 8007070:	4623      	mov	r3, r4
 8007072:	80fb      	strh	r3, [r7, #6]
 8007074:	4603      	mov	r3, r0
 8007076:	80bb      	strh	r3, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
 800707c:	4613      	mov	r3, r2
 800707e:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8007096:	887a      	ldrh	r2, [r7, #2]
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80070a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80070ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	d501      	bpl.n	80070ba <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 80070b6:	2301      	movs	r3, #1
 80070b8:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 80070c0:	883a      	ldrh	r2, [r7, #0]
 80070c2:	88bb      	ldrh	r3, [r7, #4]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ce:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80070d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80070d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	d501      	bpl.n	80070e4 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80070e0:	2301      	movs	r3, #1
 80070e2:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	82fb      	strh	r3, [r7, #22]
 80070f2:	e003      	b.n	80070fc <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	887b      	ldrh	r3, [r7, #2]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80070fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070fe:	8afa      	ldrh	r2, [r7, #22]
 8007100:	88b9      	ldrh	r1, [r7, #4]
 8007102:	88f8      	ldrh	r0, [r7, #6]
 8007104:	f000 fd8c 	bl	8007c20 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8007108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800710a:	8afa      	ldrh	r2, [r7, #22]
 800710c:	8839      	ldrh	r1, [r7, #0]
 800710e:	88f8      	ldrh	r0, [r7, #6]
 8007110:	f000 fd86 	bl	8007c20 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8007114:	7cbb      	ldrb	r3, [r7, #18]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800711a:	883a      	ldrh	r2, [r7, #0]
 800711c:	88bb      	ldrh	r3, [r7, #4]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	82bb      	strh	r3, [r7, #20]
 8007122:	e003      	b.n	800712c <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8007124:	88ba      	ldrh	r2, [r7, #4]
 8007126:	883b      	ldrh	r3, [r7, #0]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800712c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800712e:	8aba      	ldrh	r2, [r7, #20]
 8007130:	88b9      	ldrh	r1, [r7, #4]
 8007132:	88f8      	ldrh	r0, [r7, #6]
 8007134:	f000 fdb8 	bl	8007ca8 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8007138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800713a:	8aba      	ldrh	r2, [r7, #20]
 800713c:	88b9      	ldrh	r1, [r7, #4]
 800713e:	8878      	ldrh	r0, [r7, #2]
 8007140:	f000 fdb2 	bl	8007ca8 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8007144:	8afb      	ldrh	r3, [r7, #22]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800714a:	8abb      	ldrh	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8007150:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007152:	8839      	ldrh	r1, [r7, #0]
 8007154:	887b      	ldrh	r3, [r7, #2]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fc2c 	bl	80079b4 <ILI9341_Draw_Pixel>
	}
	
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bd90      	pop	{r4, r7, pc}

08007164 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b089      	sub	sp, #36	; 0x24
 8007168:	af02      	add	r7, sp, #8
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4623      	mov	r3, r4
 8007174:	80fb      	strh	r3, [r7, #6]
 8007176:	4603      	mov	r3, r0
 8007178:	80bb      	strh	r3, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	807b      	strh	r3, [r7, #2]
 800717e:	4613      	mov	r3, r2
 8007180:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8007182:	2300      	movs	r3, #0
 8007184:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800719e:	887a      	ldrh	r2, [r7, #2]
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da01      	bge.n	80071b0 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80071ac:	2301      	movs	r3, #1
 80071ae:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80071b4:	883a      	ldrh	r2, [r7, #0]
 80071b6:	88bb      	ldrh	r3, [r7, #4]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da01      	bge.n	80071c6 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80071c2:	2301      	movs	r3, #1
 80071c4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80071c6:	7cfb      	ldrb	r3, [r7, #19]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80071cc:	887a      	ldrh	r2, [r7, #2]
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	823b      	strh	r3, [r7, #16]
 80071d8:	e005      	b.n	80071e6 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80071e2:	887b      	ldrh	r3, [r7, #2]
 80071e4:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80071e6:	7cbb      	ldrb	r3, [r7, #18]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80071ec:	883a      	ldrh	r2, [r7, #0]
 80071ee:	88bb      	ldrh	r3, [r7, #4]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80071f4:	88bb      	ldrh	r3, [r7, #4]
 80071f6:	81fb      	strh	r3, [r7, #14]
 80071f8:	e005      	b.n	8007206 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80071fa:	88ba      	ldrh	r2, [r7, #4]
 80071fc:	883b      	ldrh	r3, [r7, #0]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8007202:	883b      	ldrh	r3, [r7, #0]
 8007204:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8007206:	8abc      	ldrh	r4, [r7, #20]
 8007208:	8afa      	ldrh	r2, [r7, #22]
 800720a:	89f9      	ldrh	r1, [r7, #14]
 800720c:	8a38      	ldrh	r0, [r7, #16]
 800720e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4623      	mov	r3, r4
 8007214:	f000 fca8 	bl	8007b68 <ILI9341_Draw_Rectangle>
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd90      	pop	{r4, r7, pc}

08007220 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b089      	sub	sp, #36	; 0x24
 8007224:	af02      	add	r7, sp, #8
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	4611      	mov	r1, r2
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	71fb      	strb	r3, [r7, #7]
 8007232:	4603      	mov	r3, r0
 8007234:	71bb      	strb	r3, [r7, #6]
 8007236:	460b      	mov	r3, r1
 8007238:	717b      	strb	r3, [r7, #5]
 800723a:	4613      	mov	r3, r2
 800723c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	2b1f      	cmp	r3, #31
 8007246:	d802      	bhi.n	800724e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	71fb      	strb	r3, [r7, #7]
 800724c:	e002      	b.n	8007254 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	3b20      	subs	r3, #32
 8007252:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007254:	2300      	movs	r3, #0
 8007256:	753b      	strb	r3, [r7, #20]
 8007258:	e012      	b.n	8007280 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800725a:	7dfa      	ldrb	r2, [r7, #23]
 800725c:	7d38      	ldrb	r0, [r7, #20]
 800725e:	7d39      	ldrb	r1, [r7, #20]
 8007260:	4c3b      	ldr	r4, [pc, #236]	; (8007350 <ILI9341_Draw_Char+0x130>)
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4423      	add	r3, r4
 800726c:	4403      	add	r3, r0
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	f101 0318 	add.w	r3, r1, #24
 8007274:	443b      	add	r3, r7
 8007276:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800727a:	7d3b      	ldrb	r3, [r7, #20]
 800727c:	3301      	adds	r3, #1
 800727e:	753b      	strb	r3, [r7, #20]
 8007280:	7d3b      	ldrb	r3, [r7, #20]
 8007282:	2b05      	cmp	r3, #5
 8007284:	d9e9      	bls.n	800725a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8007286:	79bb      	ldrb	r3, [r7, #6]
 8007288:	b298      	uxth	r0, r3
 800728a:	797b      	ldrb	r3, [r7, #5]
 800728c:	b299      	uxth	r1, r3
 800728e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007290:	461a      	mov	r2, r3
 8007292:	0052      	lsls	r2, r2, #1
 8007294:	4413      	add	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	b29c      	uxth	r4, r3
 80072a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4623      	mov	r3, r4
 80072a6:	f000 fc5f 	bl	8007b68 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80072aa:	2300      	movs	r3, #0
 80072ac:	757b      	strb	r3, [r7, #21]
 80072ae:	e047      	b.n	8007340 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80072b0:	2300      	movs	r3, #0
 80072b2:	75bb      	strb	r3, [r7, #22]
 80072b4:	e03e      	b.n	8007334 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80072b6:	7d7b      	ldrb	r3, [r7, #21]
 80072b8:	3318      	adds	r3, #24
 80072ba:	443b      	add	r3, r7
 80072bc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80072c0:	461a      	mov	r2, r3
 80072c2:	7dbb      	ldrb	r3, [r7, #22]
 80072c4:	fa42 f303 	asr.w	r3, r2, r3
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02e      	beq.n	800732e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80072d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d110      	bne.n	80072f8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80072d6:	79bb      	ldrb	r3, [r7, #6]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	7d7b      	ldrb	r3, [r7, #21]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4413      	add	r3, r2
 80072e0:	b298      	uxth	r0, r3
 80072e2:	797b      	ldrb	r3, [r7, #5]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	7dbb      	ldrb	r3, [r7, #22]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	4413      	add	r3, r2
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f000 fb5f 	bl	80079b4 <ILI9341_Draw_Pixel>
 80072f6:	e01a      	b.n	800732e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80072f8:	79bb      	ldrb	r3, [r7, #6]
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	7d7b      	ldrb	r3, [r7, #21]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007302:	fb11 f303 	smulbb	r3, r1, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	4413      	add	r3, r2
 800730a:	b298      	uxth	r0, r3
 800730c:	797b      	ldrb	r3, [r7, #5]
 800730e:	b29a      	uxth	r2, r3
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	b29b      	uxth	r3, r3
 8007314:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007316:	fb11 f303 	smulbb	r3, r1, r3
 800731a:	b29b      	uxth	r3, r3
 800731c:	4413      	add	r3, r2
 800731e:	b299      	uxth	r1, r3
 8007320:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007322:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	4623      	mov	r3, r4
 800732a:	f000 fc1d 	bl	8007b68 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800732e:	7dbb      	ldrb	r3, [r7, #22]
 8007330:	3301      	adds	r3, #1
 8007332:	75bb      	strb	r3, [r7, #22]
 8007334:	7dbb      	ldrb	r3, [r7, #22]
 8007336:	2b07      	cmp	r3, #7
 8007338:	d9bd      	bls.n	80072b6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800733a:	7d7b      	ldrb	r3, [r7, #21]
 800733c:	3301      	adds	r3, #1
 800733e:	757b      	strb	r3, [r7, #21]
 8007340:	7d7b      	ldrb	r3, [r7, #21]
 8007342:	2b05      	cmp	r3, #5
 8007344:	d9b4      	bls.n	80072b0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	bd90      	pop	{r4, r7, pc}
 8007350:	08090084 	.word	0x08090084

08007354 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b085      	sub	sp, #20
 8007358:	af02      	add	r7, sp, #8
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	461a      	mov	r2, r3
 8007362:	4603      	mov	r3, r0
 8007364:	70fb      	strb	r3, [r7, #3]
 8007366:	460b      	mov	r3, r1
 8007368:	70bb      	strb	r3, [r7, #2]
 800736a:	4613      	mov	r3, r2
 800736c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800736e:	e017      	b.n	80073a0 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	7818      	ldrb	r0, [r3, #0]
 8007378:	883c      	ldrh	r4, [r7, #0]
 800737a:	78ba      	ldrb	r2, [r7, #2]
 800737c:	78f9      	ldrb	r1, [r7, #3]
 800737e:	8bbb      	ldrh	r3, [r7, #28]
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	8b3b      	ldrh	r3, [r7, #24]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4623      	mov	r3, r4
 8007388:	f7ff ff4a 	bl	8007220 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800738c:	8b3b      	ldrh	r3, [r7, #24]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	0052      	lsls	r2, r2, #1
 8007394:	4413      	add	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	4413      	add	r3, r2
 800739e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e3      	bne.n	8007370 <ILI9341_Draw_Text+0x1c>
    }
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd90      	pop	{r4, r7, pc}
	...

080073b4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80073b8:	f7ff f9be 	bl	8006738 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80073bc:	f7fc fb08 	bl	80039d0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80073c0:	2200      	movs	r2, #0
 80073c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073c6:	4802      	ldr	r0, [pc, #8]	; (80073d0 <ILI9341_SPI_Init+0x1c>)
 80073c8:	f002 f8e4 	bl	8009594 <HAL_GPIO_WritePin>
}
 80073cc:	bf00      	nop
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40020800 	.word	0x40020800

080073d4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80073de:	1df9      	adds	r1, r7, #7
 80073e0:	2301      	movs	r3, #1
 80073e2:	2201      	movs	r2, #1
 80073e4:	4803      	ldr	r0, [pc, #12]	; (80073f4 <ILI9341_SPI_Send+0x20>)
 80073e6:	f003 fb38 	bl	800aa5a <HAL_SPI_Transmit>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20002e58 	.word	0x20002e58

080073f8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007402:	2200      	movs	r2, #0
 8007404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007408:	480b      	ldr	r0, [pc, #44]	; (8007438 <ILI9341_Write_Command+0x40>)
 800740a:	f002 f8c3 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800740e:	2200      	movs	r2, #0
 8007410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007414:	4808      	ldr	r0, [pc, #32]	; (8007438 <ILI9341_Write_Command+0x40>)
 8007416:	f002 f8bd 	bl	8009594 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff ffd9 	bl	80073d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8007422:	2201      	movs	r2, #1
 8007424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007428:	4803      	ldr	r0, [pc, #12]	; (8007438 <ILI9341_Write_Command+0x40>)
 800742a:	f002 f8b3 	bl	8009594 <HAL_GPIO_WritePin>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40020800 	.word	0x40020800

0800743c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007446:	2201      	movs	r2, #1
 8007448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800744c:	480b      	ldr	r0, [pc, #44]	; (800747c <ILI9341_Write_Data+0x40>)
 800744e:	f002 f8a1 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007452:	2200      	movs	r2, #0
 8007454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007458:	4808      	ldr	r0, [pc, #32]	; (800747c <ILI9341_Write_Data+0x40>)
 800745a:	f002 f89b 	bl	8009594 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff ffb7 	bl	80073d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007466:	2201      	movs	r2, #1
 8007468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800746c:	4803      	ldr	r0, [pc, #12]	; (800747c <ILI9341_Write_Data+0x40>)
 800746e:	f002 f891 	bl	8009594 <HAL_GPIO_WritePin>
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40020800 	.word	0x40020800

08007480 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	4623      	mov	r3, r4
 8007490:	80fb      	strh	r3, [r7, #6]
 8007492:	4603      	mov	r3, r0
 8007494:	80bb      	strh	r3, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	807b      	strh	r3, [r7, #2]
 800749a:	4613      	mov	r3, r2
 800749c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800749e:	202a      	movs	r0, #42	; 0x2a
 80074a0:	f7ff ffaa 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ffc5 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff ffc0 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80074bc:	887b      	ldrh	r3, [r7, #2]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ffb9 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80074ca:	887b      	ldrh	r3, [r7, #2]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff ffb4 	bl	800743c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80074d4:	202b      	movs	r0, #43	; 0x2b
 80074d6:	f7ff ff8f 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80074da:	88bb      	ldrh	r3, [r7, #4]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	b29b      	uxth	r3, r3
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff ffaa 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80074e8:	88bb      	ldrh	r3, [r7, #4]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff ffa5 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80074f2:	883b      	ldrh	r3, [r7, #0]
 80074f4:	0a1b      	lsrs	r3, r3, #8
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff ff9e 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8007500:	883b      	ldrh	r3, [r7, #0]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff ff99 	bl	800743c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800750a:	202c      	movs	r0, #44	; 0x2c
 800750c:	f7ff ff74 	bl	80073f8 <ILI9341_Write_Command>
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bd90      	pop	{r4, r7, pc}

08007518 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800751c:	2201      	movs	r2, #1
 800751e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007522:	480b      	ldr	r0, [pc, #44]	; (8007550 <ILI9341_Reset+0x38>)
 8007524:	f002 f836 	bl	8009594 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8007528:	20c8      	movs	r0, #200	; 0xc8
 800752a:	f000 fd9d 	bl	8008068 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800752e:	2200      	movs	r2, #0
 8007530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007534:	4806      	ldr	r0, [pc, #24]	; (8007550 <ILI9341_Reset+0x38>)
 8007536:	f002 f82d 	bl	8009594 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800753a:	20c8      	movs	r0, #200	; 0xc8
 800753c:	f000 fd94 	bl	8008068 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8007540:	2201      	movs	r2, #1
 8007542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007546:	4802      	ldr	r0, [pc, #8]	; (8007550 <ILI9341_Reset+0x38>)
 8007548:	f002 f824 	bl	8009594 <HAL_GPIO_WritePin>
}
 800754c:	bf00      	nop
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40020800 	.word	0x40020800

08007554 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8007562:	2036      	movs	r0, #54	; 0x36
 8007564:	f7ff ff48 	bl	80073f8 <ILI9341_Write_Command>
HAL_Delay(1);
 8007568:	2001      	movs	r0, #1
 800756a:	f000 fd7d 	bl	8008068 <HAL_Delay>
	
switch(screen_rotation) 
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d837      	bhi.n	80075e4 <ILI9341_Set_Rotation+0x90>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <ILI9341_Set_Rotation+0x28>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	0800758d 	.word	0x0800758d
 8007580:	080075a3 	.word	0x080075a3
 8007584:	080075b9 	.word	0x080075b9
 8007588:	080075cf 	.word	0x080075cf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800758c:	2048      	movs	r0, #72	; 0x48
 800758e:	f7ff ff55 	bl	800743c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007592:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <ILI9341_Set_Rotation+0x9c>)
 8007594:	22f0      	movs	r2, #240	; 0xf0
 8007596:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007598:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <ILI9341_Set_Rotation+0xa0>)
 800759a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800759e:	801a      	strh	r2, [r3, #0]
			break;
 80075a0:	e021      	b.n	80075e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80075a2:	2028      	movs	r0, #40	; 0x28
 80075a4:	f7ff ff4a 	bl	800743c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <ILI9341_Set_Rotation+0x9c>)
 80075aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80075ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80075b0:	4b10      	ldr	r3, [pc, #64]	; (80075f4 <ILI9341_Set_Rotation+0xa0>)
 80075b2:	22f0      	movs	r2, #240	; 0xf0
 80075b4:	801a      	strh	r2, [r3, #0]
			break;
 80075b6:	e016      	b.n	80075e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80075b8:	2088      	movs	r0, #136	; 0x88
 80075ba:	f7ff ff3f 	bl	800743c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80075be:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <ILI9341_Set_Rotation+0x9c>)
 80075c0:	22f0      	movs	r2, #240	; 0xf0
 80075c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80075c4:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <ILI9341_Set_Rotation+0xa0>)
 80075c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80075ca:	801a      	strh	r2, [r3, #0]
			break;
 80075cc:	e00b      	b.n	80075e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80075ce:	20e8      	movs	r0, #232	; 0xe8
 80075d0:	f7ff ff34 	bl	800743c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <ILI9341_Set_Rotation+0x9c>)
 80075d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80075da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <ILI9341_Set_Rotation+0xa0>)
 80075de:	22f0      	movs	r2, #240	; 0xf0
 80075e0:	801a      	strh	r2, [r3, #0]
			break;
 80075e2:	e000      	b.n	80075e6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80075e4:	bf00      	nop
	}
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20000982 	.word	0x20000982
 80075f4:	20000980 	.word	0x20000980

080075f8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80075fc:	2201      	movs	r2, #1
 80075fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007602:	4802      	ldr	r0, [pc, #8]	; (800760c <ILI9341_Enable+0x14>)
 8007604:	f001 ffc6 	bl	8009594 <HAL_GPIO_WritePin>
}
 8007608:	bf00      	nop
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40020800 	.word	0x40020800

08007610 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8007614:	f7ff fff0 	bl	80075f8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8007618:	f7ff fecc 	bl	80073b4 <ILI9341_SPI_Init>
ILI9341_Reset();
 800761c:	f7ff ff7c 	bl	8007518 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8007620:	2001      	movs	r0, #1
 8007622:	f7ff fee9 	bl	80073f8 <ILI9341_Write_Command>
HAL_Delay(1000);
 8007626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800762a:	f000 fd1d 	bl	8008068 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800762e:	20cb      	movs	r0, #203	; 0xcb
 8007630:	f7ff fee2 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8007634:	2039      	movs	r0, #57	; 0x39
 8007636:	f7ff ff01 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800763a:	202c      	movs	r0, #44	; 0x2c
 800763c:	f7ff fefe 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007640:	2000      	movs	r0, #0
 8007642:	f7ff fefb 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8007646:	2034      	movs	r0, #52	; 0x34
 8007648:	f7ff fef8 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800764c:	2002      	movs	r0, #2
 800764e:	f7ff fef5 	bl	800743c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8007652:	20cf      	movs	r0, #207	; 0xcf
 8007654:	f7ff fed0 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007658:	2000      	movs	r0, #0
 800765a:	f7ff feef 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800765e:	20c1      	movs	r0, #193	; 0xc1
 8007660:	f7ff feec 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8007664:	2030      	movs	r0, #48	; 0x30
 8007666:	f7ff fee9 	bl	800743c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800766a:	20e8      	movs	r0, #232	; 0xe8
 800766c:	f7ff fec4 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8007670:	2085      	movs	r0, #133	; 0x85
 8007672:	f7ff fee3 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007676:	2000      	movs	r0, #0
 8007678:	f7ff fee0 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800767c:	2078      	movs	r0, #120	; 0x78
 800767e:	f7ff fedd 	bl	800743c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8007682:	20ea      	movs	r0, #234	; 0xea
 8007684:	f7ff feb8 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007688:	2000      	movs	r0, #0
 800768a:	f7ff fed7 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800768e:	2000      	movs	r0, #0
 8007690:	f7ff fed4 	bl	800743c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8007694:	20ed      	movs	r0, #237	; 0xed
 8007696:	f7ff feaf 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800769a:	2064      	movs	r0, #100	; 0x64
 800769c:	f7ff fece 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80076a0:	2003      	movs	r0, #3
 80076a2:	f7ff fecb 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80076a6:	2012      	movs	r0, #18
 80076a8:	f7ff fec8 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80076ac:	2081      	movs	r0, #129	; 0x81
 80076ae:	f7ff fec5 	bl	800743c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80076b2:	20f7      	movs	r0, #247	; 0xf7
 80076b4:	f7ff fea0 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80076b8:	2020      	movs	r0, #32
 80076ba:	f7ff febf 	bl	800743c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80076be:	20c0      	movs	r0, #192	; 0xc0
 80076c0:	f7ff fe9a 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80076c4:	2023      	movs	r0, #35	; 0x23
 80076c6:	f7ff feb9 	bl	800743c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80076ca:	20c1      	movs	r0, #193	; 0xc1
 80076cc:	f7ff fe94 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80076d0:	2010      	movs	r0, #16
 80076d2:	f7ff feb3 	bl	800743c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80076d6:	20c5      	movs	r0, #197	; 0xc5
 80076d8:	f7ff fe8e 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80076dc:	203e      	movs	r0, #62	; 0x3e
 80076de:	f7ff fead 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80076e2:	2028      	movs	r0, #40	; 0x28
 80076e4:	f7ff feaa 	bl	800743c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80076e8:	20c7      	movs	r0, #199	; 0xc7
 80076ea:	f7ff fe85 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80076ee:	2086      	movs	r0, #134	; 0x86
 80076f0:	f7ff fea4 	bl	800743c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80076f4:	2036      	movs	r0, #54	; 0x36
 80076f6:	f7ff fe7f 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80076fa:	2048      	movs	r0, #72	; 0x48
 80076fc:	f7ff fe9e 	bl	800743c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8007700:	203a      	movs	r0, #58	; 0x3a
 8007702:	f7ff fe79 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8007706:	2055      	movs	r0, #85	; 0x55
 8007708:	f7ff fe98 	bl	800743c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800770c:	20b1      	movs	r0, #177	; 0xb1
 800770e:	f7ff fe73 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007712:	2000      	movs	r0, #0
 8007714:	f7ff fe92 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8007718:	2018      	movs	r0, #24
 800771a:	f7ff fe8f 	bl	800743c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800771e:	20b6      	movs	r0, #182	; 0xb6
 8007720:	f7ff fe6a 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8007724:	2008      	movs	r0, #8
 8007726:	f7ff fe89 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800772a:	2082      	movs	r0, #130	; 0x82
 800772c:	f7ff fe86 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8007730:	2027      	movs	r0, #39	; 0x27
 8007732:	f7ff fe83 	bl	800743c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8007736:	20f2      	movs	r0, #242	; 0xf2
 8007738:	f7ff fe5e 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800773c:	2000      	movs	r0, #0
 800773e:	f7ff fe7d 	bl	800743c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8007742:	2026      	movs	r0, #38	; 0x26
 8007744:	f7ff fe58 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8007748:	2001      	movs	r0, #1
 800774a:	f7ff fe77 	bl	800743c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800774e:	20e0      	movs	r0, #224	; 0xe0
 8007750:	f7ff fe52 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8007754:	200f      	movs	r0, #15
 8007756:	f7ff fe71 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800775a:	2031      	movs	r0, #49	; 0x31
 800775c:	f7ff fe6e 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8007760:	202b      	movs	r0, #43	; 0x2b
 8007762:	f7ff fe6b 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8007766:	200c      	movs	r0, #12
 8007768:	f7ff fe68 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800776c:	200e      	movs	r0, #14
 800776e:	f7ff fe65 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8007772:	2008      	movs	r0, #8
 8007774:	f7ff fe62 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8007778:	204e      	movs	r0, #78	; 0x4e
 800777a:	f7ff fe5f 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800777e:	20f1      	movs	r0, #241	; 0xf1
 8007780:	f7ff fe5c 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8007784:	2037      	movs	r0, #55	; 0x37
 8007786:	f7ff fe59 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800778a:	2007      	movs	r0, #7
 800778c:	f7ff fe56 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8007790:	2010      	movs	r0, #16
 8007792:	f7ff fe53 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8007796:	2003      	movs	r0, #3
 8007798:	f7ff fe50 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800779c:	200e      	movs	r0, #14
 800779e:	f7ff fe4d 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80077a2:	2009      	movs	r0, #9
 80077a4:	f7ff fe4a 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80077a8:	2000      	movs	r0, #0
 80077aa:	f7ff fe47 	bl	800743c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80077ae:	20e1      	movs	r0, #225	; 0xe1
 80077b0:	f7ff fe22 	bl	80073f8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7ff fe41 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80077ba:	200e      	movs	r0, #14
 80077bc:	f7ff fe3e 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80077c0:	2014      	movs	r0, #20
 80077c2:	f7ff fe3b 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80077c6:	2003      	movs	r0, #3
 80077c8:	f7ff fe38 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80077cc:	2011      	movs	r0, #17
 80077ce:	f7ff fe35 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80077d2:	2007      	movs	r0, #7
 80077d4:	f7ff fe32 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80077d8:	2031      	movs	r0, #49	; 0x31
 80077da:	f7ff fe2f 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80077de:	20c1      	movs	r0, #193	; 0xc1
 80077e0:	f7ff fe2c 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80077e4:	2048      	movs	r0, #72	; 0x48
 80077e6:	f7ff fe29 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80077ea:	2008      	movs	r0, #8
 80077ec:	f7ff fe26 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80077f0:	200f      	movs	r0, #15
 80077f2:	f7ff fe23 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80077f6:	200c      	movs	r0, #12
 80077f8:	f7ff fe20 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80077fc:	2031      	movs	r0, #49	; 0x31
 80077fe:	f7ff fe1d 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8007802:	2036      	movs	r0, #54	; 0x36
 8007804:	f7ff fe1a 	bl	800743c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8007808:	200f      	movs	r0, #15
 800780a:	f7ff fe17 	bl	800743c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800780e:	2011      	movs	r0, #17
 8007810:	f7ff fdf2 	bl	80073f8 <ILI9341_Write_Command>
HAL_Delay(120);
 8007814:	2078      	movs	r0, #120	; 0x78
 8007816:	f000 fc27 	bl	8008068 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800781a:	2029      	movs	r0, #41	; 0x29
 800781c:	f7ff fdec 	bl	80073f8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007820:	2000      	movs	r0, #0
 8007822:	f7ff fe97 	bl	8007554 <ILI9341_Set_Rotation>
}
 8007826:	bf00      	nop
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800782c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007830:	b08d      	sub	sp, #52	; 0x34
 8007832:	af00      	add	r7, sp, #0
 8007834:	4603      	mov	r3, r0
 8007836:	6039      	str	r1, [r7, #0]
 8007838:	80fb      	strh	r3, [r7, #6]
 800783a:	466b      	mov	r3, sp
 800783c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800784a:	d202      	bcs.n	8007852 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007850:	e002      	b.n	8007858 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8007852:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007858:	2201      	movs	r2, #1
 800785a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800785e:	4840      	ldr	r0, [pc, #256]	; (8007960 <ILI9341_Draw_Colour_Burst+0x134>)
 8007860:	f001 fe98 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007864:	2200      	movs	r2, #0
 8007866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800786a:	483d      	ldr	r0, [pc, #244]	; (8007960 <ILI9341_Draw_Colour_Burst+0x134>)
 800786c:	f001 fe92 	bl	8009594 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b29b      	uxth	r3, r3
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800787a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800787c:	460b      	mov	r3, r1
 800787e:	3b01      	subs	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	2300      	movs	r3, #0
 8007884:	4688      	mov	r8, r1
 8007886:	4699      	mov	r9, r3
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007894:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007898:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800789c:	2300      	movs	r3, #0
 800789e:	460c      	mov	r4, r1
 80078a0:	461d      	mov	r5, r3
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	00eb      	lsls	r3, r5, #3
 80078ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078b0:	00e2      	lsls	r2, r4, #3
 80078b2:	1dcb      	adds	r3, r1, #7
 80078b4:	08db      	lsrs	r3, r3, #3
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	ebad 0d03 	sub.w	sp, sp, r3
 80078bc:	466b      	mov	r3, sp
 80078be:	3300      	adds	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80078c2:	2300      	movs	r3, #0
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c6:	e00e      	b.n	80078e6 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	4413      	add	r3, r2
 80078ce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80078d2:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	3301      	adds	r3, #1
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	b2d1      	uxtb	r1, r2
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	3302      	adds	r3, #2
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d3ec      	bcc.n	80078c8 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007902:	fbb3 f2f2 	udiv	r2, r3, r2
 8007906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007908:	fb01 f202 	mul.w	r2, r1, r2
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
 800791a:	e009      	b.n	8007930 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	b29a      	uxth	r2, r3
 8007920:	230a      	movs	r3, #10
 8007922:	69b9      	ldr	r1, [r7, #24]
 8007924:	480f      	ldr	r0, [pc, #60]	; (8007964 <ILI9341_Draw_Colour_Burst+0x138>)
 8007926:	f003 f898 	bl	800aa5a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	3301      	adds	r3, #1
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	429a      	cmp	r2, r3
 8007936:	d3f1      	bcc.n	800791c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	b29a      	uxth	r2, r3
 800793c:	230a      	movs	r3, #10
 800793e:	69b9      	ldr	r1, [r7, #24]
 8007940:	4808      	ldr	r0, [pc, #32]	; (8007964 <ILI9341_Draw_Colour_Burst+0x138>)
 8007942:	f003 f88a 	bl	800aa5a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007946:	2201      	movs	r2, #1
 8007948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800794c:	4804      	ldr	r0, [pc, #16]	; (8007960 <ILI9341_Draw_Colour_Burst+0x134>)
 800794e:	f001 fe21 	bl	8009594 <HAL_GPIO_WritePin>
 8007952:	46b5      	mov	sp, r6
}
 8007954:	bf00      	nop
 8007956:	3734      	adds	r7, #52	; 0x34
 8007958:	46bd      	mov	sp, r7
 800795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795e:	bf00      	nop
 8007960:	40020800 	.word	0x40020800
 8007964:	20002e58 	.word	0x20002e58

08007968 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8007972:	4b0e      	ldr	r3, [pc, #56]	; (80079ac <ILI9341_Fill_Screen+0x44>)
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29a      	uxth	r2, r3
 8007978:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <ILI9341_Fill_Screen+0x48>)
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	2100      	movs	r1, #0
 8007980:	2000      	movs	r0, #0
 8007982:	f7ff fd7d 	bl	8007480 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <ILI9341_Fill_Screen+0x44>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	461a      	mov	r2, r3
 800798e:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <ILI9341_Fill_Screen+0x48>)
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	fb02 f303 	mul.w	r3, r2, r3
 8007998:	461a      	mov	r2, r3
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ff44 	bl	800782c <ILI9341_Draw_Colour_Burst>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20000982 	.word	0x20000982
 80079b0:	20000980 	.word	0x20000980

080079b4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	80fb      	strh	r3, [r7, #6]
 80079be:	460b      	mov	r3, r1
 80079c0:	80bb      	strh	r3, [r7, #4]
 80079c2:	4613      	mov	r3, r2
 80079c4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80079c6:	4b64      	ldr	r3, [pc, #400]	; (8007b58 <ILI9341_Draw_Pixel+0x1a4>)
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	f080 80be 	bcs.w	8007b50 <ILI9341_Draw_Pixel+0x19c>
 80079d4:	4b61      	ldr	r3, [pc, #388]	; (8007b5c <ILI9341_Draw_Pixel+0x1a8>)
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	88ba      	ldrh	r2, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	f080 80b7 	bcs.w	8007b50 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80079e2:	2200      	movs	r2, #0
 80079e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079e8:	485d      	ldr	r0, [pc, #372]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 80079ea:	f001 fdd3 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80079ee:	2200      	movs	r2, #0
 80079f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079f4:	485a      	ldr	r0, [pc, #360]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 80079f6:	f001 fdcd 	bl	8009594 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80079fa:	202a      	movs	r0, #42	; 0x2a
 80079fc:	f7ff fcea 	bl	80073d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007a00:	2201      	movs	r2, #1
 8007a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a06:	4856      	ldr	r0, [pc, #344]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a08:	f001 fdc4 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a12:	4853      	ldr	r0, [pc, #332]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a14:	f001 fdbe 	bl	8009594 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a1e:	4850      	ldr	r0, [pc, #320]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a20:	f001 fdb8 	bl	8009594 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	753b      	strb	r3, [r7, #20]
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	757b      	strb	r3, [r7, #21]
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	3301      	adds	r3, #1
 8007a38:	121b      	asrs	r3, r3, #8
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	75bb      	strb	r3, [r7, #22]
 8007a3e:	88fb      	ldrh	r3, [r7, #6]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	3301      	adds	r3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8007a48:	f107 0114 	add.w	r1, r7, #20
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	2204      	movs	r2, #4
 8007a50:	4844      	ldr	r0, [pc, #272]	; (8007b64 <ILI9341_Draw_Pixel+0x1b0>)
 8007a52:	f003 f802 	bl	800aa5a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007a56:	2201      	movs	r2, #1
 8007a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a5c:	4840      	ldr	r0, [pc, #256]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a5e:	f001 fd99 	bl	8009594 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007a62:	2200      	movs	r2, #0
 8007a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a68:	483d      	ldr	r0, [pc, #244]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a6a:	f001 fd93 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a74:	483a      	ldr	r0, [pc, #232]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a76:	f001 fd8d 	bl	8009594 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8007a7a:	202b      	movs	r0, #43	; 0x2b
 8007a7c:	f7ff fcaa 	bl	80073d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007a80:	2201      	movs	r2, #1
 8007a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a86:	4836      	ldr	r0, [pc, #216]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a88:	f001 fd84 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a92:	4833      	ldr	r0, [pc, #204]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007a94:	f001 fd7e 	bl	8009594 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a9e:	4830      	ldr	r0, [pc, #192]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007aa0:	f001 fd78 	bl	8009594 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8007aa4:	88bb      	ldrh	r3, [r7, #4]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	743b      	strb	r3, [r7, #16]
 8007aae:	88bb      	ldrh	r3, [r7, #4]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	747b      	strb	r3, [r7, #17]
 8007ab4:	88bb      	ldrh	r3, [r7, #4]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	121b      	asrs	r3, r3, #8
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	74bb      	strb	r3, [r7, #18]
 8007abe:	88bb      	ldrh	r3, [r7, #4]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8007ac8:	f107 0110 	add.w	r1, r7, #16
 8007acc:	2301      	movs	r3, #1
 8007ace:	2204      	movs	r2, #4
 8007ad0:	4824      	ldr	r0, [pc, #144]	; (8007b64 <ILI9341_Draw_Pixel+0x1b0>)
 8007ad2:	f002 ffc2 	bl	800aa5a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007adc:	4820      	ldr	r0, [pc, #128]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007ade:	f001 fd59 	bl	8009594 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ae8:	481d      	ldr	r0, [pc, #116]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007aea:	f001 fd53 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007aee:	2200      	movs	r2, #0
 8007af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007af4:	481a      	ldr	r0, [pc, #104]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007af6:	f001 fd4d 	bl	8009594 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8007afa:	202c      	movs	r0, #44	; 0x2c
 8007afc:	f7ff fc6a 	bl	80073d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007b00:	2201      	movs	r2, #1
 8007b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b06:	4816      	ldr	r0, [pc, #88]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007b08:	f001 fd44 	bl	8009594 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b12:	4813      	ldr	r0, [pc, #76]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007b14:	f001 fd3e 	bl	8009594 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b1e:	4810      	ldr	r0, [pc, #64]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007b20:	f001 fd38 	bl	8009594 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8007b24:	887b      	ldrh	r3, [r7, #2]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	733b      	strb	r3, [r7, #12]
 8007b2e:	887b      	ldrh	r3, [r7, #2]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8007b34:	f107 010c 	add.w	r1, r7, #12
 8007b38:	2301      	movs	r3, #1
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	4809      	ldr	r0, [pc, #36]	; (8007b64 <ILI9341_Draw_Pixel+0x1b0>)
 8007b3e:	f002 ff8c 	bl	800aa5a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007b42:	2201      	movs	r2, #1
 8007b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b48:	4805      	ldr	r0, [pc, #20]	; (8007b60 <ILI9341_Draw_Pixel+0x1ac>)
 8007b4a:	f001 fd23 	bl	8009594 <HAL_GPIO_WritePin>
 8007b4e:	e000      	b.n	8007b52 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007b50:	bf00      	nop
	
}
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000982 	.word	0x20000982
 8007b5c:	20000980 	.word	0x20000980
 8007b60:	40020800 	.word	0x40020800
 8007b64:	20002e58 	.word	0x20002e58

08007b68 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	4623      	mov	r3, r4
 8007b78:	80fb      	strh	r3, [r7, #6]
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	80bb      	strh	r3, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	807b      	strh	r3, [r7, #2]
 8007b82:	4613      	mov	r3, r2
 8007b84:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <ILI9341_Draw_Rectangle+0xb0>)
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d23d      	bcs.n	8007c0e <ILI9341_Draw_Rectangle+0xa6>
 8007b92:	4b22      	ldr	r3, [pc, #136]	; (8007c1c <ILI9341_Draw_Rectangle+0xb4>)
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	88ba      	ldrh	r2, [r7, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d237      	bcs.n	8007c0e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	887b      	ldrh	r3, [r7, #2]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <ILI9341_Draw_Rectangle+0xb0>)
 8007ba6:	8812      	ldrh	r2, [r2, #0]
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	4293      	cmp	r3, r2
 8007bac:	dd05      	ble.n	8007bba <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8007bae:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <ILI9341_Draw_Rectangle+0xb0>)
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8007bba:	88ba      	ldrh	r2, [r7, #4]
 8007bbc:	883b      	ldrh	r3, [r7, #0]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <ILI9341_Draw_Rectangle+0xb4>)
 8007bc2:	8812      	ldrh	r2, [r2, #0]
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	dd05      	ble.n	8007bd6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8007bca:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <ILI9341_Draw_Rectangle+0xb4>)
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	88bb      	ldrh	r3, [r7, #4]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8007bd6:	88fa      	ldrh	r2, [r7, #6]
 8007bd8:	887b      	ldrh	r3, [r7, #2]
 8007bda:	4413      	add	r3, r2
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29c      	uxth	r4, r3
 8007be2:	88ba      	ldrh	r2, [r7, #4]
 8007be4:	883b      	ldrh	r3, [r7, #0]
 8007be6:	4413      	add	r3, r2
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	88b9      	ldrh	r1, [r7, #4]
 8007bf0:	88f8      	ldrh	r0, [r7, #6]
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	f7ff fc44 	bl	8007480 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8007bf8:	883b      	ldrh	r3, [r7, #0]
 8007bfa:	887a      	ldrh	r2, [r7, #2]
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	8b3b      	ldrh	r3, [r7, #24]
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fe10 	bl	800782c <ILI9341_Draw_Colour_Burst>
 8007c0c:	e000      	b.n	8007c10 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007c0e:	bf00      	nop
}
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd90      	pop	{r4, r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000982 	.word	0x20000982
 8007c1c:	20000980 	.word	0x20000980

08007c20 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8007c20:	b590      	push	{r4, r7, lr}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4623      	mov	r3, r4
 8007c30:	80fb      	strh	r3, [r7, #6]
 8007c32:	4603      	mov	r3, r0
 8007c34:	80bb      	strh	r3, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	807b      	strh	r3, [r7, #2]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007c3e:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d225      	bcs.n	8007c96 <ILI9341_Draw_Horizontal_Line+0x76>
 8007c4a:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <ILI9341_Draw_Horizontal_Line+0x84>)
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	88ba      	ldrh	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d21f      	bcs.n	8007c96 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8007c5e:	8812      	ldrh	r2, [r2, #0]
 8007c60:	b292      	uxth	r2, r2
 8007c62:	4293      	cmp	r3, r2
 8007c64:	dd05      	ble.n	8007c72 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	4413      	add	r3, r2
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	88bb      	ldrh	r3, [r7, #4]
 8007c80:	88b9      	ldrh	r1, [r7, #4]
 8007c82:	88f8      	ldrh	r0, [r7, #6]
 8007c84:	f7ff fbfc 	bl	8007480 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8007c88:	887a      	ldrh	r2, [r7, #2]
 8007c8a:	883b      	ldrh	r3, [r7, #0]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fdcc 	bl	800782c <ILI9341_Draw_Colour_Burst>
 8007c94:	e000      	b.n	8007c98 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007c96:	bf00      	nop
}
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd90      	pop	{r4, r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000982 	.word	0x20000982
 8007ca4:	20000980 	.word	0x20000980

08007ca8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8007ca8:	b590      	push	{r4, r7, lr}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	80fb      	strh	r3, [r7, #6]
 8007cba:	4603      	mov	r3, r0
 8007cbc:	80bb      	strh	r3, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	807b      	strh	r3, [r7, #2]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <ILI9341_Draw_Vertical_Line+0x80>)
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d225      	bcs.n	8007d1e <ILI9341_Draw_Vertical_Line+0x76>
 8007cd2:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <ILI9341_Draw_Vertical_Line+0x84>)
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	88ba      	ldrh	r2, [r7, #4]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d21f      	bcs.n	8007d1e <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8007cde:	88ba      	ldrh	r2, [r7, #4]
 8007ce0:	887b      	ldrh	r3, [r7, #2]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <ILI9341_Draw_Vertical_Line+0x84>)
 8007ce6:	8812      	ldrh	r2, [r2, #0]
 8007ce8:	b292      	uxth	r2, r2
 8007cea:	4293      	cmp	r3, r2
 8007cec:	dd05      	ble.n	8007cfa <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <ILI9341_Draw_Vertical_Line+0x84>)
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	88bb      	ldrh	r3, [r7, #4]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8007cfa:	88ba      	ldrh	r2, [r7, #4]
 8007cfc:	887b      	ldrh	r3, [r7, #2]
 8007cfe:	4413      	add	r3, r2
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	88b9      	ldrh	r1, [r7, #4]
 8007d0a:	88f8      	ldrh	r0, [r7, #6]
 8007d0c:	f7ff fbb8 	bl	8007480 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8007d10:	887a      	ldrh	r2, [r7, #2]
 8007d12:	883b      	ldrh	r3, [r7, #0]
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fd88 	bl	800782c <ILI9341_Draw_Colour_Burst>
 8007d1c:	e000      	b.n	8007d20 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007d1e:	bf00      	nop
}
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd90      	pop	{r4, r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000982 	.word	0x20000982
 8007d2c:	20000980 	.word	0x20000980

08007d30 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8007d36:	2310      	movs	r3, #16
 8007d38:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8007d3e:	e019      	b.n	8007d74 <TP_Read+0x44>
    {
        value <<= 1;
 8007d40:	88bb      	ldrh	r3, [r7, #4]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8007d46:	2201      	movs	r2, #1
 8007d48:	2108      	movs	r1, #8
 8007d4a:	480e      	ldr	r0, [pc, #56]	; (8007d84 <TP_Read+0x54>)
 8007d4c:	f001 fc22 	bl	8009594 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2108      	movs	r1, #8
 8007d54:	480b      	ldr	r0, [pc, #44]	; (8007d84 <TP_Read+0x54>)
 8007d56:	f001 fc1d 	bl	8009594 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8007d5a:	2110      	movs	r1, #16
 8007d5c:	4809      	ldr	r0, [pc, #36]	; (8007d84 <TP_Read+0x54>)
 8007d5e:	f001 fc01 	bl	8009564 <HAL_GPIO_ReadPin>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <TP_Read+0x3e>
        {
            value++;
 8007d68:	88bb      	ldrh	r3, [r7, #4]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e2      	bne.n	8007d40 <TP_Read+0x10>
    };

    return value;
 8007d7a:	88bb      	ldrh	r3, [r7, #4]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40021000 	.word	0x40021000

08007d88 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8007d92:	2308      	movs	r3, #8
 8007d94:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8007d96:	2200      	movs	r2, #0
 8007d98:	2108      	movs	r1, #8
 8007d9a:	4815      	ldr	r0, [pc, #84]	; (8007df0 <TP_Write+0x68>)
 8007d9c:	f001 fbfa 	bl	8009594 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8007da0:	e01e      	b.n	8007de0 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8007da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da05      	bge.n	8007db6 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8007daa:	2201      	movs	r2, #1
 8007dac:	2120      	movs	r1, #32
 8007dae:	4810      	ldr	r0, [pc, #64]	; (8007df0 <TP_Write+0x68>)
 8007db0:	f001 fbf0 	bl	8009594 <HAL_GPIO_WritePin>
 8007db4:	e004      	b.n	8007dc0 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8007db6:	2200      	movs	r2, #0
 8007db8:	2120      	movs	r1, #32
 8007dba:	480d      	ldr	r0, [pc, #52]	; (8007df0 <TP_Write+0x68>)
 8007dbc:	f001 fbea 	bl	8009594 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	2108      	movs	r1, #8
 8007dca:	4809      	ldr	r0, [pc, #36]	; (8007df0 <TP_Write+0x68>)
 8007dcc:	f001 fbe2 	bl	8009594 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2108      	movs	r1, #8
 8007dd4:	4806      	ldr	r0, [pc, #24]	; (8007df0 <TP_Write+0x68>)
 8007dd6:	f001 fbdd 	bl	8009594 <HAL_GPIO_WritePin>
        i--;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1dd      	bne.n	8007da2 <TP_Write+0x1a>
    };
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40021000 	.word	0x40021000
 8007df4:	00000000 	.word	0x00000000

08007df8 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8007e00:	2201      	movs	r2, #1
 8007e02:	2108      	movs	r1, #8
 8007e04:	485a      	ldr	r0, [pc, #360]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007e06:	f001 fbc5 	bl	8009594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	2120      	movs	r1, #32
 8007e0e:	4858      	ldr	r0, [pc, #352]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007e10:	f001 fbc0 	bl	8009594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8007e14:	2201      	movs	r2, #1
 8007e16:	2140      	movs	r1, #64	; 0x40
 8007e18:	4855      	ldr	r0, [pc, #340]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007e1a:	f001 fbbb 	bl	8009594 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8007e1e:	2300      	movs	r3, #0
 8007e20:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8007e22:	2300      	movs	r3, #0
 8007e24:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8007e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e2e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8007e34:	2200      	movs	r2, #0
 8007e36:	2140      	movs	r1, #64	; 0x40
 8007e38:	484d      	ldr	r0, [pc, #308]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007e3a:	f001 fbab 	bl	8009594 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8007e3e:	e023      	b.n	8007e88 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8007e40:	2090      	movs	r0, #144	; 0x90
 8007e42:	f7ff ffa1 	bl	8007d88 <TP_Write>

				rawy = TP_Read();	
 8007e46:	f7ff ff73 	bl	8007d30 <TP_Read>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8007e4e:	89fb      	ldrh	r3, [r7, #14]
 8007e50:	6a3a      	ldr	r2, [r7, #32]
 8007e52:	4413      	add	r3, r2
 8007e54:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8007e56:	89fb      	ldrh	r3, [r7, #14]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8007e5e:	20d0      	movs	r0, #208	; 0xd0
 8007e60:	f7ff ff92 	bl	8007d88 <TP_Write>
        rawx = TP_Read();
 8007e64:	f7ff ff64 	bl	8007d30 <TP_Read>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8007e6c:	89bb      	ldrh	r3, [r7, #12]
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e70:	4413      	add	r3, r2
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8007e74:	89bb      	ldrh	r3, [r7, #12]
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	4413      	add	r3, r2
 8007e7a:	61fb      	str	r3, [r7, #28]
        samples--;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	3301      	adds	r3, #1
 8007e86:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d006      	beq.n	8007e9c <TP_Read_Coordinates+0xa4>
 8007e8e:	2104      	movs	r1, #4
 8007e90:	4837      	ldr	r0, [pc, #220]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007e92:	f001 fb67 	bl	8009564 <HAL_GPIO_ReadPin>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0d1      	beq.n	8007e40 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2140      	movs	r1, #64	; 0x40
 8007ea0:	4833      	ldr	r0, [pc, #204]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007ea2:	f001 fb77 	bl	8009594 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eac:	d14d      	bne.n	8007f4a <TP_Read_Coordinates+0x152>
 8007eae:	2104      	movs	r1, #4
 8007eb0:	482f      	ldr	r0, [pc, #188]	; (8007f70 <TP_Read_Coordinates+0x178>)
 8007eb2:	f001 fb57 	bl	8009564 <HAL_GPIO_ReadPin>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d146      	bne.n	8007f4a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ece:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8007ed8:	89bb      	ldrh	r3, [r7, #12]
 8007eda:	425b      	negs	r3, r3
 8007edc:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8007ede:	89fb      	ldrh	r3, [r7, #14]
 8007ee0:	425b      	negs	r3, r3
 8007ee2:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8007ee4:	89ba      	ldrh	r2, [r7, #12]
 8007ee6:	4b23      	ldr	r3, [pc, #140]	; (8007f74 <TP_Read_Coordinates+0x17c>)
 8007ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8007eec:	1ad2      	subs	r2, r2, r3
 8007eee:	0852      	lsrs	r2, r2, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f02:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8007f68 <TP_Read_Coordinates+0x170>
 8007f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007f0e:	ee17 3a90 	vmov	r3, s15
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8007f18:	89fb      	ldrh	r3, [r7, #14]
 8007f1a:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <TP_Read_Coordinates+0x180>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	09db      	lsrs	r3, r3, #7
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b0f      	subs	r3, #15
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f2e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8007f68 <TP_Read_Coordinates+0x170>
 8007f32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007f3e:	ee17 2a90 	vmov	r2, s15
 8007f42:	b292      	uxth	r2, r2
 8007f44:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8007f46:	2301      	movs	r3, #1
 8007f48:	e007      	b.n	8007f5a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3302      	adds	r3, #2
 8007f54:	2200      	movs	r2, #0
 8007f56:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8007f58:	2300      	movs	r3, #0
		}
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	f3af 8000 	nop.w
 8007f68:	28f5c28f 	.word	0x28f5c28f
 8007f6c:	3ff28f5c 	.word	0x3ff28f5c
 8007f70:	40021000 	.word	0x40021000
 8007f74:	e01e01e1 	.word	0xe01e01e1
 8007f78:	a0a0a0a1 	.word	0xa0a0a0a1

08007f7c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8007f80:	2104      	movs	r1, #4
 8007f82:	4805      	ldr	r0, [pc, #20]	; (8007f98 <TP_Touchpad_Pressed+0x1c>)
 8007f84:	f001 faee 	bl	8009564 <HAL_GPIO_ReadPin>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e000      	b.n	8007f94 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8007f92:	2300      	movs	r3, #0
	}
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	40021000 	.word	0x40021000

08007f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007fa0:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <HAL_Init+0x28>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a07      	ldr	r2, [pc, #28]	; (8007fc4 <HAL_Init+0x28>)
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fac:	2003      	movs	r0, #3
 8007fae:	f000 fd73 	bl	8008a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	f000 f808 	bl	8007fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007fb8:	f7fe fc40 	bl	800683c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40023c00 	.word	0x40023c00

08007fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007fd0:	4b12      	ldr	r3, [pc, #72]	; (800801c <HAL_InitTick+0x54>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	4b12      	ldr	r3, [pc, #72]	; (8008020 <HAL_InitTick+0x58>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fd8b 	bl	8008b02 <HAL_SYSTICK_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e00e      	b.n	8008014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b0f      	cmp	r3, #15
 8007ffa:	d80a      	bhi.n	8008012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008004:	f000 fd53 	bl	8008aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008008:	4a06      	ldr	r2, [pc, #24]	; (8008024 <HAL_InitTick+0x5c>)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	e000      	b.n	8008014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	2000097c 	.word	0x2000097c
 8008020:	20000988 	.word	0x20000988
 8008024:	20000984 	.word	0x20000984

08008028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_IncTick+0x20>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <HAL_IncTick+0x24>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4413      	add	r3, r2
 8008038:	4a04      	ldr	r2, [pc, #16]	; (800804c <HAL_IncTick+0x24>)
 800803a:	6013      	str	r3, [r2, #0]
}
 800803c:	bf00      	nop
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000988 	.word	0x20000988
 800804c:	20002fe0 	.word	0x20002fe0

08008050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  return uwTick;
 8008054:	4b03      	ldr	r3, [pc, #12]	; (8008064 <HAL_GetTick+0x14>)
 8008056:	681b      	ldr	r3, [r3, #0]
}
 8008058:	4618      	mov	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20002fe0 	.word	0x20002fe0

08008068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008070:	f7ff ffee 	bl	8008050 <HAL_GetTick>
 8008074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008080:	d005      	beq.n	800808e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <HAL_Delay+0x44>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800808e:	bf00      	nop
 8008090:	f7ff ffde 	bl	8008050 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d8f7      	bhi.n	8008090 <HAL_Delay+0x28>
  {
  }
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000988 	.word	0x20000988

080080b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e031      	b.n	800812a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7f8 fb08 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d116      	bne.n	800811c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080f2:	4b10      	ldr	r3, [pc, #64]	; (8008134 <HAL_ADC_Init+0x84>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	f043 0202 	orr.w	r2, r3, #2
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa7e 	bl	8008600 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	f043 0201 	orr.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
 800811a:	e001      	b.n	8008120 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	ffffeefd 	.word	0xffffeefd

08008138 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_ADC_Start_DMA+0x1e>
 8008152:	2302      	movs	r3, #2
 8008154:	e0d4      	b.n	8008300 <HAL_ADC_Start_DMA+0x1c8>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b01      	cmp	r3, #1
 800816a:	d018      	beq.n	800819e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800817c:	4b62      	ldr	r3, [pc, #392]	; (8008308 <HAL_ADC_Start_DMA+0x1d0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a62      	ldr	r2, [pc, #392]	; (800830c <HAL_ADC_Start_DMA+0x1d4>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	0c9a      	lsrs	r2, r3, #18
 8008188:	4613      	mov	r3, r2
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	4413      	add	r3, r2
 800818e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008190:	e002      	b.n	8008198 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	3b01      	subs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f9      	bne.n	8008192 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	f040 809c 	bne.w	80082e6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081b2:	4b57      	ldr	r3, [pc, #348]	; (8008310 <HAL_ADC_Start_DMA+0x1d8>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e8:	d106      	bne.n	80081f8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ee:	f023 0206 	bic.w	r2, r3, #6
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44
 80081f6:	e002      	b.n	80081fe <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	4a42      	ldr	r2, [pc, #264]	; (8008314 <HAL_ADC_Start_DMA+0x1dc>)
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	4a41      	ldr	r2, [pc, #260]	; (8008318 <HAL_ADC_Start_DMA+0x1e0>)
 8008214:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	4a40      	ldr	r2, [pc, #256]	; (800831c <HAL_ADC_Start_DMA+0x1e4>)
 800821c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008226:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008236:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008246:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	334c      	adds	r3, #76	; 0x4c
 8008252:	4619      	mov	r1, r3
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f000 fd0e 	bl	8008c78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800825c:	4b30      	ldr	r3, [pc, #192]	; (8008320 <HAL_ADC_Start_DMA+0x1e8>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10f      	bne.n	8008288 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d143      	bne.n	80082fe <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008284:	609a      	str	r2, [r3, #8]
 8008286:	e03a      	b.n	80082fe <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a25      	ldr	r2, [pc, #148]	; (8008324 <HAL_ADC_Start_DMA+0x1ec>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10e      	bne.n	80082b0 <HAL_ADC_Start_DMA+0x178>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082ae:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80082b0:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <HAL_ADC_Start_DMA+0x1e8>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d120      	bne.n	80082fe <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a19      	ldr	r2, [pc, #100]	; (8008328 <HAL_ADC_Start_DMA+0x1f0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d11b      	bne.n	80082fe <HAL_ADC_Start_DMA+0x1c6>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d114      	bne.n	80082fe <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082e2:	609a      	str	r2, [r3, #8]
 80082e4:	e00b      	b.n	80082fe <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f043 0210 	orr.w	r2, r3, #16
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	f043 0201 	orr.w	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	2000097c 	.word	0x2000097c
 800830c:	431bde83 	.word	0x431bde83
 8008310:	fffff8fe 	.word	0xfffff8fe
 8008314:	080087f5 	.word	0x080087f5
 8008318:	080088af 	.word	0x080088af
 800831c:	080088cb 	.word	0x080088cb
 8008320:	40012300 	.word	0x40012300
 8008324:	40012000 	.word	0x40012000
 8008328:	40012200 	.word	0x40012200

0800832c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_ADC_ConfigChannel+0x1c>
 800836c:	2302      	movs	r3, #2
 800836e:	e136      	b.n	80085de <HAL_ADC_ConfigChannel+0x28a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b09      	cmp	r3, #9
 800837e:	d93a      	bls.n	80083f6 <HAL_ADC_ConfigChannel+0xa2>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008388:	d035      	beq.n	80083f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68d9      	ldr	r1, [r3, #12]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	4613      	mov	r3, r2
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	4413      	add	r3, r2
 800839e:	3b1e      	subs	r3, #30
 80083a0:	2207      	movs	r2, #7
 80083a2:	fa02 f303 	lsl.w	r3, r2, r3
 80083a6:	43da      	mvns	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	400a      	ands	r2, r1
 80083ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a8d      	ldr	r2, [pc, #564]	; (80085ec <HAL_ADC_ConfigChannel+0x298>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d10a      	bne.n	80083d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68d9      	ldr	r1, [r3, #12]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	061a      	lsls	r2, r3, #24
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083ce:	e035      	b.n	800843c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68d9      	ldr	r1, [r3, #12]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4618      	mov	r0, r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4403      	add	r3, r0
 80083e8:	3b1e      	subs	r3, #30
 80083ea:	409a      	lsls	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083f4:	e022      	b.n	800843c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6919      	ldr	r1, [r3, #16]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	461a      	mov	r2, r3
 8008404:	4613      	mov	r3, r2
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	4413      	add	r3, r2
 800840a:	2207      	movs	r2, #7
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	43da      	mvns	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	400a      	ands	r2, r1
 8008418:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6919      	ldr	r1, [r3, #16]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	4618      	mov	r0, r3
 800842c:	4603      	mov	r3, r0
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	4403      	add	r3, r0
 8008432:	409a      	lsls	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b06      	cmp	r3, #6
 8008442:	d824      	bhi.n	800848e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	3b05      	subs	r3, #5
 8008456:	221f      	movs	r2, #31
 8008458:	fa02 f303 	lsl.w	r3, r2, r3
 800845c:	43da      	mvns	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	400a      	ands	r2, r1
 8008464:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	4618      	mov	r0, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	3b05      	subs	r3, #5
 8008480:	fa00 f203 	lsl.w	r2, r0, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	635a      	str	r2, [r3, #52]	; 0x34
 800848c:	e04c      	b.n	8008528 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b0c      	cmp	r3, #12
 8008494:	d824      	bhi.n	80084e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	3b23      	subs	r3, #35	; 0x23
 80084a8:	221f      	movs	r2, #31
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	43da      	mvns	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	400a      	ands	r2, r1
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4618      	mov	r0, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	3b23      	subs	r3, #35	; 0x23
 80084d2:	fa00 f203 	lsl.w	r2, r0, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
 80084de:	e023      	b.n	8008528 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	3b41      	subs	r3, #65	; 0x41
 80084f2:	221f      	movs	r2, #31
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	43da      	mvns	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	400a      	ands	r2, r1
 8008500:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	4618      	mov	r0, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	3b41      	subs	r3, #65	; 0x41
 800851c:	fa00 f203 	lsl.w	r2, r0, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a30      	ldr	r2, [pc, #192]	; (80085f0 <HAL_ADC_ConfigChannel+0x29c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d10a      	bne.n	8008548 <HAL_ADC_ConfigChannel+0x1f4>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800853a:	d105      	bne.n	8008548 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800853c:	4b2d      	ldr	r3, [pc, #180]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008542:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008546:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a28      	ldr	r2, [pc, #160]	; (80085f0 <HAL_ADC_ConfigChannel+0x29c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d10f      	bne.n	8008572 <HAL_ADC_ConfigChannel+0x21e>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b12      	cmp	r3, #18
 8008558:	d10b      	bne.n	8008572 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800855a:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	4a25      	ldr	r2, [pc, #148]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008560:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008564:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8008566:	4b23      	ldr	r3, [pc, #140]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800856c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008570:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a1e      	ldr	r2, [pc, #120]	; (80085f0 <HAL_ADC_ConfigChannel+0x29c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d12b      	bne.n	80085d4 <HAL_ADC_ConfigChannel+0x280>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a1a      	ldr	r2, [pc, #104]	; (80085ec <HAL_ADC_ConfigChannel+0x298>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d003      	beq.n	800858e <HAL_ADC_ConfigChannel+0x23a>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b11      	cmp	r3, #17
 800858c:	d122      	bne.n	80085d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8008594:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008598:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800859a:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	4a15      	ldr	r2, [pc, #84]	; (80085f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80085a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a10      	ldr	r2, [pc, #64]	; (80085ec <HAL_ADC_ConfigChannel+0x298>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d111      	bne.n	80085d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a11      	ldr	r2, [pc, #68]	; (80085fc <HAL_ADC_ConfigChannel+0x2a8>)
 80085b6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ba:	0c9a      	lsrs	r2, r3, #18
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80085c6:	e002      	b.n	80085ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1f9      	bne.n	80085c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	10000012 	.word	0x10000012
 80085f0:	40012000 	.word	0x40012000
 80085f4:	40012300 	.word	0x40012300
 80085f8:	2000097c 	.word	0x2000097c
 80085fc:	431bde83 	.word	0x431bde83

08008600 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008608:	4b78      	ldr	r3, [pc, #480]	; (80087ec <ADC_Init+0x1ec>)
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4a77      	ldr	r2, [pc, #476]	; (80087ec <ADC_Init+0x1ec>)
 800860e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008612:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008614:	4b75      	ldr	r3, [pc, #468]	; (80087ec <ADC_Init+0x1ec>)
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	4973      	ldr	r1, [pc, #460]	; (80087ec <ADC_Init+0x1ec>)
 800861e:	4313      	orrs	r3, r2
 8008620:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6859      	ldr	r1, [r3, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6859      	ldr	r1, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	430a      	orrs	r2, r1
 8008666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6899      	ldr	r1, [r3, #8]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	4a58      	ldr	r2, [pc, #352]	; (80087f0 <ADC_Init+0x1f0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d022      	beq.n	80086da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6899      	ldr	r1, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6899      	ldr	r1, [r3, #8]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	609a      	str	r2, [r3, #8]
 80086d8:	e00f      	b.n	80086fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0202 	bic.w	r2, r2, #2
 8008708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6899      	ldr	r1, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	005a      	lsls	r2, r3, #1
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01b      	beq.n	8008760 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6859      	ldr	r1, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	3b01      	subs	r3, #1
 8008754:	035a      	lsls	r2, r3, #13
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	605a      	str	r2, [r3, #4]
 800875e:	e007      	b.n	8008770 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800876e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800877e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	3b01      	subs	r3, #1
 800878c:	051a      	lsls	r2, r3, #20
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6899      	ldr	r1, [r3, #8]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087b2:	025a      	lsls	r2, r3, #9
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6899      	ldr	r1, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	029a      	lsls	r2, r3, #10
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	609a      	str	r2, [r3, #8]
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40012300 	.word	0x40012300
 80087f0:	0f000001 	.word	0x0f000001

080087f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800880a:	2b00      	cmp	r3, #0
 800880c:	d13c      	bne.n	8008888 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d12b      	bne.n	8008880 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800882c:	2b00      	cmp	r3, #0
 800882e:	d127      	bne.n	8008880 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800883a:	2b00      	cmp	r3, #0
 800883c:	d006      	beq.n	800884c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008848:	2b00      	cmp	r3, #0
 800884a:	d119      	bne.n	8008880 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0220 	bic.w	r2, r2, #32
 800885a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008878:	f043 0201 	orr.w	r2, r3, #1
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7fd fa1b 	bl	8005cbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008886:	e00e      	b.n	80088a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fd53 	bl	8008340 <HAL_ADC_ErrorCallback>
}
 800889a:	e004      	b.n	80088a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff fd35 	bl	800832c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2240      	movs	r2, #64	; 0x40
 80088dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e2:	f043 0204 	orr.w	r2, r3, #4
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff fd28 	bl	8008340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088f0:	bf00      	nop
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <__NVIC_SetPriorityGrouping>:
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008908:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <__NVIC_SetPriorityGrouping+0x40>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008914:	4013      	ands	r3, r2
 8008916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008920:	4b06      	ldr	r3, [pc, #24]	; (800893c <__NVIC_SetPriorityGrouping+0x44>)
 8008922:	4313      	orrs	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008926:	4a04      	ldr	r2, [pc, #16]	; (8008938 <__NVIC_SetPriorityGrouping+0x40>)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	60d3      	str	r3, [r2, #12]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	e000ed00 	.word	0xe000ed00
 800893c:	05fa0000 	.word	0x05fa0000

08008940 <__NVIC_GetPriorityGrouping>:
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <__NVIC_GetPriorityGrouping+0x18>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	0a1b      	lsrs	r3, r3, #8
 800894a:	f003 0307 	and.w	r3, r3, #7
}
 800894e:	4618      	mov	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	e000ed00 	.word	0xe000ed00

0800895c <__NVIC_EnableIRQ>:
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896a:	2b00      	cmp	r3, #0
 800896c:	db0b      	blt.n	8008986 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	f003 021f 	and.w	r2, r3, #31
 8008974:	4907      	ldr	r1, [pc, #28]	; (8008994 <__NVIC_EnableIRQ+0x38>)
 8008976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897a:	095b      	lsrs	r3, r3, #5
 800897c:	2001      	movs	r0, #1
 800897e:	fa00 f202 	lsl.w	r2, r0, r2
 8008982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	e000e100 	.word	0xe000e100

08008998 <__NVIC_SetPriority>:
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	db0a      	blt.n	80089c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	490c      	ldr	r1, [pc, #48]	; (80089e4 <__NVIC_SetPriority+0x4c>)
 80089b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b6:	0112      	lsls	r2, r2, #4
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	440b      	add	r3, r1
 80089bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089c0:	e00a      	b.n	80089d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	4908      	ldr	r1, [pc, #32]	; (80089e8 <__NVIC_SetPriority+0x50>)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	3b04      	subs	r3, #4
 80089d0:	0112      	lsls	r2, r2, #4
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	440b      	add	r3, r1
 80089d6:	761a      	strb	r2, [r3, #24]
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	e000e100 	.word	0xe000e100
 80089e8:	e000ed00 	.word	0xe000ed00

080089ec <NVIC_EncodePriority>:
{
 80089ec:	b480      	push	{r7}
 80089ee:	b089      	sub	sp, #36	; 0x24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f1c3 0307 	rsb	r3, r3, #7
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	bf28      	it	cs
 8008a0a:	2304      	movcs	r3, #4
 8008a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	3304      	adds	r3, #4
 8008a12:	2b06      	cmp	r3, #6
 8008a14:	d902      	bls.n	8008a1c <NVIC_EncodePriority+0x30>
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	3b03      	subs	r3, #3
 8008a1a:	e000      	b.n	8008a1e <NVIC_EncodePriority+0x32>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	43da      	mvns	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	401a      	ands	r2, r3
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3e:	43d9      	mvns	r1, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a44:	4313      	orrs	r3, r2
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3724      	adds	r7, #36	; 0x24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a64:	d301      	bcc.n	8008a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a66:	2301      	movs	r3, #1
 8008a68:	e00f      	b.n	8008a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	; (8008a94 <SysTick_Config+0x40>)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a72:	210f      	movs	r1, #15
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a78:	f7ff ff8e 	bl	8008998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <SysTick_Config+0x40>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a82:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <SysTick_Config+0x40>)
 8008a84:	2207      	movs	r2, #7
 8008a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	e000e010 	.word	0xe000e010

08008a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff ff29 	bl	80088f8 <__NVIC_SetPriorityGrouping>
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ac0:	f7ff ff3e 	bl	8008940 <__NVIC_GetPriorityGrouping>
 8008ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	6978      	ldr	r0, [r7, #20]
 8008acc:	f7ff ff8e 	bl	80089ec <NVIC_EncodePriority>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff ff5d 	bl	8008998 <__NVIC_SetPriority>
}
 8008ade:	bf00      	nop
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	4603      	mov	r3, r0
 8008aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ff31 	bl	800895c <__NVIC_EnableIRQ>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff ffa2 	bl	8008a54 <SysTick_Config>
 8008b10:	4603      	mov	r3, r0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008b28:	f7ff fa92 	bl	8008050 <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e099      	b.n	8008c6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0201 	bic.w	r2, r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b58:	e00f      	b.n	8008b7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b5a:	f7ff fa79 	bl	8008050 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b05      	cmp	r3, #5
 8008b66:	d908      	bls.n	8008b7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2203      	movs	r2, #3
 8008b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e078      	b.n	8008c6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e8      	bne.n	8008b5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4b38      	ldr	r3, [pc, #224]	; (8008c74 <HAL_DMA_Init+0x158>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d107      	bne.n	8008be4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f023 0307 	bic.w	r3, r3, #7
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d117      	bne.n	8008c3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00e      	beq.n	8008c3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa77 	bl	8009114 <DMA_CheckFifoParam>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2240      	movs	r2, #64	; 0x40
 8008c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e016      	b.n	8008c6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa2e 	bl	80090a8 <DMA_CalcBaseAndBitshift>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c54:	223f      	movs	r2, #63	; 0x3f
 8008c56:	409a      	lsls	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	e010803f 	.word	0xe010803f

08008c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d101      	bne.n	8008c9e <HAL_DMA_Start_IT+0x26>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e048      	b.n	8008d30 <HAL_DMA_Start_IT+0xb8>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d137      	bne.n	8008d22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f9c0 	bl	800904c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd0:	223f      	movs	r2, #63	; 0x3f
 8008cd2:	409a      	lsls	r2, r3
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0216 	orr.w	r2, r2, #22
 8008ce6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695a      	ldr	r2, [r3, #20]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cf6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0208 	orr.w	r2, r2, #8
 8008d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e005      	b.n	8008d2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008d44:	4b8e      	ldr	r3, [pc, #568]	; (8008f80 <HAL_DMA_IRQHandler+0x248>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a8e      	ldr	r2, [pc, #568]	; (8008f84 <HAL_DMA_IRQHandler+0x24c>)
 8008d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4e:	0a9b      	lsrs	r3, r3, #10
 8008d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d62:	2208      	movs	r2, #8
 8008d64:	409a      	lsls	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d01a      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d013      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0204 	bic.w	r2, r2, #4
 8008d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d90:	2208      	movs	r2, #8
 8008d92:	409a      	lsls	r2, r3
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9c:	f043 0201 	orr.w	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da8:	2201      	movs	r2, #1
 8008daa:	409a      	lsls	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4013      	ands	r3, r2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d012      	beq.n	8008dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00b      	beq.n	8008dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	409a      	lsls	r2, r3
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd2:	f043 0202 	orr.w	r2, r3, #2
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dde:	2204      	movs	r2, #4
 8008de0:	409a      	lsls	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4013      	ands	r3, r2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d012      	beq.n	8008e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	409a      	lsls	r2, r3
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	f043 0204 	orr.w	r2, r3, #4
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e14:	2210      	movs	r2, #16
 8008e16:	409a      	lsls	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d043      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d03c      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e32:	2210      	movs	r2, #16
 8008e34:	409a      	lsls	r2, r3
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d018      	beq.n	8008e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d108      	bne.n	8008e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d024      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
 8008e66:	e01f      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01b      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
 8008e78:	e016      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d107      	bne.n	8008e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0208 	bic.w	r2, r2, #8
 8008e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eac:	2220      	movs	r2, #32
 8008eae:	409a      	lsls	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 808f 	beq.w	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8087 	beq.w	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ece:	2220      	movs	r2, #32
 8008ed0:	409a      	lsls	r2, r3
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d136      	bne.n	8008f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0216 	bic.w	r2, r2, #22
 8008ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695a      	ldr	r2, [r3, #20]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d103      	bne.n	8008f12 <HAL_DMA_IRQHandler+0x1da>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0208 	bic.w	r2, r2, #8
 8008f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f26:	223f      	movs	r2, #63	; 0x3f
 8008f28:	409a      	lsls	r2, r3
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d07e      	beq.n	8009044 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
        }
        return;
 8008f4e:	e079      	b.n	8009044 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d01d      	beq.n	8008f9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10d      	bne.n	8008f88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d031      	beq.n	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
 8008f7c:	e02c      	b.n	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
 8008f7e:	bf00      	nop
 8008f80:	2000097c 	.word	0x2000097c
 8008f84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d023      	beq.n	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
 8008f98:	e01e      	b.n	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10f      	bne.n	8008fc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0210 	bic.w	r2, r2, #16
 8008fb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d032      	beq.n	8009046 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d022      	beq.n	8009032 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2205      	movs	r2, #5
 8008ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 0201 	bic.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	3301      	adds	r3, #1
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	429a      	cmp	r2, r3
 800900e:	d307      	bcc.n	8009020 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f2      	bne.n	8009004 <HAL_DMA_IRQHandler+0x2cc>
 800901e:	e000      	b.n	8009022 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009020:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
 8009042:	e000      	b.n	8009046 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009044:	bf00      	nop
    }
  }
}
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009068:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	d108      	bne.n	800908c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800908a:	e007      	b.n	800909c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	60da      	str	r2, [r3, #12]
}
 800909c:	bf00      	nop
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	3b10      	subs	r3, #16
 80090b8:	4a13      	ldr	r2, [pc, #76]	; (8009108 <DMA_CalcBaseAndBitshift+0x60>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	091b      	lsrs	r3, r3, #4
 80090c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80090c2:	4a12      	ldr	r2, [pc, #72]	; (800910c <DMA_CalcBaseAndBitshift+0x64>)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d908      	bls.n	80090e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <DMA_CalcBaseAndBitshift+0x68>)
 80090de:	4013      	ands	r3, r2
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	659a      	str	r2, [r3, #88]	; 0x58
 80090e6:	e006      	b.n	80090f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b08      	ldr	r3, [pc, #32]	; (8009110 <DMA_CalcBaseAndBitshift+0x68>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	aaaaaaab 	.word	0xaaaaaaab
 800910c:	080902c4 	.word	0x080902c4
 8009110:	fffffc00 	.word	0xfffffc00

08009114 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009124:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d11f      	bne.n	800916e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b03      	cmp	r3, #3
 8009132:	d856      	bhi.n	80091e2 <DMA_CheckFifoParam+0xce>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <DMA_CheckFifoParam+0x28>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	0800914d 	.word	0x0800914d
 8009140:	0800915f 	.word	0x0800915f
 8009144:	0800914d 	.word	0x0800914d
 8009148:	080091e3 	.word	0x080091e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d046      	beq.n	80091e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800915c:	e043      	b.n	80091e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009162:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009166:	d140      	bne.n	80091ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800916c:	e03d      	b.n	80091ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009176:	d121      	bne.n	80091bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b03      	cmp	r3, #3
 800917c:	d837      	bhi.n	80091ee <DMA_CheckFifoParam+0xda>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <DMA_CheckFifoParam+0x70>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	08009195 	.word	0x08009195
 8009188:	0800919b 	.word	0x0800919b
 800918c:	08009195 	.word	0x08009195
 8009190:	080091ad 	.word	0x080091ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]
      break;
 8009198:	e030      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d025      	beq.n	80091f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091aa:	e022      	b.n	80091f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091b4:	d11f      	bne.n	80091f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80091ba:	e01c      	b.n	80091f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d903      	bls.n	80091ca <DMA_CheckFifoParam+0xb6>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d003      	beq.n	80091d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80091c8:	e018      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]
      break;
 80091ce:	e015      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00e      	beq.n	80091fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	e00b      	b.n	80091fa <DMA_CheckFifoParam+0xe6>
      break;
 80091e2:	bf00      	nop
 80091e4:	e00a      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      break;
 80091e6:	bf00      	nop
 80091e8:	e008      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      break;
 80091ea:	bf00      	nop
 80091ec:	e006      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      break;
 80091ee:	bf00      	nop
 80091f0:	e004      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      break;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      break;   
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <DMA_CheckFifoParam+0xe8>
      break;
 80091fa:	bf00      	nop
    }
  } 
  
  return status; 
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop

0800920c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800920c:	b480      	push	{r7}
 800920e:	b089      	sub	sp, #36	; 0x24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009216:	2300      	movs	r3, #0
 8009218:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009222:	2300      	movs	r3, #0
 8009224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009226:	2300      	movs	r3, #0
 8009228:	61fb      	str	r3, [r7, #28]
 800922a:	e175      	b.n	8009518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800922c:	2201      	movs	r2, #1
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4013      	ands	r3, r2
 800923e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	429a      	cmp	r2, r3
 8009246:	f040 8164 	bne.w	8009512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d005      	beq.n	8009262 <HAL_GPIO_Init+0x56>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d130      	bne.n	80092c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	2203      	movs	r2, #3
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	43db      	mvns	r3, r3
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	4013      	ands	r3, r2
 8009278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	fa02 f303 	lsl.w	r3, r2, r3
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	4313      	orrs	r3, r2
 800928a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009298:	2201      	movs	r2, #1
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	fa02 f303 	lsl.w	r3, r2, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	f003 0201 	and.w	r2, r3, #1
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f003 0303 	and.w	r3, r3, #3
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d017      	beq.n	8009300 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	2203      	movs	r2, #3
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	4013      	ands	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f003 0303 	and.w	r3, r3, #3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d123      	bne.n	8009354 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	08da      	lsrs	r2, r3, #3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3208      	adds	r2, #8
 8009314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	220f      	movs	r2, #15
 8009324:	fa02 f303 	lsl.w	r3, r2, r3
 8009328:	43db      	mvns	r3, r3
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	4013      	ands	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	fa02 f303 	lsl.w	r3, r2, r3
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4313      	orrs	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	08da      	lsrs	r2, r3, #3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3208      	adds	r2, #8
 800934e:	69b9      	ldr	r1, [r7, #24]
 8009350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	2203      	movs	r2, #3
 8009360:	fa02 f303 	lsl.w	r3, r2, r3
 8009364:	43db      	mvns	r3, r3
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	4013      	ands	r3, r2
 800936a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f003 0203 	and.w	r2, r3, #3
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	fa02 f303 	lsl.w	r3, r2, r3
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	4313      	orrs	r3, r2
 8009380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 80be 	beq.w	8009512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009396:	4b66      	ldr	r3, [pc, #408]	; (8009530 <HAL_GPIO_Init+0x324>)
 8009398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939a:	4a65      	ldr	r2, [pc, #404]	; (8009530 <HAL_GPIO_Init+0x324>)
 800939c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093a0:	6453      	str	r3, [r2, #68]	; 0x44
 80093a2:	4b63      	ldr	r3, [pc, #396]	; (8009530 <HAL_GPIO_Init+0x324>)
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80093ae:	4a61      	ldr	r2, [pc, #388]	; (8009534 <HAL_GPIO_Init+0x328>)
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	089b      	lsrs	r3, r3, #2
 80093b4:	3302      	adds	r3, #2
 80093b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	220f      	movs	r2, #15
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	43db      	mvns	r3, r3
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4013      	ands	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a58      	ldr	r2, [pc, #352]	; (8009538 <HAL_GPIO_Init+0x32c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d037      	beq.n	800944a <HAL_GPIO_Init+0x23e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a57      	ldr	r2, [pc, #348]	; (800953c <HAL_GPIO_Init+0x330>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d031      	beq.n	8009446 <HAL_GPIO_Init+0x23a>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a56      	ldr	r2, [pc, #344]	; (8009540 <HAL_GPIO_Init+0x334>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d02b      	beq.n	8009442 <HAL_GPIO_Init+0x236>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a55      	ldr	r2, [pc, #340]	; (8009544 <HAL_GPIO_Init+0x338>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d025      	beq.n	800943e <HAL_GPIO_Init+0x232>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a54      	ldr	r2, [pc, #336]	; (8009548 <HAL_GPIO_Init+0x33c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d01f      	beq.n	800943a <HAL_GPIO_Init+0x22e>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a53      	ldr	r2, [pc, #332]	; (800954c <HAL_GPIO_Init+0x340>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d019      	beq.n	8009436 <HAL_GPIO_Init+0x22a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a52      	ldr	r2, [pc, #328]	; (8009550 <HAL_GPIO_Init+0x344>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <HAL_GPIO_Init+0x226>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a51      	ldr	r2, [pc, #324]	; (8009554 <HAL_GPIO_Init+0x348>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00d      	beq.n	800942e <HAL_GPIO_Init+0x222>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a50      	ldr	r2, [pc, #320]	; (8009558 <HAL_GPIO_Init+0x34c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d007      	beq.n	800942a <HAL_GPIO_Init+0x21e>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a4f      	ldr	r2, [pc, #316]	; (800955c <HAL_GPIO_Init+0x350>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d101      	bne.n	8009426 <HAL_GPIO_Init+0x21a>
 8009422:	2309      	movs	r3, #9
 8009424:	e012      	b.n	800944c <HAL_GPIO_Init+0x240>
 8009426:	230a      	movs	r3, #10
 8009428:	e010      	b.n	800944c <HAL_GPIO_Init+0x240>
 800942a:	2308      	movs	r3, #8
 800942c:	e00e      	b.n	800944c <HAL_GPIO_Init+0x240>
 800942e:	2307      	movs	r3, #7
 8009430:	e00c      	b.n	800944c <HAL_GPIO_Init+0x240>
 8009432:	2306      	movs	r3, #6
 8009434:	e00a      	b.n	800944c <HAL_GPIO_Init+0x240>
 8009436:	2305      	movs	r3, #5
 8009438:	e008      	b.n	800944c <HAL_GPIO_Init+0x240>
 800943a:	2304      	movs	r3, #4
 800943c:	e006      	b.n	800944c <HAL_GPIO_Init+0x240>
 800943e:	2303      	movs	r3, #3
 8009440:	e004      	b.n	800944c <HAL_GPIO_Init+0x240>
 8009442:	2302      	movs	r3, #2
 8009444:	e002      	b.n	800944c <HAL_GPIO_Init+0x240>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <HAL_GPIO_Init+0x240>
 800944a:	2300      	movs	r3, #0
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	f002 0203 	and.w	r2, r2, #3
 8009452:	0092      	lsls	r2, r2, #2
 8009454:	4093      	lsls	r3, r2
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	4313      	orrs	r3, r2
 800945a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800945c:	4935      	ldr	r1, [pc, #212]	; (8009534 <HAL_GPIO_Init+0x328>)
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	089b      	lsrs	r3, r3, #2
 8009462:	3302      	adds	r3, #2
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800946a:	4b3d      	ldr	r3, [pc, #244]	; (8009560 <HAL_GPIO_Init+0x354>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	43db      	mvns	r3, r3
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	4013      	ands	r3, r2
 8009478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	4313      	orrs	r3, r2
 800948c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800948e:	4a34      	ldr	r2, [pc, #208]	; (8009560 <HAL_GPIO_Init+0x354>)
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009494:	4b32      	ldr	r3, [pc, #200]	; (8009560 <HAL_GPIO_Init+0x354>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	43db      	mvns	r3, r3
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	4013      	ands	r3, r2
 80094a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094b8:	4a29      	ldr	r2, [pc, #164]	; (8009560 <HAL_GPIO_Init+0x354>)
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80094be:	4b28      	ldr	r3, [pc, #160]	; (8009560 <HAL_GPIO_Init+0x354>)
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	43db      	mvns	r3, r3
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	4013      	ands	r3, r2
 80094cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	4313      	orrs	r3, r2
 80094e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80094e2:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <HAL_GPIO_Init+0x354>)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094e8:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <HAL_GPIO_Init+0x354>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	43db      	mvns	r3, r3
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	4013      	ands	r3, r2
 80094f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800950c:	4a14      	ldr	r2, [pc, #80]	; (8009560 <HAL_GPIO_Init+0x354>)
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	3301      	adds	r3, #1
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	2b0f      	cmp	r3, #15
 800951c:	f67f ae86 	bls.w	800922c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	3724      	adds	r7, #36	; 0x24
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40023800 	.word	0x40023800
 8009534:	40013800 	.word	0x40013800
 8009538:	40020000 	.word	0x40020000
 800953c:	40020400 	.word	0x40020400
 8009540:	40020800 	.word	0x40020800
 8009544:	40020c00 	.word	0x40020c00
 8009548:	40021000 	.word	0x40021000
 800954c:	40021400 	.word	0x40021400
 8009550:	40021800 	.word	0x40021800
 8009554:	40021c00 	.word	0x40021c00
 8009558:	40022000 	.word	0x40022000
 800955c:	40022400 	.word	0x40022400
 8009560:	40013c00 	.word	0x40013c00

08009564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691a      	ldr	r2, [r3, #16]
 8009574:	887b      	ldrh	r3, [r7, #2]
 8009576:	4013      	ands	r3, r2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800957c:	2301      	movs	r3, #1
 800957e:	73fb      	strb	r3, [r7, #15]
 8009580:	e001      	b.n	8009586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	807b      	strh	r3, [r7, #2]
 80095a0:	4613      	mov	r3, r2
 80095a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095a4:	787b      	ldrb	r3, [r7, #1]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095aa:	887a      	ldrh	r2, [r7, #2]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80095b0:	e003      	b.n	80095ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80095b2:	887b      	ldrh	r3, [r7, #2]
 80095b4:	041a      	lsls	r2, r3, #16
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	619a      	str	r2, [r3, #24]
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80095d2:	4b08      	ldr	r3, [pc, #32]	; (80095f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095d4:	695a      	ldr	r2, [r3, #20]
 80095d6:	88fb      	ldrh	r3, [r7, #6]
 80095d8:	4013      	ands	r3, r2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d006      	beq.n	80095ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095de:	4a05      	ldr	r2, [pc, #20]	; (80095f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095e4:	88fb      	ldrh	r3, [r7, #6]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fc fd1c 	bl	8006024 <HAL_GPIO_EXTI_Callback>
  }
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	40013c00 	.word	0x40013c00

080095f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80095f8:	b480      	push	{r7}
 80095fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a04      	ldr	r2, [pc, #16]	; (8009614 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009606:	6013      	str	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40007000 	.word	0x40007000

08009618 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009622:	4b23      	ldr	r3, [pc, #140]	; (80096b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	4a22      	ldr	r2, [pc, #136]	; (80096b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800962c:	6413      	str	r3, [r2, #64]	; 0x40
 800962e:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800963a:	4b1e      	ldr	r3, [pc, #120]	; (80096b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a1d      	ldr	r2, [pc, #116]	; (80096b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009644:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009646:	f7fe fd03 	bl	8008050 <HAL_GetTick>
 800964a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800964c:	e009      	b.n	8009662 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800964e:	f7fe fcff 	bl	8008050 <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800965c:	d901      	bls.n	8009662 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e022      	b.n	80096a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800966a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966e:	d1ee      	bne.n	800964e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009670:	4b10      	ldr	r3, [pc, #64]	; (80096b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a0f      	ldr	r2, [pc, #60]	; (80096b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800967a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800967c:	f7fe fce8 	bl	8008050 <HAL_GetTick>
 8009680:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009682:	e009      	b.n	8009698 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009684:	f7fe fce4 	bl	8008050 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009692:	d901      	bls.n	8009698 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e007      	b.n	80096a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a4:	d1ee      	bne.n	8009684 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40023800 	.word	0x40023800
 80096b4:	40007000 	.word	0x40007000

080096b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e29b      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 8087 	beq.w	80097ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80096dc:	4b96      	ldr	r3, [pc, #600]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f003 030c 	and.w	r3, r3, #12
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d00c      	beq.n	8009702 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096e8:	4b93      	ldr	r3, [pc, #588]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f003 030c 	and.w	r3, r3, #12
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d112      	bne.n	800971a <HAL_RCC_OscConfig+0x62>
 80096f4:	4b90      	ldr	r3, [pc, #576]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009700:	d10b      	bne.n	800971a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009702:	4b8d      	ldr	r3, [pc, #564]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d06c      	beq.n	80097e8 <HAL_RCC_OscConfig+0x130>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d168      	bne.n	80097e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e275      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009722:	d106      	bne.n	8009732 <HAL_RCC_OscConfig+0x7a>
 8009724:	4b84      	ldr	r3, [pc, #528]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a83      	ldr	r2, [pc, #524]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800972a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	e02e      	b.n	8009790 <HAL_RCC_OscConfig+0xd8>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10c      	bne.n	8009754 <HAL_RCC_OscConfig+0x9c>
 800973a:	4b7f      	ldr	r3, [pc, #508]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a7e      	ldr	r2, [pc, #504]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	4b7c      	ldr	r3, [pc, #496]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a7b      	ldr	r2, [pc, #492]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800974c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	e01d      	b.n	8009790 <HAL_RCC_OscConfig+0xd8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800975c:	d10c      	bne.n	8009778 <HAL_RCC_OscConfig+0xc0>
 800975e:	4b76      	ldr	r3, [pc, #472]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a75      	ldr	r2, [pc, #468]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	4b73      	ldr	r3, [pc, #460]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a72      	ldr	r2, [pc, #456]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	e00b      	b.n	8009790 <HAL_RCC_OscConfig+0xd8>
 8009778:	4b6f      	ldr	r3, [pc, #444]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a6e      	ldr	r2, [pc, #440]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800977e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	4b6c      	ldr	r3, [pc, #432]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a6b      	ldr	r2, [pc, #428]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800978a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800978e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d013      	beq.n	80097c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009798:	f7fe fc5a 	bl	8008050 <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097a0:	f7fe fc56 	bl	8008050 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b64      	cmp	r3, #100	; 0x64
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e229      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097b2:	4b61      	ldr	r3, [pc, #388]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0f0      	beq.n	80097a0 <HAL_RCC_OscConfig+0xe8>
 80097be:	e014      	b.n	80097ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c0:	f7fe fc46 	bl	8008050 <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097c8:	f7fe fc42 	bl	8008050 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b64      	cmp	r3, #100	; 0x64
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e215      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097da:	4b57      	ldr	r3, [pc, #348]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1f0      	bne.n	80097c8 <HAL_RCC_OscConfig+0x110>
 80097e6:	e000      	b.n	80097ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d069      	beq.n	80098ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80097f6:	4b50      	ldr	r3, [pc, #320]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 030c 	and.w	r3, r3, #12
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009802:	4b4d      	ldr	r3, [pc, #308]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 030c 	and.w	r3, r3, #12
 800980a:	2b08      	cmp	r3, #8
 800980c:	d11c      	bne.n	8009848 <HAL_RCC_OscConfig+0x190>
 800980e:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d116      	bne.n	8009848 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800981a:	4b47      	ldr	r3, [pc, #284]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <HAL_RCC_OscConfig+0x17a>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d001      	beq.n	8009832 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e1e9      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009832:	4b41      	ldr	r3, [pc, #260]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	493d      	ldr	r1, [pc, #244]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009842:	4313      	orrs	r3, r2
 8009844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009846:	e040      	b.n	80098ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d023      	beq.n	8009898 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009850:	4b39      	ldr	r3, [pc, #228]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a38      	ldr	r2, [pc, #224]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009856:	f043 0301 	orr.w	r3, r3, #1
 800985a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800985c:	f7fe fbf8 	bl	8008050 <HAL_GetTick>
 8009860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009862:	e008      	b.n	8009876 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009864:	f7fe fbf4 	bl	8008050 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e1c7      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009876:	4b30      	ldr	r3, [pc, #192]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0f0      	beq.n	8009864 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009882:	4b2d      	ldr	r3, [pc, #180]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4929      	ldr	r1, [pc, #164]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009892:	4313      	orrs	r3, r2
 8009894:	600b      	str	r3, [r1, #0]
 8009896:	e018      	b.n	80098ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009898:	4b27      	ldr	r3, [pc, #156]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a26      	ldr	r2, [pc, #152]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 800989e:	f023 0301 	bic.w	r3, r3, #1
 80098a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a4:	f7fe fbd4 	bl	8008050 <HAL_GetTick>
 80098a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098aa:	e008      	b.n	80098be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098ac:	f7fe fbd0 	bl	8008050 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e1a3      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098be:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1f0      	bne.n	80098ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d038      	beq.n	8009948 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d019      	beq.n	8009912 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098de:	4b16      	ldr	r3, [pc, #88]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80098e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e2:	4a15      	ldr	r2, [pc, #84]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 80098e4:	f043 0301 	orr.w	r3, r3, #1
 80098e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ea:	f7fe fbb1 	bl	8008050 <HAL_GetTick>
 80098ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098f0:	e008      	b.n	8009904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098f2:	f7fe fbad 	bl	8008050 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d901      	bls.n	8009904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e180      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009904:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0f0      	beq.n	80098f2 <HAL_RCC_OscConfig+0x23a>
 8009910:	e01a      	b.n	8009948 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009916:	4a08      	ldr	r2, [pc, #32]	; (8009938 <HAL_RCC_OscConfig+0x280>)
 8009918:	f023 0301 	bic.w	r3, r3, #1
 800991c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800991e:	f7fe fb97 	bl	8008050 <HAL_GetTick>
 8009922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009924:	e00a      	b.n	800993c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009926:	f7fe fb93 	bl	8008050 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d903      	bls.n	800993c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e166      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
 8009938:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800993c:	4b92      	ldr	r3, [pc, #584]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 800993e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1ee      	bne.n	8009926 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80a4 	beq.w	8009a9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009956:	4b8c      	ldr	r3, [pc, #560]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10d      	bne.n	800997e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009962:	4b89      	ldr	r3, [pc, #548]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	4a88      	ldr	r2, [pc, #544]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800996c:	6413      	str	r3, [r2, #64]	; 0x40
 800996e:	4b86      	ldr	r3, [pc, #536]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009976:	60bb      	str	r3, [r7, #8]
 8009978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800997a:	2301      	movs	r3, #1
 800997c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800997e:	4b83      	ldr	r3, [pc, #524]	; (8009b8c <HAL_RCC_OscConfig+0x4d4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009986:	2b00      	cmp	r3, #0
 8009988:	d118      	bne.n	80099bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800998a:	4b80      	ldr	r3, [pc, #512]	; (8009b8c <HAL_RCC_OscConfig+0x4d4>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a7f      	ldr	r2, [pc, #508]	; (8009b8c <HAL_RCC_OscConfig+0x4d4>)
 8009990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009996:	f7fe fb5b 	bl	8008050 <HAL_GetTick>
 800999a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800999c:	e008      	b.n	80099b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800999e:	f7fe fb57 	bl	8008050 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	2b64      	cmp	r3, #100	; 0x64
 80099aa:	d901      	bls.n	80099b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e12a      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80099b0:	4b76      	ldr	r3, [pc, #472]	; (8009b8c <HAL_RCC_OscConfig+0x4d4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0f0      	beq.n	800999e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d106      	bne.n	80099d2 <HAL_RCC_OscConfig+0x31a>
 80099c4:	4b70      	ldr	r3, [pc, #448]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	4a6f      	ldr	r2, [pc, #444]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099ca:	f043 0301 	orr.w	r3, r3, #1
 80099ce:	6713      	str	r3, [r2, #112]	; 0x70
 80099d0:	e02d      	b.n	8009a2e <HAL_RCC_OscConfig+0x376>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <HAL_RCC_OscConfig+0x33c>
 80099da:	4b6b      	ldr	r3, [pc, #428]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099de:	4a6a      	ldr	r2, [pc, #424]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099e0:	f023 0301 	bic.w	r3, r3, #1
 80099e4:	6713      	str	r3, [r2, #112]	; 0x70
 80099e6:	4b68      	ldr	r3, [pc, #416]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ea:	4a67      	ldr	r2, [pc, #412]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099ec:	f023 0304 	bic.w	r3, r3, #4
 80099f0:	6713      	str	r3, [r2, #112]	; 0x70
 80099f2:	e01c      	b.n	8009a2e <HAL_RCC_OscConfig+0x376>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	2b05      	cmp	r3, #5
 80099fa:	d10c      	bne.n	8009a16 <HAL_RCC_OscConfig+0x35e>
 80099fc:	4b62      	ldr	r3, [pc, #392]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 80099fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a00:	4a61      	ldr	r2, [pc, #388]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a02:	f043 0304 	orr.w	r3, r3, #4
 8009a06:	6713      	str	r3, [r2, #112]	; 0x70
 8009a08:	4b5f      	ldr	r3, [pc, #380]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0c:	4a5e      	ldr	r2, [pc, #376]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	6713      	str	r3, [r2, #112]	; 0x70
 8009a14:	e00b      	b.n	8009a2e <HAL_RCC_OscConfig+0x376>
 8009a16:	4b5c      	ldr	r3, [pc, #368]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1a:	4a5b      	ldr	r2, [pc, #364]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a1c:	f023 0301 	bic.w	r3, r3, #1
 8009a20:	6713      	str	r3, [r2, #112]	; 0x70
 8009a22:	4b59      	ldr	r3, [pc, #356]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a26:	4a58      	ldr	r2, [pc, #352]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a28:	f023 0304 	bic.w	r3, r3, #4
 8009a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d015      	beq.n	8009a62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a36:	f7fe fb0b 	bl	8008050 <HAL_GetTick>
 8009a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a3c:	e00a      	b.n	8009a54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a3e:	f7fe fb07 	bl	8008050 <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d901      	bls.n	8009a54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e0d8      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a54:	4b4c      	ldr	r3, [pc, #304]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0ee      	beq.n	8009a3e <HAL_RCC_OscConfig+0x386>
 8009a60:	e014      	b.n	8009a8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a62:	f7fe faf5 	bl	8008050 <HAL_GetTick>
 8009a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a68:	e00a      	b.n	8009a80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a6a:	f7fe faf1 	bl	8008050 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e0c2      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a80:	4b41      	ldr	r3, [pc, #260]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1ee      	bne.n	8009a6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d105      	bne.n	8009a9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a92:	4b3d      	ldr	r3, [pc, #244]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	4a3c      	ldr	r2, [pc, #240]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80ae 	beq.w	8009c04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009aa8:	4b37      	ldr	r3, [pc, #220]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f003 030c 	and.w	r3, r3, #12
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d06d      	beq.n	8009b90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d14b      	bne.n	8009b54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009abc:	4b32      	ldr	r3, [pc, #200]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a31      	ldr	r2, [pc, #196]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac8:	f7fe fac2 	bl	8008050 <HAL_GetTick>
 8009acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ace:	e008      	b.n	8009ae2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ad0:	f7fe fabe 	bl	8008050 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e091      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ae2:	4b29      	ldr	r3, [pc, #164]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1f0      	bne.n	8009ad0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69da      	ldr	r2, [r3, #28]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	431a      	orrs	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	019b      	lsls	r3, r3, #6
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	3b01      	subs	r3, #1
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	061b      	lsls	r3, r3, #24
 8009b12:	431a      	orrs	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b18:	071b      	lsls	r3, r3, #28
 8009b1a:	491b      	ldr	r1, [pc, #108]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b20:	4b19      	ldr	r3, [pc, #100]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a18      	ldr	r2, [pc, #96]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2c:	f7fe fa90 	bl	8008050 <HAL_GetTick>
 8009b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b32:	e008      	b.n	8009b46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b34:	f7fe fa8c 	bl	8008050 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e05f      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0f0      	beq.n	8009b34 <HAL_RCC_OscConfig+0x47c>
 8009b52:	e057      	b.n	8009c04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b54:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a0b      	ldr	r2, [pc, #44]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b60:	f7fe fa76 	bl	8008050 <HAL_GetTick>
 8009b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b66:	e008      	b.n	8009b7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b68:	f7fe fa72 	bl	8008050 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e045      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7a:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <HAL_RCC_OscConfig+0x4d0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1f0      	bne.n	8009b68 <HAL_RCC_OscConfig+0x4b0>
 8009b86:	e03d      	b.n	8009c04 <HAL_RCC_OscConfig+0x54c>
 8009b88:	40023800 	.word	0x40023800
 8009b8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009b90:	4b1f      	ldr	r3, [pc, #124]	; (8009c10 <HAL_RCC_OscConfig+0x558>)
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d030      	beq.n	8009c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d129      	bne.n	8009c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d122      	bne.n	8009c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d119      	bne.n	8009c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d10f      	bne.n	8009c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d107      	bne.n	8009c00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d001      	beq.n	8009c04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e000      	b.n	8009c06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40023800 	.word	0x40023800

08009c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0d0      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c2c:	4b6a      	ldr	r3, [pc, #424]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d910      	bls.n	8009c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3a:	4b67      	ldr	r3, [pc, #412]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f023 020f 	bic.w	r2, r3, #15
 8009c42:	4965      	ldr	r1, [pc, #404]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c4a:	4b63      	ldr	r3, [pc, #396]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d001      	beq.n	8009c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0b8      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d020      	beq.n	8009caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c74:	4b59      	ldr	r3, [pc, #356]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	4a58      	ldr	r2, [pc, #352]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0308 	and.w	r3, r3, #8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c8c:	4b53      	ldr	r3, [pc, #332]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	4a52      	ldr	r2, [pc, #328]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c98:	4b50      	ldr	r3, [pc, #320]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	494d      	ldr	r1, [pc, #308]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d040      	beq.n	8009d38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d107      	bne.n	8009cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cbe:	4b47      	ldr	r3, [pc, #284]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d115      	bne.n	8009cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e07f      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d107      	bne.n	8009ce6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cd6:	4b41      	ldr	r3, [pc, #260]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e073      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ce6:	4b3d      	ldr	r3, [pc, #244]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e06b      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009cf6:	4b39      	ldr	r3, [pc, #228]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f023 0203 	bic.w	r2, r3, #3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	4936      	ldr	r1, [pc, #216]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d08:	f7fe f9a2 	bl	8008050 <HAL_GetTick>
 8009d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d0e:	e00a      	b.n	8009d26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d10:	f7fe f99e 	bl	8008050 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d901      	bls.n	8009d26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009d22:	2303      	movs	r3, #3
 8009d24:	e053      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d26:	4b2d      	ldr	r3, [pc, #180]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f003 020c 	and.w	r2, r3, #12
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d1eb      	bne.n	8009d10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d38:	4b27      	ldr	r3, [pc, #156]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d210      	bcs.n	8009d68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d46:	4b24      	ldr	r3, [pc, #144]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f023 020f 	bic.w	r2, r3, #15
 8009d4e:	4922      	ldr	r1, [pc, #136]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d56:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 030f 	and.w	r3, r3, #15
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d001      	beq.n	8009d68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e032      	b.n	8009dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d008      	beq.n	8009d86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d74:	4b19      	ldr	r3, [pc, #100]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	4916      	ldr	r1, [pc, #88]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009d92:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	00db      	lsls	r3, r3, #3
 8009da0:	490e      	ldr	r1, [pc, #56]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009da6:	f000 f821 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 8009daa:	4602      	mov	r2, r0
 8009dac:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <HAL_RCC_ClockConfig+0x1c8>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	091b      	lsrs	r3, r3, #4
 8009db2:	f003 030f 	and.w	r3, r3, #15
 8009db6:	490a      	ldr	r1, [pc, #40]	; (8009de0 <HAL_RCC_ClockConfig+0x1cc>)
 8009db8:	5ccb      	ldrb	r3, [r1, r3]
 8009dba:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbe:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <HAL_RCC_ClockConfig+0x1d0>)
 8009dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009dc2:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <HAL_RCC_ClockConfig+0x1d4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe f8fe 	bl	8007fc8 <HAL_InitTick>

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	40023c00 	.word	0x40023c00
 8009ddc:	40023800 	.word	0x40023800
 8009de0:	0809006c 	.word	0x0809006c
 8009de4:	2000097c 	.word	0x2000097c
 8009de8:	20000984 	.word	0x20000984

08009dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009df0:	b094      	sub	sp, #80	; 0x50
 8009df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	647b      	str	r3, [r7, #68]	; 0x44
 8009df8:	2300      	movs	r3, #0
 8009dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e04:	4b79      	ldr	r3, [pc, #484]	; (8009fec <HAL_RCC_GetSysClockFreq+0x200>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 030c 	and.w	r3, r3, #12
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d00d      	beq.n	8009e2c <HAL_RCC_GetSysClockFreq+0x40>
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	f200 80e1 	bhi.w	8009fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <HAL_RCC_GetSysClockFreq+0x34>
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d003      	beq.n	8009e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8009e1e:	e0db      	b.n	8009fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e20:	4b73      	ldr	r3, [pc, #460]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e24:	e0db      	b.n	8009fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e26:	4b73      	ldr	r3, [pc, #460]	; (8009ff4 <HAL_RCC_GetSysClockFreq+0x208>)
 8009e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e2a:	e0d8      	b.n	8009fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e2c:	4b6f      	ldr	r3, [pc, #444]	; (8009fec <HAL_RCC_GetSysClockFreq+0x200>)
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009e36:	4b6d      	ldr	r3, [pc, #436]	; (8009fec <HAL_RCC_GetSysClockFreq+0x200>)
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d063      	beq.n	8009f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e42:	4b6a      	ldr	r3, [pc, #424]	; (8009fec <HAL_RCC_GetSysClockFreq+0x200>)
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	099b      	lsrs	r3, r3, #6
 8009e48:	2200      	movs	r2, #0
 8009e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e54:	633b      	str	r3, [r7, #48]	; 0x30
 8009e56:	2300      	movs	r3, #0
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009e5e:	4622      	mov	r2, r4
 8009e60:	462b      	mov	r3, r5
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f04f 0100 	mov.w	r1, #0
 8009e6a:	0159      	lsls	r1, r3, #5
 8009e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e70:	0150      	lsls	r0, r2, #5
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4621      	mov	r1, r4
 8009e78:	1a51      	subs	r1, r2, r1
 8009e7a:	6139      	str	r1, [r7, #16]
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e90:	4659      	mov	r1, fp
 8009e92:	018b      	lsls	r3, r1, #6
 8009e94:	4651      	mov	r1, sl
 8009e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e9a:	4651      	mov	r1, sl
 8009e9c:	018a      	lsls	r2, r1, #6
 8009e9e:	4651      	mov	r1, sl
 8009ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8009ea4:	4659      	mov	r1, fp
 8009ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8009eaa:	f04f 0200 	mov.w	r2, #0
 8009eae:	f04f 0300 	mov.w	r3, #0
 8009eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ebe:	4690      	mov	r8, r2
 8009ec0:	4699      	mov	r9, r3
 8009ec2:	4623      	mov	r3, r4
 8009ec4:	eb18 0303 	adds.w	r3, r8, r3
 8009ec8:	60bb      	str	r3, [r7, #8]
 8009eca:	462b      	mov	r3, r5
 8009ecc:	eb49 0303 	adc.w	r3, r9, r3
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	f04f 0200 	mov.w	r2, #0
 8009ed6:	f04f 0300 	mov.w	r3, #0
 8009eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ede:	4629      	mov	r1, r5
 8009ee0:	024b      	lsls	r3, r1, #9
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009ee8:	4621      	mov	r1, r4
 8009eea:	024a      	lsls	r2, r1, #9
 8009eec:	4610      	mov	r0, r2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009efc:	f7f6 f9f8 	bl	80002f0 <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4613      	mov	r3, r2
 8009f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f08:	e058      	b.n	8009fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f0a:	4b38      	ldr	r3, [pc, #224]	; (8009fec <HAL_RCC_GetSysClockFreq+0x200>)
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	099b      	lsrs	r3, r3, #6
 8009f10:	2200      	movs	r2, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	4611      	mov	r1, r2
 8009f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f1a:	623b      	str	r3, [r7, #32]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	f04f 0000 	mov.w	r0, #0
 8009f2c:	f04f 0100 	mov.w	r1, #0
 8009f30:	0159      	lsls	r1, r3, #5
 8009f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f36:	0150      	lsls	r0, r2, #5
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f42:	4649      	mov	r1, r9
 8009f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f48:	f04f 0200 	mov.w	r2, #0
 8009f4c:	f04f 0300 	mov.w	r3, #0
 8009f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8009f60:	eb63 050b 	sbc.w	r5, r3, fp
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	00eb      	lsls	r3, r5, #3
 8009f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f72:	00e2      	lsls	r2, r4, #3
 8009f74:	4614      	mov	r4, r2
 8009f76:	461d      	mov	r5, r3
 8009f78:	4643      	mov	r3, r8
 8009f7a:	18e3      	adds	r3, r4, r3
 8009f7c:	603b      	str	r3, [r7, #0]
 8009f7e:	464b      	mov	r3, r9
 8009f80:	eb45 0303 	adc.w	r3, r5, r3
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f92:	4629      	mov	r1, r5
 8009f94:	028b      	lsls	r3, r1, #10
 8009f96:	4621      	mov	r1, r4
 8009f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	028a      	lsls	r2, r1, #10
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	61fa      	str	r2, [r7, #28]
 8009fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fb0:	f7f6 f99e 	bl	80002f0 <__aeabi_uldivmod>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4613      	mov	r3, r2
 8009fba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009fbc:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <HAL_RCC_GetSysClockFreq+0x200>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	0c1b      	lsrs	r3, r3, #16
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8009fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fd6:	e002      	b.n	8009fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009fda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3750      	adds	r7, #80	; 0x50
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fea:	bf00      	nop
 8009fec:	40023800 	.word	0x40023800
 8009ff0:	00f42400 	.word	0x00f42400
 8009ff4:	007a1200 	.word	0x007a1200

08009ff8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ffc:	4b03      	ldr	r3, [pc, #12]	; (800a00c <HAL_RCC_GetHCLKFreq+0x14>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
}
 800a000:	4618      	mov	r0, r3
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	2000097c 	.word	0x2000097c

0800a010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a014:	f7ff fff0 	bl	8009ff8 <HAL_RCC_GetHCLKFreq>
 800a018:	4602      	mov	r2, r0
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	0a9b      	lsrs	r3, r3, #10
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	4903      	ldr	r1, [pc, #12]	; (800a034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a026:	5ccb      	ldrb	r3, [r1, r3]
 800a028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	40023800 	.word	0x40023800
 800a034:	0809007c 	.word	0x0809007c

0800a038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a03c:	f7ff ffdc 	bl	8009ff8 <HAL_RCC_GetHCLKFreq>
 800a040:	4602      	mov	r2, r0
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	0b5b      	lsrs	r3, r3, #13
 800a048:	f003 0307 	and.w	r3, r3, #7
 800a04c:	4903      	ldr	r1, [pc, #12]	; (800a05c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a04e:	5ccb      	ldrb	r3, [r1, r3]
 800a050:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a054:	4618      	mov	r0, r3
 800a056:	bd80      	pop	{r7, pc}
 800a058:	40023800 	.word	0x40023800
 800a05c:	0809007c 	.word	0x0809007c

0800a060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	d012      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a088:	4b69      	ldr	r3, [pc, #420]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	4a68      	ldr	r2, [pc, #416]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a08e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a092:	6093      	str	r3, [r2, #8]
 800a094:	4b66      	ldr	r3, [pc, #408]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09c:	4964      	ldr	r1, [pc, #400]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d017      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0ba:	4b5d      	ldr	r3, [pc, #372]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c8:	4959      	ldr	r1, [pc, #356]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0d8:	d101      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d017      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a0f6:	4b4e      	ldr	r3, [pc, #312]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	494a      	ldr	r1, [pc, #296]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a106:	4313      	orrs	r3, r2
 800a108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a114:	d101      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a116:	2301      	movs	r3, #1
 800a118:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a122:	2301      	movs	r3, #1
 800a124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a132:	2301      	movs	r3, #1
 800a134:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 808b 	beq.w	800a25a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a144:	4b3a      	ldr	r3, [pc, #232]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a148:	4a39      	ldr	r2, [pc, #228]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a14e:	6413      	str	r3, [r2, #64]	; 0x40
 800a150:	4b37      	ldr	r3, [pc, #220]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a158:	60bb      	str	r3, [r7, #8]
 800a15a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a15c:	4b35      	ldr	r3, [pc, #212]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a34      	ldr	r2, [pc, #208]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a168:	f7fd ff72 	bl	8008050 <HAL_GetTick>
 800a16c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a16e:	e008      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a170:	f7fd ff6e 	bl	8008050 <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b64      	cmp	r3, #100	; 0x64
 800a17c:	d901      	bls.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e38f      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a182:	4b2c      	ldr	r3, [pc, #176]	; (800a234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0f0      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a18e:	4b28      	ldr	r3, [pc, #160]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a196:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d035      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d02e      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a1ac:	4b20      	ldr	r3, [pc, #128]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a1b6:	4b1e      	ldr	r3, [pc, #120]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ba:	4a1d      	ldr	r2, [pc, #116]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a1c2:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	4a1a      	ldr	r2, [pc, #104]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a1ce:	4a18      	ldr	r2, [pc, #96]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d114      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e0:	f7fd ff36 	bl	8008050 <HAL_GetTick>
 800a1e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1e6:	e00a      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1e8:	f7fd ff32 	bl	8008050 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e351      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1fe:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0ee      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a216:	d111      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a218:	4b05      	ldr	r3, [pc, #20]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a224:	4b04      	ldr	r3, [pc, #16]	; (800a238 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a226:	400b      	ands	r3, r1
 800a228:	4901      	ldr	r1, [pc, #4]	; (800a230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	608b      	str	r3, [r1, #8]
 800a22e:	e00b      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a230:	40023800 	.word	0x40023800
 800a234:	40007000 	.word	0x40007000
 800a238:	0ffffcff 	.word	0x0ffffcff
 800a23c:	4bac      	ldr	r3, [pc, #688]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	4aab      	ldr	r2, [pc, #684]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a242:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a246:	6093      	str	r3, [r2, #8]
 800a248:	4ba9      	ldr	r3, [pc, #676]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a24a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a254:	49a6      	ldr	r1, [pc, #664]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a256:	4313      	orrs	r3, r2
 800a258:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0310 	and.w	r3, r3, #16
 800a262:	2b00      	cmp	r3, #0
 800a264:	d010      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a266:	4ba2      	ldr	r3, [pc, #648]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a26c:	4aa0      	ldr	r2, [pc, #640]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a26e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a272:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a276:	4b9e      	ldr	r3, [pc, #632]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a278:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a280:	499b      	ldr	r1, [pc, #620]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a282:	4313      	orrs	r3, r2
 800a284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00a      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a294:	4b96      	ldr	r3, [pc, #600]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a2:	4993      	ldr	r1, [pc, #588]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00a      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a2b6:	4b8e      	ldr	r3, [pc, #568]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2c4:	498a      	ldr	r1, [pc, #552]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00a      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a2d8:	4b85      	ldr	r3, [pc, #532]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e6:	4982      	ldr	r1, [pc, #520]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2fa:	4b7d      	ldr	r3, [pc, #500]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a300:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a308:	4979      	ldr	r1, [pc, #484]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a31c:	4b74      	ldr	r3, [pc, #464]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a322:	f023 0203 	bic.w	r2, r3, #3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32a:	4971      	ldr	r1, [pc, #452]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a33e:	4b6c      	ldr	r3, [pc, #432]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a344:	f023 020c 	bic.w	r2, r3, #12
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a34c:	4968      	ldr	r1, [pc, #416]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a360:	4b63      	ldr	r3, [pc, #396]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a366:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36e:	4960      	ldr	r1, [pc, #384]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a370:	4313      	orrs	r3, r2
 800a372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a382:	4b5b      	ldr	r3, [pc, #364]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a388:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a390:	4957      	ldr	r1, [pc, #348]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a392:	4313      	orrs	r3, r2
 800a394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00a      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a3a4:	4b52      	ldr	r3, [pc, #328]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b2:	494f      	ldr	r1, [pc, #316]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a3c6:	4b4a      	ldr	r3, [pc, #296]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d4:	4946      	ldr	r1, [pc, #280]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a3e8:	4b41      	ldr	r3, [pc, #260]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f6:	493e      	ldr	r1, [pc, #248]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a40a:	4b39      	ldr	r3, [pc, #228]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a418:	4935      	ldr	r1, [pc, #212]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00a      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a42c:	4b30      	ldr	r3, [pc, #192]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a432:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a43a:	492d      	ldr	r1, [pc, #180]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d011      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a44e:	4b28      	ldr	r3, [pc, #160]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a454:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a45c:	4924      	ldr	r1, [pc, #144]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a46c:	d101      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a46e:	2301      	movs	r3, #1
 800a470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a47e:	2301      	movs	r3, #1
 800a480:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00a      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a48e:	4b18      	ldr	r3, [pc, #96]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a494:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a49c:	4914      	ldr	r1, [pc, #80]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a4b0:	4b0f      	ldr	r3, [pc, #60]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c0:	490b      	ldr	r1, [pc, #44]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00f      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a4d4:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e4:	4902      	ldr	r1, [pc, #8]	; (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a4ec:	e002      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800a4ee:	bf00      	nop
 800a4f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a500:	4b8a      	ldr	r3, [pc, #552]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a506:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a510:	4986      	ldr	r1, [pc, #536]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a512:	4313      	orrs	r3, r2
 800a514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a524:	4b81      	ldr	r3, [pc, #516]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a52a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a534:	497d      	ldr	r1, [pc, #500]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a536:	4313      	orrs	r3, r2
 800a538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d006      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 80d6 	beq.w	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a550:	4b76      	ldr	r3, [pc, #472]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a75      	ldr	r2, [pc, #468]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a55a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55c:	f7fd fd78 	bl	8008050 <HAL_GetTick>
 800a560:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a562:	e008      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a564:	f7fd fd74 	bl	8008050 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b64      	cmp	r3, #100	; 0x64
 800a570:	d901      	bls.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e195      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a576:	4b6d      	ldr	r3, [pc, #436]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f0      	bne.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d021      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a592:	2b00      	cmp	r3, #0
 800a594:	d11d      	bne.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a596:	4b65      	ldr	r3, [pc, #404]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a59c:	0c1b      	lsrs	r3, r3, #16
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a5a4:	4b61      	ldr	r3, [pc, #388]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5aa:	0e1b      	lsrs	r3, r3, #24
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	019a      	lsls	r2, r3, #6
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	061b      	lsls	r3, r3, #24
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	071b      	lsls	r3, r3, #28
 800a5ca:	4958      	ldr	r1, [pc, #352]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e6:	d00a      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02e      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5fc:	d129      	bne.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a5fe:	4b4b      	ldr	r3, [pc, #300]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a604:	0c1b      	lsrs	r3, r3, #16
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a60c:	4b47      	ldr	r3, [pc, #284]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a60e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a612:	0f1b      	lsrs	r3, r3, #28
 800a614:	f003 0307 	and.w	r3, r3, #7
 800a618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	019a      	lsls	r2, r3, #6
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	041b      	lsls	r3, r3, #16
 800a624:	431a      	orrs	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	061b      	lsls	r3, r3, #24
 800a62c:	431a      	orrs	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	071b      	lsls	r3, r3, #28
 800a632:	493e      	ldr	r1, [pc, #248]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a634:	4313      	orrs	r3, r2
 800a636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a63a:	4b3c      	ldr	r3, [pc, #240]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a640:	f023 021f 	bic.w	r2, r3, #31
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	3b01      	subs	r3, #1
 800a64a:	4938      	ldr	r1, [pc, #224]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a64c:	4313      	orrs	r3, r2
 800a64e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01d      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a65e:	4b33      	ldr	r3, [pc, #204]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a664:	0e1b      	lsrs	r3, r3, #24
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a66c:	4b2f      	ldr	r3, [pc, #188]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a66e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a672:	0f1b      	lsrs	r3, r3, #28
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	019a      	lsls	r2, r3, #6
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	041b      	lsls	r3, r3, #16
 800a686:	431a      	orrs	r2, r3
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	061b      	lsls	r3, r3, #24
 800a68c:	431a      	orrs	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	071b      	lsls	r3, r3, #28
 800a692:	4926      	ldr	r1, [pc, #152]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a694:	4313      	orrs	r3, r2
 800a696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d011      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	019a      	lsls	r2, r3, #6
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	041b      	lsls	r3, r3, #16
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	061b      	lsls	r3, r3, #24
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	071b      	lsls	r3, r3, #28
 800a6c2:	491a      	ldr	r1, [pc, #104]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a6ca:	4b18      	ldr	r3, [pc, #96]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a17      	ldr	r2, [pc, #92]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a6d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d6:	f7fd fcbb 	bl	8008050 <HAL_GetTick>
 800a6da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6dc:	e008      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a6de:	f7fd fcb7 	bl	8008050 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b64      	cmp	r3, #100	; 0x64
 800a6ea:	d901      	bls.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e0d8      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6f0:	4b0e      	ldr	r3, [pc, #56]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0f0      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	f040 80ce 	bne.w	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a704:	4b09      	ldr	r3, [pc, #36]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a08      	ldr	r2, [pc, #32]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a70a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a70e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a710:	f7fd fc9e 	bl	8008050 <HAL_GetTick>
 800a714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a716:	e00b      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a718:	f7fd fc9a 	bl	8008050 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b64      	cmp	r3, #100	; 0x64
 800a724:	d904      	bls.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e0bb      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a72a:	bf00      	nop
 800a72c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a730:	4b5e      	ldr	r3, [pc, #376]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a73c:	d0ec      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d009      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d02e      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d12a      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a766:	4b51      	ldr	r3, [pc, #324]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76c:	0c1b      	lsrs	r3, r3, #16
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a774:	4b4d      	ldr	r3, [pc, #308]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77a:	0f1b      	lsrs	r3, r3, #28
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	019a      	lsls	r2, r3, #6
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	061b      	lsls	r3, r3, #24
 800a794:	431a      	orrs	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	071b      	lsls	r3, r3, #28
 800a79a:	4944      	ldr	r1, [pc, #272]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a7a2:	4b42      	ldr	r3, [pc, #264]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	493d      	ldr	r1, [pc, #244]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d022      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7d0:	d11d      	bne.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a7d2:	4b36      	ldr	r3, [pc, #216]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a7d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d8:	0e1b      	lsrs	r3, r3, #24
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a7e0:	4b32      	ldr	r3, [pc, #200]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e6:	0f1b      	lsrs	r3, r3, #28
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	019a      	lsls	r2, r3, #6
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a1b      	ldr	r3, [r3, #32]
 800a7f8:	041b      	lsls	r3, r3, #16
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	061b      	lsls	r3, r3, #24
 800a800:	431a      	orrs	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	071b      	lsls	r3, r3, #28
 800a806:	4929      	ldr	r1, [pc, #164]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b00      	cmp	r3, #0
 800a818:	d028      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a81a:	4b24      	ldr	r3, [pc, #144]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a820:	0e1b      	lsrs	r3, r3, #24
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a828:	4b20      	ldr	r3, [pc, #128]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82e:	0c1b      	lsrs	r3, r3, #16
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	019a      	lsls	r2, r3, #6
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	431a      	orrs	r2, r3
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	061b      	lsls	r3, r3, #24
 800a846:	431a      	orrs	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	071b      	lsls	r3, r3, #28
 800a84e:	4917      	ldr	r1, [pc, #92]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a850:	4313      	orrs	r3, r2
 800a852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a856:	4b15      	ldr	r3, [pc, #84]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a85c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	4911      	ldr	r1, [pc, #68]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a866:	4313      	orrs	r3, r2
 800a868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a0e      	ldr	r2, [pc, #56]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a878:	f7fd fbea 	bl	8008050 <HAL_GetTick>
 800a87c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a87e:	e008      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a880:	f7fd fbe6 	bl	8008050 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b64      	cmp	r3, #100	; 0x64
 800a88c:	d901      	bls.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e007      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a89a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89e:	d1ef      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3720      	adds	r7, #32
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	40023800 	.word	0x40023800

0800a8b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e01c      	b.n	800a8fc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	795b      	ldrb	r3, [r3, #5]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7fb fefc 	bl	80066d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f042 0204 	orr.w	r2, r2, #4
 800a8ec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e09d      	b.n	800aa52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d108      	bne.n	800a930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a926:	d009      	beq.n	800a93c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	61da      	str	r2, [r3, #28]
 800a92e:	e005      	b.n	800a93c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d106      	bne.n	800a95c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7fb ff2c 	bl	80067b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a972:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a97c:	d902      	bls.n	800a984 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e002      	b.n	800a98a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a988:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a992:	d007      	beq.n	800a9a4 <HAL_SPI_Init+0xa0>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a99c:	d002      	beq.n	800a9a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9dc:	431a      	orrs	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e6:	ea42 0103 	orr.w	r1, r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	0c1b      	lsrs	r3, r3, #16
 800aa00:	f003 0204 	and.w	r2, r3, #4
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa12:	f003 0308 	and.w	r3, r3, #8
 800aa16:	431a      	orrs	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa20:	ea42 0103 	orr.w	r1, r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	69da      	ldr	r2, [r3, #28]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b088      	sub	sp, #32
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4613      	mov	r3, r2
 800aa68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d101      	bne.n	800aa7c <HAL_SPI_Transmit+0x22>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e158      	b.n	800ad2e <HAL_SPI_Transmit+0x2d4>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa84:	f7fd fae4 	bl	8008050 <HAL_GetTick>
 800aa88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800aa8a:	88fb      	ldrh	r3, [r7, #6]
 800aa8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d002      	beq.n	800aaa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aa9e:	e13d      	b.n	800ad1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <HAL_SPI_Transmit+0x52>
 800aaa6:	88fb      	ldrh	r3, [r7, #6]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aab0:	e134      	b.n	800ad1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2203      	movs	r2, #3
 800aab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	88fa      	ldrh	r2, [r7, #6]
 800aaca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	88fa      	ldrh	r2, [r7, #6]
 800aad0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aafc:	d10f      	bne.n	800ab1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d007      	beq.n	800ab3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab44:	d94b      	bls.n	800abde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <HAL_SPI_Transmit+0xfa>
 800ab4e:	8afb      	ldrh	r3, [r7, #22]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d13e      	bne.n	800abd2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	881a      	ldrh	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab64:	1c9a      	adds	r2, r3, #2
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab78:	e02b      	b.n	800abd2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d112      	bne.n	800abae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	881a      	ldrh	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	1c9a      	adds	r2, r3, #2
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800abac:	e011      	b.n	800abd2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abae:	f7fd fa4f 	bl	8008050 <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d803      	bhi.n	800abc6 <HAL_SPI_Transmit+0x16c>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc4:	d102      	bne.n	800abcc <HAL_SPI_Transmit+0x172>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	77fb      	strb	r3, [r7, #31]
          goto error;
 800abd0:	e0a4      	b.n	800ad1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1ce      	bne.n	800ab7a <HAL_SPI_Transmit+0x120>
 800abdc:	e07c      	b.n	800acd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <HAL_SPI_Transmit+0x192>
 800abe6:	8afb      	ldrh	r3, [r7, #22]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d170      	bne.n	800acce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d912      	bls.n	800ac1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	881a      	ldrh	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	1c9a      	adds	r2, r3, #2
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	3b02      	subs	r3, #2
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac1a:	e058      	b.n	800acce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	330c      	adds	r3, #12
 800ac26:	7812      	ldrb	r2, [r2, #0]
 800ac28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ac42:	e044      	b.n	800acce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f003 0302 	and.w	r3, r3, #2
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d12b      	bne.n	800acaa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d912      	bls.n	800ac82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac60:	881a      	ldrh	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6c:	1c9a      	adds	r2, r3, #2
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	3b02      	subs	r3, #2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac80:	e025      	b.n	800acce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	7812      	ldrb	r2, [r2, #0]
 800ac8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	3b01      	subs	r3, #1
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aca8:	e011      	b.n	800acce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acaa:	f7fd f9d1 	bl	8008050 <HAL_GetTick>
 800acae:	4602      	mov	r2, r0
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d803      	bhi.n	800acc2 <HAL_SPI_Transmit+0x268>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc0:	d102      	bne.n	800acc8 <HAL_SPI_Transmit+0x26e>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d102      	bne.n	800acce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800accc:	e026      	b.n	800ad1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1b5      	bne.n	800ac44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 f949 	bl	800af74 <SPI_EndRxTxTransaction>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2220      	movs	r2, #32
 800acec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10a      	bne.n	800ad0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e000      	b.n	800ad1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800ad1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ad2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	603b      	str	r3, [r7, #0]
 800ad44:	4613      	mov	r3, r2
 800ad46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad48:	f7fd f982 	bl	8008050 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4413      	add	r3, r2
 800ad56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad58:	f7fd f97a 	bl	8008050 <HAL_GetTick>
 800ad5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad5e:	4b39      	ldr	r3, [pc, #228]	; (800ae44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	015b      	lsls	r3, r3, #5
 800ad64:	0d1b      	lsrs	r3, r3, #20
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	fb02 f303 	mul.w	r3, r2, r3
 800ad6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad6e:	e054      	b.n	800ae1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad76:	d050      	beq.n	800ae1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad78:	f7fd f96a 	bl	8008050 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d902      	bls.n	800ad8e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d13d      	bne.n	800ae0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ada6:	d111      	bne.n	800adcc <SPI_WaitFlagStateUntilTimeout+0x94>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adb0:	d004      	beq.n	800adbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adba:	d107      	bne.n	800adcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add4:	d10f      	bne.n	800adf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e017      	b.n	800ae3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	4013      	ands	r3, r2
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	bf0c      	ite	eq
 800ae2a:	2301      	moveq	r3, #1
 800ae2c:	2300      	movne	r3, #0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d19b      	bne.n	800ad70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3720      	adds	r7, #32
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000097c 	.word	0x2000097c

0800ae48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	; 0x28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae5a:	f7fd f8f9 	bl	8008050 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	1a9b      	subs	r3, r3, r2
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	4413      	add	r3, r2
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ae6a:	f7fd f8f1 	bl	8008050 <HAL_GetTick>
 800ae6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	330c      	adds	r3, #12
 800ae76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae78:	4b3d      	ldr	r3, [pc, #244]	; (800af70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	00da      	lsls	r2, r3, #3
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	0d1b      	lsrs	r3, r3, #20
 800ae88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8a:	fb02 f303 	mul.w	r3, r2, r3
 800ae8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae90:	e060      	b.n	800af54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae98:	d107      	bne.n	800aeaa <SPI_WaitFifoStateUntilTimeout+0x62>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d104      	bne.n	800aeaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb0:	d050      	beq.n	800af54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aeb2:	f7fd f8cd 	bl	8008050 <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d902      	bls.n	800aec8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d13d      	bne.n	800af44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aed6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aee0:	d111      	bne.n	800af06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeea:	d004      	beq.n	800aef6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aef4:	d107      	bne.n	800af06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af0e:	d10f      	bne.n	800af30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e010      	b.n	800af66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	3b01      	subs	r3, #1
 800af52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	4013      	ands	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d196      	bne.n	800ae92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3728      	adds	r7, #40	; 0x28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2000097c 	.word	0x2000097c

0800af74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af02      	add	r7, sp, #8
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7ff ff5b 	bl	800ae48 <SPI_WaitFifoStateUntilTimeout>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af9c:	f043 0220 	orr.w	r2, r3, #32
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e046      	b.n	800b036 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <SPI_EndRxTxTransaction+0xcc>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a25      	ldr	r2, [pc, #148]	; (800b044 <SPI_EndRxTxTransaction+0xd0>)
 800afae:	fba2 2303 	umull	r2, r3, r2, r3
 800afb2:	0d5b      	lsrs	r3, r3, #21
 800afb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afb8:	fb02 f303 	mul.w	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afc6:	d112      	bne.n	800afee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2200      	movs	r2, #0
 800afd0:	2180      	movs	r1, #128	; 0x80
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7ff feb0 	bl	800ad38 <SPI_WaitFlagStateUntilTimeout>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d016      	beq.n	800b00c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afe2:	f043 0220 	orr.w	r2, r3, #32
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e023      	b.n	800b036 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00a      	beq.n	800b00a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b004:	2b80      	cmp	r3, #128	; 0x80
 800b006:	d0f2      	beq.n	800afee <SPI_EndRxTxTransaction+0x7a>
 800b008:	e000      	b.n	800b00c <SPI_EndRxTxTransaction+0x98>
        break;
 800b00a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2200      	movs	r2, #0
 800b014:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7ff ff15 	bl	800ae48 <SPI_WaitFifoStateUntilTimeout>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d007      	beq.n	800b034 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b028:	f043 0220 	orr.w	r2, r3, #32
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e000      	b.n	800b036 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	2000097c 	.word	0x2000097c
 800b044:	165e9f81 	.word	0x165e9f81

0800b048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e049      	b.n	800b0ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7fb fde8 	bl	8006c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2202      	movs	r2, #2
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f000 faee 	bl	800b668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d001      	beq.n	800b110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e054      	b.n	800b1ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a26      	ldr	r2, [pc, #152]	; (800b1c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d022      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13a:	d01d      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a22      	ldr	r2, [pc, #136]	; (800b1cc <HAL_TIM_Base_Start_IT+0xd4>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d018      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a21      	ldr	r2, [pc, #132]	; (800b1d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d013      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1f      	ldr	r2, [pc, #124]	; (800b1d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d00e      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1e      	ldr	r2, [pc, #120]	; (800b1d8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d009      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a1c      	ldr	r2, [pc, #112]	; (800b1dc <HAL_TIM_Base_Start_IT+0xe4>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d004      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x80>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a1b      	ldr	r2, [pc, #108]	; (800b1e0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d115      	bne.n	800b1a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	4b19      	ldr	r3, [pc, #100]	; (800b1e4 <HAL_TIM_Base_Start_IT+0xec>)
 800b180:	4013      	ands	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b06      	cmp	r3, #6
 800b188:	d015      	beq.n	800b1b6 <HAL_TIM_Base_Start_IT+0xbe>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b190:	d011      	beq.n	800b1b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f042 0201 	orr.w	r2, r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a2:	e008      	b.n	800b1b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f042 0201 	orr.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	e000      	b.n	800b1b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40010000 	.word	0x40010000
 800b1cc:	40000400 	.word	0x40000400
 800b1d0:	40000800 	.word	0x40000800
 800b1d4:	40000c00 	.word	0x40000c00
 800b1d8:	40010400 	.word	0x40010400
 800b1dc:	40014000 	.word	0x40014000
 800b1e0:	40001800 	.word	0x40001800
 800b1e4:	00010007 	.word	0x00010007

0800b1e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68da      	ldr	r2, [r3, #12]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f022 0201 	bic.w	r2, r2, #1
 800b1fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6a1a      	ldr	r2, [r3, #32]
 800b206:	f241 1311 	movw	r3, #4369	; 0x1111
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10f      	bne.n	800b230 <HAL_TIM_Base_Stop_IT+0x48>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6a1a      	ldr	r2, [r3, #32]
 800b216:	f240 4344 	movw	r3, #1092	; 0x444
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d107      	bne.n	800b230 <HAL_TIM_Base_Stop_IT+0x48>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0201 	bic.w	r2, r2, #1
 800b22e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d122      	bne.n	800b2a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f003 0302 	and.w	r3, r3, #2
 800b266:	2b02      	cmp	r3, #2
 800b268:	d11b      	bne.n	800b2a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f06f 0202 	mvn.w	r2, #2
 800b272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	f003 0303 	and.w	r3, r3, #3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f9cf 	bl	800b62c <HAL_TIM_IC_CaptureCallback>
 800b28e:	e005      	b.n	800b29c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f9c1 	bl	800b618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f9d2 	bl	800b640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d122      	bne.n	800b2f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	d11b      	bne.n	800b2f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f06f 0204 	mvn.w	r2, #4
 800b2c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f9a5 	bl	800b62c <HAL_TIM_IC_CaptureCallback>
 800b2e2:	e005      	b.n	800b2f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f997 	bl	800b618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f9a8 	bl	800b640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f003 0308 	and.w	r3, r3, #8
 800b300:	2b08      	cmp	r3, #8
 800b302:	d122      	bne.n	800b34a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f003 0308 	and.w	r3, r3, #8
 800b30e:	2b08      	cmp	r3, #8
 800b310:	d11b      	bne.n	800b34a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f06f 0208 	mvn.w	r2, #8
 800b31a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2204      	movs	r2, #4
 800b320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69db      	ldr	r3, [r3, #28]
 800b328:	f003 0303 	and.w	r3, r3, #3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f97b 	bl	800b62c <HAL_TIM_IC_CaptureCallback>
 800b336:	e005      	b.n	800b344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f96d 	bl	800b618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f97e 	bl	800b640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	2b10      	cmp	r3, #16
 800b356:	d122      	bne.n	800b39e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	f003 0310 	and.w	r3, r3, #16
 800b362:	2b10      	cmp	r3, #16
 800b364:	d11b      	bne.n	800b39e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f06f 0210 	mvn.w	r2, #16
 800b36e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2208      	movs	r2, #8
 800b374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f951 	bl	800b62c <HAL_TIM_IC_CaptureCallback>
 800b38a:	e005      	b.n	800b398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f943 	bl	800b618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f954 	bl	800b640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d10e      	bne.n	800b3ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d107      	bne.n	800b3ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f06f 0201 	mvn.w	r2, #1
 800b3c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7fa fbf7 	bl	8005bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d4:	2b80      	cmp	r3, #128	; 0x80
 800b3d6:	d10e      	bne.n	800b3f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e2:	2b80      	cmp	r3, #128	; 0x80
 800b3e4:	d107      	bne.n	800b3f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fb0b 	bl	800ba0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b404:	d10e      	bne.n	800b424 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b410:	2b80      	cmp	r3, #128	; 0x80
 800b412:	d107      	bne.n	800b424 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b41c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fafe 	bl	800ba20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d10e      	bne.n	800b450 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d107      	bne.n	800b450 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f902 	bl	800b654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	d10e      	bne.n	800b47c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d107      	bne.n	800b47c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f06f 0220 	mvn.w	r2, #32
 800b474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fabe 	bl	800b9f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d101      	bne.n	800b4a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b49c:	2302      	movs	r3, #2
 800b49e:	e0b4      	b.n	800b60a <HAL_TIM_ConfigClockSource+0x186>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	4b56      	ldr	r3, [pc, #344]	; (800b614 <HAL_TIM_ConfigClockSource+0x190>)
 800b4bc:	4013      	ands	r3, r2
 800b4be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d8:	d03e      	beq.n	800b558 <HAL_TIM_ConfigClockSource+0xd4>
 800b4da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4de:	f200 8087 	bhi.w	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e6:	f000 8086 	beq.w	800b5f6 <HAL_TIM_ConfigClockSource+0x172>
 800b4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ee:	d87f      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b4f0:	2b70      	cmp	r3, #112	; 0x70
 800b4f2:	d01a      	beq.n	800b52a <HAL_TIM_ConfigClockSource+0xa6>
 800b4f4:	2b70      	cmp	r3, #112	; 0x70
 800b4f6:	d87b      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b4f8:	2b60      	cmp	r3, #96	; 0x60
 800b4fa:	d050      	beq.n	800b59e <HAL_TIM_ConfigClockSource+0x11a>
 800b4fc:	2b60      	cmp	r3, #96	; 0x60
 800b4fe:	d877      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b500:	2b50      	cmp	r3, #80	; 0x50
 800b502:	d03c      	beq.n	800b57e <HAL_TIM_ConfigClockSource+0xfa>
 800b504:	2b50      	cmp	r3, #80	; 0x50
 800b506:	d873      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b508:	2b40      	cmp	r3, #64	; 0x40
 800b50a:	d058      	beq.n	800b5be <HAL_TIM_ConfigClockSource+0x13a>
 800b50c:	2b40      	cmp	r3, #64	; 0x40
 800b50e:	d86f      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b510:	2b30      	cmp	r3, #48	; 0x30
 800b512:	d064      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x15a>
 800b514:	2b30      	cmp	r3, #48	; 0x30
 800b516:	d86b      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d060      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x15a>
 800b51c:	2b20      	cmp	r3, #32
 800b51e:	d867      	bhi.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
 800b520:	2b00      	cmp	r3, #0
 800b522:	d05c      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x15a>
 800b524:	2b10      	cmp	r3, #16
 800b526:	d05a      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x15a>
 800b528:	e062      	b.n	800b5f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b53a:	f000 f9af 	bl	800b89c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b54c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	609a      	str	r2, [r3, #8]
      break;
 800b556:	e04f      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b568:	f000 f998 	bl	800b89c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b57a:	609a      	str	r2, [r3, #8]
      break;
 800b57c:	e03c      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b58a:	461a      	mov	r2, r3
 800b58c:	f000 f90c 	bl	800b7a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2150      	movs	r1, #80	; 0x50
 800b596:	4618      	mov	r0, r3
 800b598:	f000 f965 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800b59c:	e02c      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	f000 f92b 	bl	800b806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2160      	movs	r1, #96	; 0x60
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 f955 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800b5bc:	e01c      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f000 f8ec 	bl	800b7a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2140      	movs	r1, #64	; 0x40
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 f945 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800b5dc:	e00c      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f000 f93c 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800b5ee:	e003      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f4:	e000      	b.n	800b5f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	fffeff88 	.word	0xfffeff88

0800b618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a40      	ldr	r2, [pc, #256]	; (800b77c <TIM_Base_SetConfig+0x114>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d013      	beq.n	800b6a8 <TIM_Base_SetConfig+0x40>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b686:	d00f      	beq.n	800b6a8 <TIM_Base_SetConfig+0x40>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a3d      	ldr	r2, [pc, #244]	; (800b780 <TIM_Base_SetConfig+0x118>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d00b      	beq.n	800b6a8 <TIM_Base_SetConfig+0x40>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a3c      	ldr	r2, [pc, #240]	; (800b784 <TIM_Base_SetConfig+0x11c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d007      	beq.n	800b6a8 <TIM_Base_SetConfig+0x40>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a3b      	ldr	r2, [pc, #236]	; (800b788 <TIM_Base_SetConfig+0x120>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d003      	beq.n	800b6a8 <TIM_Base_SetConfig+0x40>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a3a      	ldr	r2, [pc, #232]	; (800b78c <TIM_Base_SetConfig+0x124>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d108      	bne.n	800b6ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a2f      	ldr	r2, [pc, #188]	; (800b77c <TIM_Base_SetConfig+0x114>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d02b      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c8:	d027      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a2c      	ldr	r2, [pc, #176]	; (800b780 <TIM_Base_SetConfig+0x118>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d023      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a2b      	ldr	r2, [pc, #172]	; (800b784 <TIM_Base_SetConfig+0x11c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d01f      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a2a      	ldr	r2, [pc, #168]	; (800b788 <TIM_Base_SetConfig+0x120>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d01b      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a29      	ldr	r2, [pc, #164]	; (800b78c <TIM_Base_SetConfig+0x124>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d017      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a28      	ldr	r2, [pc, #160]	; (800b790 <TIM_Base_SetConfig+0x128>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d013      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a27      	ldr	r2, [pc, #156]	; (800b794 <TIM_Base_SetConfig+0x12c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d00f      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a26      	ldr	r2, [pc, #152]	; (800b798 <TIM_Base_SetConfig+0x130>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00b      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a25      	ldr	r2, [pc, #148]	; (800b79c <TIM_Base_SetConfig+0x134>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d007      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a24      	ldr	r2, [pc, #144]	; (800b7a0 <TIM_Base_SetConfig+0x138>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d003      	beq.n	800b71a <TIM_Base_SetConfig+0xb2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a23      	ldr	r2, [pc, #140]	; (800b7a4 <TIM_Base_SetConfig+0x13c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d108      	bne.n	800b72c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	4313      	orrs	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	4313      	orrs	r3, r2
 800b738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	689a      	ldr	r2, [r3, #8]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a0a      	ldr	r2, [pc, #40]	; (800b77c <TIM_Base_SetConfig+0x114>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d003      	beq.n	800b760 <TIM_Base_SetConfig+0xf8>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a0c      	ldr	r2, [pc, #48]	; (800b78c <TIM_Base_SetConfig+0x124>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d103      	bne.n	800b768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	615a      	str	r2, [r3, #20]
}
 800b76e:	bf00      	nop
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	40010000 	.word	0x40010000
 800b780:	40000400 	.word	0x40000400
 800b784:	40000800 	.word	0x40000800
 800b788:	40000c00 	.word	0x40000c00
 800b78c:	40010400 	.word	0x40010400
 800b790:	40014000 	.word	0x40014000
 800b794:	40014400 	.word	0x40014400
 800b798:	40014800 	.word	0x40014800
 800b79c:	40001800 	.word	0x40001800
 800b7a0:	40001c00 	.word	0x40001c00
 800b7a4:	40002000 	.word	0x40002000

0800b7a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	f023 0201 	bic.w	r2, r3, #1
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f023 030a 	bic.w	r3, r3, #10
 800b7e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	621a      	str	r2, [r3, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b806:	b480      	push	{r7}
 800b808:	b087      	sub	sp, #28
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	f023 0210 	bic.w	r2, r3, #16
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	031b      	lsls	r3, r3, #12
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b866:	b480      	push	{r7}
 800b868:	b085      	sub	sp, #20
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	f043 0307 	orr.w	r3, r3, #7
 800b888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	609a      	str	r2, [r3, #8]
}
 800b890:	bf00      	nop
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	021a      	lsls	r2, r3, #8
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	609a      	str	r2, [r3, #8]
}
 800b8d0:	bf00      	nop
 800b8d2:	371c      	adds	r7, #28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d101      	bne.n	800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	e06d      	b.n	800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2202      	movs	r2, #2
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a30      	ldr	r2, [pc, #192]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d004      	beq.n	800b928 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a2f      	ldr	r2, [pc, #188]	; (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d108      	bne.n	800b93a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b92e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	4313      	orrs	r3, r2
 800b938:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b940:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d022      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b966:	d01d      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a1d      	ldr	r2, [pc, #116]	; (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d018      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a1c      	ldr	r2, [pc, #112]	; (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d013      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a1a      	ldr	r2, [pc, #104]	; (800b9ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d00e      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a15      	ldr	r2, [pc, #84]	; (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d009      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a16      	ldr	r2, [pc, #88]	; (800b9f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d004      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d10c      	bne.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	40010000 	.word	0x40010000
 800b9e0:	40010400 	.word	0x40010400
 800b9e4:	40000400 	.word	0x40000400
 800b9e8:	40000800 	.word	0x40000800
 800b9ec:	40000c00 	.word	0x40000c00
 800b9f0:	40014000 	.word	0x40014000
 800b9f4:	40001800 	.word	0x40001800

0800b9f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e040      	b.n	800bac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7fb f964 	bl	8006d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2224      	movs	r2, #36	; 0x24
 800ba60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f022 0201 	bic.w	r2, r2, #1
 800ba70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f8b0 	bl	800bbd8 <UART_SetConfig>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d101      	bne.n	800ba82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e022      	b.n	800bac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fb08 	bl	800c0a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689a      	ldr	r2, [r3, #8]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800baae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f042 0201 	orr.w	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fb8f 	bl	800c1e4 <UART_CheckIdleState>
 800bac6:	4603      	mov	r3, r0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08a      	sub	sp, #40	; 0x28
 800bad4:	af02      	add	r7, sp, #8
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	603b      	str	r3, [r7, #0]
 800badc:	4613      	mov	r3, r2
 800bade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bae4:	2b20      	cmp	r3, #32
 800bae6:	d171      	bne.n	800bbcc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <HAL_UART_Transmit+0x24>
 800baee:	88fb      	ldrh	r3, [r7, #6]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e06a      	b.n	800bbce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2221      	movs	r2, #33	; 0x21
 800bb04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb06:	f7fc faa3 	bl	8008050 <HAL_GetTick>
 800bb0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	88fa      	ldrh	r2, [r7, #6]
 800bb10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	88fa      	ldrh	r2, [r7, #6]
 800bb18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb24:	d108      	bne.n	800bb38 <HAL_UART_Transmit+0x68>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d104      	bne.n	800bb38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	61bb      	str	r3, [r7, #24]
 800bb36:	e003      	b.n	800bb40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb40:	e02c      	b.n	800bb9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2180      	movs	r1, #128	; 0x80
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 fb96 	bl	800c27e <UART_WaitOnFlagUntilTimeout>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e038      	b.n	800bbce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10b      	bne.n	800bb7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	461a      	mov	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	3302      	adds	r3, #2
 800bb76:	61bb      	str	r3, [r7, #24]
 800bb78:	e007      	b.n	800bb8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	781a      	ldrb	r2, [r3, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	3301      	adds	r3, #1
 800bb88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	3b01      	subs	r3, #1
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1cc      	bne.n	800bb42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2140      	movs	r1, #64	; 0x40
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 fb63 	bl	800c27e <UART_WaitOnFlagUntilTimeout>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e005      	b.n	800bbce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2220      	movs	r2, #32
 800bbc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e000      	b.n	800bbce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bbcc:	2302      	movs	r3, #2
  }
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3720      	adds	r7, #32
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	431a      	orrs	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4ba6      	ldr	r3, [pc, #664]	; (800be9c <UART_SetConfig+0x2c4>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	6979      	ldr	r1, [r7, #20]
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	68da      	ldr	r2, [r3, #12]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	430a      	orrs	r2, r1
 800bc48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a94      	ldr	r2, [pc, #592]	; (800bea0 <UART_SetConfig+0x2c8>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d120      	bne.n	800bc96 <UART_SetConfig+0xbe>
 800bc54:	4b93      	ldr	r3, [pc, #588]	; (800bea4 <UART_SetConfig+0x2cc>)
 800bc56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5a:	f003 0303 	and.w	r3, r3, #3
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d816      	bhi.n	800bc90 <UART_SetConfig+0xb8>
 800bc62:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <UART_SetConfig+0x90>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bc79 	.word	0x0800bc79
 800bc6c:	0800bc85 	.word	0x0800bc85
 800bc70:	0800bc7f 	.word	0x0800bc7f
 800bc74:	0800bc8b 	.word	0x0800bc8b
 800bc78:	2301      	movs	r3, #1
 800bc7a:	77fb      	strb	r3, [r7, #31]
 800bc7c:	e150      	b.n	800bf20 <UART_SetConfig+0x348>
 800bc7e:	2302      	movs	r3, #2
 800bc80:	77fb      	strb	r3, [r7, #31]
 800bc82:	e14d      	b.n	800bf20 <UART_SetConfig+0x348>
 800bc84:	2304      	movs	r3, #4
 800bc86:	77fb      	strb	r3, [r7, #31]
 800bc88:	e14a      	b.n	800bf20 <UART_SetConfig+0x348>
 800bc8a:	2308      	movs	r3, #8
 800bc8c:	77fb      	strb	r3, [r7, #31]
 800bc8e:	e147      	b.n	800bf20 <UART_SetConfig+0x348>
 800bc90:	2310      	movs	r3, #16
 800bc92:	77fb      	strb	r3, [r7, #31]
 800bc94:	e144      	b.n	800bf20 <UART_SetConfig+0x348>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a83      	ldr	r2, [pc, #524]	; (800bea8 <UART_SetConfig+0x2d0>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d132      	bne.n	800bd06 <UART_SetConfig+0x12e>
 800bca0:	4b80      	ldr	r3, [pc, #512]	; (800bea4 <UART_SetConfig+0x2cc>)
 800bca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca6:	f003 030c 	and.w	r3, r3, #12
 800bcaa:	2b0c      	cmp	r3, #12
 800bcac:	d828      	bhi.n	800bd00 <UART_SetConfig+0x128>
 800bcae:	a201      	add	r2, pc, #4	; (adr r2, 800bcb4 <UART_SetConfig+0xdc>)
 800bcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb4:	0800bce9 	.word	0x0800bce9
 800bcb8:	0800bd01 	.word	0x0800bd01
 800bcbc:	0800bd01 	.word	0x0800bd01
 800bcc0:	0800bd01 	.word	0x0800bd01
 800bcc4:	0800bcf5 	.word	0x0800bcf5
 800bcc8:	0800bd01 	.word	0x0800bd01
 800bccc:	0800bd01 	.word	0x0800bd01
 800bcd0:	0800bd01 	.word	0x0800bd01
 800bcd4:	0800bcef 	.word	0x0800bcef
 800bcd8:	0800bd01 	.word	0x0800bd01
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd01 	.word	0x0800bd01
 800bce4:	0800bcfb 	.word	0x0800bcfb
 800bce8:	2300      	movs	r3, #0
 800bcea:	77fb      	strb	r3, [r7, #31]
 800bcec:	e118      	b.n	800bf20 <UART_SetConfig+0x348>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	77fb      	strb	r3, [r7, #31]
 800bcf2:	e115      	b.n	800bf20 <UART_SetConfig+0x348>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	77fb      	strb	r3, [r7, #31]
 800bcf8:	e112      	b.n	800bf20 <UART_SetConfig+0x348>
 800bcfa:	2308      	movs	r3, #8
 800bcfc:	77fb      	strb	r3, [r7, #31]
 800bcfe:	e10f      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd00:	2310      	movs	r3, #16
 800bd02:	77fb      	strb	r3, [r7, #31]
 800bd04:	e10c      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a68      	ldr	r2, [pc, #416]	; (800beac <UART_SetConfig+0x2d4>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d120      	bne.n	800bd52 <UART_SetConfig+0x17a>
 800bd10:	4b64      	ldr	r3, [pc, #400]	; (800bea4 <UART_SetConfig+0x2cc>)
 800bd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd1a:	2b30      	cmp	r3, #48	; 0x30
 800bd1c:	d013      	beq.n	800bd46 <UART_SetConfig+0x16e>
 800bd1e:	2b30      	cmp	r3, #48	; 0x30
 800bd20:	d814      	bhi.n	800bd4c <UART_SetConfig+0x174>
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	d009      	beq.n	800bd3a <UART_SetConfig+0x162>
 800bd26:	2b20      	cmp	r3, #32
 800bd28:	d810      	bhi.n	800bd4c <UART_SetConfig+0x174>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d002      	beq.n	800bd34 <UART_SetConfig+0x15c>
 800bd2e:	2b10      	cmp	r3, #16
 800bd30:	d006      	beq.n	800bd40 <UART_SetConfig+0x168>
 800bd32:	e00b      	b.n	800bd4c <UART_SetConfig+0x174>
 800bd34:	2300      	movs	r3, #0
 800bd36:	77fb      	strb	r3, [r7, #31]
 800bd38:	e0f2      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	77fb      	strb	r3, [r7, #31]
 800bd3e:	e0ef      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd40:	2304      	movs	r3, #4
 800bd42:	77fb      	strb	r3, [r7, #31]
 800bd44:	e0ec      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd46:	2308      	movs	r3, #8
 800bd48:	77fb      	strb	r3, [r7, #31]
 800bd4a:	e0e9      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd4c:	2310      	movs	r3, #16
 800bd4e:	77fb      	strb	r3, [r7, #31]
 800bd50:	e0e6      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a56      	ldr	r2, [pc, #344]	; (800beb0 <UART_SetConfig+0x2d8>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d120      	bne.n	800bd9e <UART_SetConfig+0x1c6>
 800bd5c:	4b51      	ldr	r3, [pc, #324]	; (800bea4 <UART_SetConfig+0x2cc>)
 800bd5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bd66:	2bc0      	cmp	r3, #192	; 0xc0
 800bd68:	d013      	beq.n	800bd92 <UART_SetConfig+0x1ba>
 800bd6a:	2bc0      	cmp	r3, #192	; 0xc0
 800bd6c:	d814      	bhi.n	800bd98 <UART_SetConfig+0x1c0>
 800bd6e:	2b80      	cmp	r3, #128	; 0x80
 800bd70:	d009      	beq.n	800bd86 <UART_SetConfig+0x1ae>
 800bd72:	2b80      	cmp	r3, #128	; 0x80
 800bd74:	d810      	bhi.n	800bd98 <UART_SetConfig+0x1c0>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <UART_SetConfig+0x1a8>
 800bd7a:	2b40      	cmp	r3, #64	; 0x40
 800bd7c:	d006      	beq.n	800bd8c <UART_SetConfig+0x1b4>
 800bd7e:	e00b      	b.n	800bd98 <UART_SetConfig+0x1c0>
 800bd80:	2300      	movs	r3, #0
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	e0cc      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd86:	2302      	movs	r3, #2
 800bd88:	77fb      	strb	r3, [r7, #31]
 800bd8a:	e0c9      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	77fb      	strb	r3, [r7, #31]
 800bd90:	e0c6      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd92:	2308      	movs	r3, #8
 800bd94:	77fb      	strb	r3, [r7, #31]
 800bd96:	e0c3      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd98:	2310      	movs	r3, #16
 800bd9a:	77fb      	strb	r3, [r7, #31]
 800bd9c:	e0c0      	b.n	800bf20 <UART_SetConfig+0x348>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a44      	ldr	r2, [pc, #272]	; (800beb4 <UART_SetConfig+0x2dc>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d125      	bne.n	800bdf4 <UART_SetConfig+0x21c>
 800bda8:	4b3e      	ldr	r3, [pc, #248]	; (800bea4 <UART_SetConfig+0x2cc>)
 800bdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdb6:	d017      	beq.n	800bde8 <UART_SetConfig+0x210>
 800bdb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdbc:	d817      	bhi.n	800bdee <UART_SetConfig+0x216>
 800bdbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdc2:	d00b      	beq.n	800bddc <UART_SetConfig+0x204>
 800bdc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdc8:	d811      	bhi.n	800bdee <UART_SetConfig+0x216>
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <UART_SetConfig+0x1fe>
 800bdce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd2:	d006      	beq.n	800bde2 <UART_SetConfig+0x20a>
 800bdd4:	e00b      	b.n	800bdee <UART_SetConfig+0x216>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	77fb      	strb	r3, [r7, #31]
 800bdda:	e0a1      	b.n	800bf20 <UART_SetConfig+0x348>
 800bddc:	2302      	movs	r3, #2
 800bdde:	77fb      	strb	r3, [r7, #31]
 800bde0:	e09e      	b.n	800bf20 <UART_SetConfig+0x348>
 800bde2:	2304      	movs	r3, #4
 800bde4:	77fb      	strb	r3, [r7, #31]
 800bde6:	e09b      	b.n	800bf20 <UART_SetConfig+0x348>
 800bde8:	2308      	movs	r3, #8
 800bdea:	77fb      	strb	r3, [r7, #31]
 800bdec:	e098      	b.n	800bf20 <UART_SetConfig+0x348>
 800bdee:	2310      	movs	r3, #16
 800bdf0:	77fb      	strb	r3, [r7, #31]
 800bdf2:	e095      	b.n	800bf20 <UART_SetConfig+0x348>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a2f      	ldr	r2, [pc, #188]	; (800beb8 <UART_SetConfig+0x2e0>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d125      	bne.n	800be4a <UART_SetConfig+0x272>
 800bdfe:	4b29      	ldr	r3, [pc, #164]	; (800bea4 <UART_SetConfig+0x2cc>)
 800be00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be0c:	d017      	beq.n	800be3e <UART_SetConfig+0x266>
 800be0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be12:	d817      	bhi.n	800be44 <UART_SetConfig+0x26c>
 800be14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be18:	d00b      	beq.n	800be32 <UART_SetConfig+0x25a>
 800be1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be1e:	d811      	bhi.n	800be44 <UART_SetConfig+0x26c>
 800be20:	2b00      	cmp	r3, #0
 800be22:	d003      	beq.n	800be2c <UART_SetConfig+0x254>
 800be24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be28:	d006      	beq.n	800be38 <UART_SetConfig+0x260>
 800be2a:	e00b      	b.n	800be44 <UART_SetConfig+0x26c>
 800be2c:	2301      	movs	r3, #1
 800be2e:	77fb      	strb	r3, [r7, #31]
 800be30:	e076      	b.n	800bf20 <UART_SetConfig+0x348>
 800be32:	2302      	movs	r3, #2
 800be34:	77fb      	strb	r3, [r7, #31]
 800be36:	e073      	b.n	800bf20 <UART_SetConfig+0x348>
 800be38:	2304      	movs	r3, #4
 800be3a:	77fb      	strb	r3, [r7, #31]
 800be3c:	e070      	b.n	800bf20 <UART_SetConfig+0x348>
 800be3e:	2308      	movs	r3, #8
 800be40:	77fb      	strb	r3, [r7, #31]
 800be42:	e06d      	b.n	800bf20 <UART_SetConfig+0x348>
 800be44:	2310      	movs	r3, #16
 800be46:	77fb      	strb	r3, [r7, #31]
 800be48:	e06a      	b.n	800bf20 <UART_SetConfig+0x348>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a1b      	ldr	r2, [pc, #108]	; (800bebc <UART_SetConfig+0x2e4>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d138      	bne.n	800bec6 <UART_SetConfig+0x2ee>
 800be54:	4b13      	ldr	r3, [pc, #76]	; (800bea4 <UART_SetConfig+0x2cc>)
 800be56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800be5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be62:	d017      	beq.n	800be94 <UART_SetConfig+0x2bc>
 800be64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be68:	d82a      	bhi.n	800bec0 <UART_SetConfig+0x2e8>
 800be6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be6e:	d00b      	beq.n	800be88 <UART_SetConfig+0x2b0>
 800be70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be74:	d824      	bhi.n	800bec0 <UART_SetConfig+0x2e8>
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <UART_SetConfig+0x2aa>
 800be7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be7e:	d006      	beq.n	800be8e <UART_SetConfig+0x2b6>
 800be80:	e01e      	b.n	800bec0 <UART_SetConfig+0x2e8>
 800be82:	2300      	movs	r3, #0
 800be84:	77fb      	strb	r3, [r7, #31]
 800be86:	e04b      	b.n	800bf20 <UART_SetConfig+0x348>
 800be88:	2302      	movs	r3, #2
 800be8a:	77fb      	strb	r3, [r7, #31]
 800be8c:	e048      	b.n	800bf20 <UART_SetConfig+0x348>
 800be8e:	2304      	movs	r3, #4
 800be90:	77fb      	strb	r3, [r7, #31]
 800be92:	e045      	b.n	800bf20 <UART_SetConfig+0x348>
 800be94:	2308      	movs	r3, #8
 800be96:	77fb      	strb	r3, [r7, #31]
 800be98:	e042      	b.n	800bf20 <UART_SetConfig+0x348>
 800be9a:	bf00      	nop
 800be9c:	efff69f3 	.word	0xefff69f3
 800bea0:	40011000 	.word	0x40011000
 800bea4:	40023800 	.word	0x40023800
 800bea8:	40004400 	.word	0x40004400
 800beac:	40004800 	.word	0x40004800
 800beb0:	40004c00 	.word	0x40004c00
 800beb4:	40005000 	.word	0x40005000
 800beb8:	40011400 	.word	0x40011400
 800bebc:	40007800 	.word	0x40007800
 800bec0:	2310      	movs	r3, #16
 800bec2:	77fb      	strb	r3, [r7, #31]
 800bec4:	e02c      	b.n	800bf20 <UART_SetConfig+0x348>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a72      	ldr	r2, [pc, #456]	; (800c094 <UART_SetConfig+0x4bc>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d125      	bne.n	800bf1c <UART_SetConfig+0x344>
 800bed0:	4b71      	ldr	r3, [pc, #452]	; (800c098 <UART_SetConfig+0x4c0>)
 800bed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800beda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bede:	d017      	beq.n	800bf10 <UART_SetConfig+0x338>
 800bee0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bee4:	d817      	bhi.n	800bf16 <UART_SetConfig+0x33e>
 800bee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beea:	d00b      	beq.n	800bf04 <UART_SetConfig+0x32c>
 800beec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bef0:	d811      	bhi.n	800bf16 <UART_SetConfig+0x33e>
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <UART_SetConfig+0x326>
 800bef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800befa:	d006      	beq.n	800bf0a <UART_SetConfig+0x332>
 800befc:	e00b      	b.n	800bf16 <UART_SetConfig+0x33e>
 800befe:	2300      	movs	r3, #0
 800bf00:	77fb      	strb	r3, [r7, #31]
 800bf02:	e00d      	b.n	800bf20 <UART_SetConfig+0x348>
 800bf04:	2302      	movs	r3, #2
 800bf06:	77fb      	strb	r3, [r7, #31]
 800bf08:	e00a      	b.n	800bf20 <UART_SetConfig+0x348>
 800bf0a:	2304      	movs	r3, #4
 800bf0c:	77fb      	strb	r3, [r7, #31]
 800bf0e:	e007      	b.n	800bf20 <UART_SetConfig+0x348>
 800bf10:	2308      	movs	r3, #8
 800bf12:	77fb      	strb	r3, [r7, #31]
 800bf14:	e004      	b.n	800bf20 <UART_SetConfig+0x348>
 800bf16:	2310      	movs	r3, #16
 800bf18:	77fb      	strb	r3, [r7, #31]
 800bf1a:	e001      	b.n	800bf20 <UART_SetConfig+0x348>
 800bf1c:	2310      	movs	r3, #16
 800bf1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	69db      	ldr	r3, [r3, #28]
 800bf24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf28:	d15b      	bne.n	800bfe2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bf2a:	7ffb      	ldrb	r3, [r7, #31]
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d828      	bhi.n	800bf82 <UART_SetConfig+0x3aa>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <UART_SetConfig+0x360>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bf5d 	.word	0x0800bf5d
 800bf3c:	0800bf65 	.word	0x0800bf65
 800bf40:	0800bf6d 	.word	0x0800bf6d
 800bf44:	0800bf83 	.word	0x0800bf83
 800bf48:	0800bf73 	.word	0x0800bf73
 800bf4c:	0800bf83 	.word	0x0800bf83
 800bf50:	0800bf83 	.word	0x0800bf83
 800bf54:	0800bf83 	.word	0x0800bf83
 800bf58:	0800bf7b 	.word	0x0800bf7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf5c:	f7fe f858 	bl	800a010 <HAL_RCC_GetPCLK1Freq>
 800bf60:	61b8      	str	r0, [r7, #24]
        break;
 800bf62:	e013      	b.n	800bf8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf64:	f7fe f868 	bl	800a038 <HAL_RCC_GetPCLK2Freq>
 800bf68:	61b8      	str	r0, [r7, #24]
        break;
 800bf6a:	e00f      	b.n	800bf8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf6c:	4b4b      	ldr	r3, [pc, #300]	; (800c09c <UART_SetConfig+0x4c4>)
 800bf6e:	61bb      	str	r3, [r7, #24]
        break;
 800bf70:	e00c      	b.n	800bf8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf72:	f7fd ff3b 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 800bf76:	61b8      	str	r0, [r7, #24]
        break;
 800bf78:	e008      	b.n	800bf8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf7e:	61bb      	str	r3, [r7, #24]
        break;
 800bf80:	e004      	b.n	800bf8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bf82:	2300      	movs	r3, #0
 800bf84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	77bb      	strb	r3, [r7, #30]
        break;
 800bf8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d074      	beq.n	800c07c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	005a      	lsls	r2, r3, #1
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	085b      	lsrs	r3, r3, #1
 800bf9c:	441a      	add	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	2b0f      	cmp	r3, #15
 800bfac:	d916      	bls.n	800bfdc <UART_SetConfig+0x404>
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb4:	d212      	bcs.n	800bfdc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	f023 030f 	bic.w	r3, r3, #15
 800bfbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	085b      	lsrs	r3, r3, #1
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	89fb      	ldrh	r3, [r7, #14]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	89fa      	ldrh	r2, [r7, #14]
 800bfd8:	60da      	str	r2, [r3, #12]
 800bfda:	e04f      	b.n	800c07c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	77bb      	strb	r3, [r7, #30]
 800bfe0:	e04c      	b.n	800c07c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bfe2:	7ffb      	ldrb	r3, [r7, #31]
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d828      	bhi.n	800c03a <UART_SetConfig+0x462>
 800bfe8:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <UART_SetConfig+0x418>)
 800bfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfee:	bf00      	nop
 800bff0:	0800c015 	.word	0x0800c015
 800bff4:	0800c01d 	.word	0x0800c01d
 800bff8:	0800c025 	.word	0x0800c025
 800bffc:	0800c03b 	.word	0x0800c03b
 800c000:	0800c02b 	.word	0x0800c02b
 800c004:	0800c03b 	.word	0x0800c03b
 800c008:	0800c03b 	.word	0x0800c03b
 800c00c:	0800c03b 	.word	0x0800c03b
 800c010:	0800c033 	.word	0x0800c033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c014:	f7fd fffc 	bl	800a010 <HAL_RCC_GetPCLK1Freq>
 800c018:	61b8      	str	r0, [r7, #24]
        break;
 800c01a:	e013      	b.n	800c044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c01c:	f7fe f80c 	bl	800a038 <HAL_RCC_GetPCLK2Freq>
 800c020:	61b8      	str	r0, [r7, #24]
        break;
 800c022:	e00f      	b.n	800c044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c024:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <UART_SetConfig+0x4c4>)
 800c026:	61bb      	str	r3, [r7, #24]
        break;
 800c028:	e00c      	b.n	800c044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c02a:	f7fd fedf 	bl	8009dec <HAL_RCC_GetSysClockFreq>
 800c02e:	61b8      	str	r0, [r7, #24]
        break;
 800c030:	e008      	b.n	800c044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c036:	61bb      	str	r3, [r7, #24]
        break;
 800c038:	e004      	b.n	800c044 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c03a:	2300      	movs	r3, #0
 800c03c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	77bb      	strb	r3, [r7, #30]
        break;
 800c042:	bf00      	nop
    }

    if (pclk != 0U)
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d018      	beq.n	800c07c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	085a      	lsrs	r2, r3, #1
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	441a      	add	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	fbb2 f3f3 	udiv	r3, r2, r3
 800c05c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2b0f      	cmp	r3, #15
 800c062:	d909      	bls.n	800c078 <UART_SetConfig+0x4a0>
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06a:	d205      	bcs.n	800c078 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	b29a      	uxth	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	e001      	b.n	800c07c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c088:	7fbb      	ldrb	r3, [r7, #30]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	40007c00 	.word	0x40007c00
 800c098:	40023800 	.word	0x40023800
 800c09c:	00f42400 	.word	0x00f42400

0800c0a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00a      	beq.n	800c0ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ce:	f003 0302 	and.w	r3, r3, #2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	f003 0304 	and.w	r3, r3, #4
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00a      	beq.n	800c10e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	430a      	orrs	r2, r1
 800c10c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c112:	f003 0308 	and.w	r3, r3, #8
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00a      	beq.n	800c130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	430a      	orrs	r2, r1
 800c12e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	f003 0310 	and.w	r3, r3, #16
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00a      	beq.n	800c152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c156:	f003 0320 	and.w	r3, r3, #32
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01a      	beq.n	800c1b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c19e:	d10a      	bne.n	800c1b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	430a      	orrs	r2, r1
 800c1d6:	605a      	str	r2, [r3, #4]
  }
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c1f4:	f7fb ff2c 	bl	8008050 <HAL_GetTick>
 800c1f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 0308 	and.w	r3, r3, #8
 800c204:	2b08      	cmp	r3, #8
 800c206:	d10e      	bne.n	800c226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f831 	bl	800c27e <UART_WaitOnFlagUntilTimeout>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e027      	b.n	800c276 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 0304 	and.w	r3, r3, #4
 800c230:	2b04      	cmp	r3, #4
 800c232:	d10e      	bne.n	800c252 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 f81b 	bl	800c27e <UART_WaitOnFlagUntilTimeout>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e011      	b.n	800c276 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2220      	movs	r2, #32
 800c256:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2220      	movs	r2, #32
 800c25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b09c      	sub	sp, #112	; 0x70
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	603b      	str	r3, [r7, #0]
 800c28a:	4613      	mov	r3, r2
 800c28c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c28e:	e0a7      	b.n	800c3e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c296:	f000 80a3 	beq.w	800c3e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c29a:	f7fb fed9 	bl	8008050 <HAL_GetTick>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d302      	bcc.n	800c2b0 <UART_WaitOnFlagUntilTimeout+0x32>
 800c2aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d13f      	bne.n	800c330 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b8:	e853 3f00 	ldrex	r3, [r3]
 800c2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2c4:	667b      	str	r3, [r7, #100]	; 0x64
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c2dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e6      	bne.n	800c2b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	f023 0301 	bic.w	r3, r3, #1
 800c2f8:	663b      	str	r3, [r7, #96]	; 0x60
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c302:	64ba      	str	r2, [r7, #72]	; 0x48
 800c304:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e5      	bne.n	800c2e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2220      	movs	r2, #32
 800c31a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2220      	movs	r2, #32
 800c320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e068      	b.n	800c402 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0304 	and.w	r3, r3, #4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d050      	beq.n	800c3e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c34c:	d148      	bne.n	800c3e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c356:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	e853 3f00 	ldrex	r3, [r3]
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c36c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	461a      	mov	r2, r3
 800c374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c376:	637b      	str	r3, [r7, #52]	; 0x34
 800c378:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c37c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c37e:	e841 2300 	strex	r3, r2, [r1]
 800c382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e6      	bne.n	800c358 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3308      	adds	r3, #8
 800c390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	613b      	str	r3, [r7, #16]
   return(result);
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	f023 0301 	bic.w	r3, r3, #1
 800c3a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3aa:	623a      	str	r2, [r7, #32]
 800c3ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	69f9      	ldr	r1, [r7, #28]
 800c3b0:	6a3a      	ldr	r2, [r7, #32]
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e5      	bne.n	800c38a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e010      	b.n	800c402 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	69da      	ldr	r2, [r3, #28]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	bf0c      	ite	eq
 800c3f0:	2301      	moveq	r3, #1
 800c3f2:	2300      	movne	r3, #0
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	79fb      	ldrb	r3, [r7, #7]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	f43f af48 	beq.w	800c290 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3770      	adds	r7, #112	; 0x70
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
	...

0800c40c <calloc>:
 800c40c:	4b02      	ldr	r3, [pc, #8]	; (800c418 <calloc+0xc>)
 800c40e:	460a      	mov	r2, r1
 800c410:	4601      	mov	r1, r0
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	f000 b802 	b.w	800c41c <_calloc_r>
 800c418:	200009e4 	.word	0x200009e4

0800c41c <_calloc_r>:
 800c41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c41e:	fba1 2402 	umull	r2, r4, r1, r2
 800c422:	b94c      	cbnz	r4, 800c438 <_calloc_r+0x1c>
 800c424:	4611      	mov	r1, r2
 800c426:	9201      	str	r2, [sp, #4]
 800c428:	f000 fae8 	bl	800c9fc <_malloc_r>
 800c42c:	9a01      	ldr	r2, [sp, #4]
 800c42e:	4605      	mov	r5, r0
 800c430:	b930      	cbnz	r0, 800c440 <_calloc_r+0x24>
 800c432:	4628      	mov	r0, r5
 800c434:	b003      	add	sp, #12
 800c436:	bd30      	pop	{r4, r5, pc}
 800c438:	220c      	movs	r2, #12
 800c43a:	6002      	str	r2, [r0, #0]
 800c43c:	2500      	movs	r5, #0
 800c43e:	e7f8      	b.n	800c432 <_calloc_r+0x16>
 800c440:	4621      	mov	r1, r4
 800c442:	f000 fe33 	bl	800d0ac <memset>
 800c446:	e7f4      	b.n	800c432 <_calloc_r+0x16>

0800c448 <__cvt>:
 800c448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c44a:	ed2d 8b02 	vpush	{d8}
 800c44e:	eeb0 8b40 	vmov.f64	d8, d0
 800c452:	b085      	sub	sp, #20
 800c454:	4617      	mov	r7, r2
 800c456:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c458:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c45a:	ee18 2a90 	vmov	r2, s17
 800c45e:	f025 0520 	bic.w	r5, r5, #32
 800c462:	2a00      	cmp	r2, #0
 800c464:	bfb6      	itet	lt
 800c466:	222d      	movlt	r2, #45	; 0x2d
 800c468:	2200      	movge	r2, #0
 800c46a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c46e:	2d46      	cmp	r5, #70	; 0x46
 800c470:	460c      	mov	r4, r1
 800c472:	701a      	strb	r2, [r3, #0]
 800c474:	d004      	beq.n	800c480 <__cvt+0x38>
 800c476:	2d45      	cmp	r5, #69	; 0x45
 800c478:	d100      	bne.n	800c47c <__cvt+0x34>
 800c47a:	3401      	adds	r4, #1
 800c47c:	2102      	movs	r1, #2
 800c47e:	e000      	b.n	800c482 <__cvt+0x3a>
 800c480:	2103      	movs	r1, #3
 800c482:	ab03      	add	r3, sp, #12
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	ab02      	add	r3, sp, #8
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	4622      	mov	r2, r4
 800c48c:	4633      	mov	r3, r6
 800c48e:	eeb0 0b48 	vmov.f64	d0, d8
 800c492:	f000 ff09 	bl	800d2a8 <_dtoa_r>
 800c496:	2d47      	cmp	r5, #71	; 0x47
 800c498:	d101      	bne.n	800c49e <__cvt+0x56>
 800c49a:	07fb      	lsls	r3, r7, #31
 800c49c:	d51a      	bpl.n	800c4d4 <__cvt+0x8c>
 800c49e:	2d46      	cmp	r5, #70	; 0x46
 800c4a0:	eb00 0204 	add.w	r2, r0, r4
 800c4a4:	d10c      	bne.n	800c4c0 <__cvt+0x78>
 800c4a6:	7803      	ldrb	r3, [r0, #0]
 800c4a8:	2b30      	cmp	r3, #48	; 0x30
 800c4aa:	d107      	bne.n	800c4bc <__cvt+0x74>
 800c4ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b4:	bf1c      	itt	ne
 800c4b6:	f1c4 0401 	rsbne	r4, r4, #1
 800c4ba:	6034      	strne	r4, [r6, #0]
 800c4bc:	6833      	ldr	r3, [r6, #0]
 800c4be:	441a      	add	r2, r3
 800c4c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c8:	bf08      	it	eq
 800c4ca:	9203      	streq	r2, [sp, #12]
 800c4cc:	2130      	movs	r1, #48	; 0x30
 800c4ce:	9b03      	ldr	r3, [sp, #12]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d307      	bcc.n	800c4e4 <__cvt+0x9c>
 800c4d4:	9b03      	ldr	r3, [sp, #12]
 800c4d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4d8:	1a1b      	subs	r3, r3, r0
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	b005      	add	sp, #20
 800c4de:	ecbd 8b02 	vpop	{d8}
 800c4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e4:	1c5c      	adds	r4, r3, #1
 800c4e6:	9403      	str	r4, [sp, #12]
 800c4e8:	7019      	strb	r1, [r3, #0]
 800c4ea:	e7f0      	b.n	800c4ce <__cvt+0x86>

0800c4ec <__exponent>:
 800c4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2900      	cmp	r1, #0
 800c4f2:	bfb8      	it	lt
 800c4f4:	4249      	neglt	r1, r1
 800c4f6:	f803 2b02 	strb.w	r2, [r3], #2
 800c4fa:	bfb4      	ite	lt
 800c4fc:	222d      	movlt	r2, #45	; 0x2d
 800c4fe:	222b      	movge	r2, #43	; 0x2b
 800c500:	2909      	cmp	r1, #9
 800c502:	7042      	strb	r2, [r0, #1]
 800c504:	dd2a      	ble.n	800c55c <__exponent+0x70>
 800c506:	f10d 0207 	add.w	r2, sp, #7
 800c50a:	4617      	mov	r7, r2
 800c50c:	260a      	movs	r6, #10
 800c50e:	4694      	mov	ip, r2
 800c510:	fb91 f5f6 	sdiv	r5, r1, r6
 800c514:	fb06 1415 	mls	r4, r6, r5, r1
 800c518:	3430      	adds	r4, #48	; 0x30
 800c51a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c51e:	460c      	mov	r4, r1
 800c520:	2c63      	cmp	r4, #99	; 0x63
 800c522:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c526:	4629      	mov	r1, r5
 800c528:	dcf1      	bgt.n	800c50e <__exponent+0x22>
 800c52a:	3130      	adds	r1, #48	; 0x30
 800c52c:	f1ac 0402 	sub.w	r4, ip, #2
 800c530:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c534:	1c41      	adds	r1, r0, #1
 800c536:	4622      	mov	r2, r4
 800c538:	42ba      	cmp	r2, r7
 800c53a:	d30a      	bcc.n	800c552 <__exponent+0x66>
 800c53c:	f10d 0209 	add.w	r2, sp, #9
 800c540:	eba2 020c 	sub.w	r2, r2, ip
 800c544:	42bc      	cmp	r4, r7
 800c546:	bf88      	it	hi
 800c548:	2200      	movhi	r2, #0
 800c54a:	4413      	add	r3, r2
 800c54c:	1a18      	subs	r0, r3, r0
 800c54e:	b003      	add	sp, #12
 800c550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c552:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c556:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c55a:	e7ed      	b.n	800c538 <__exponent+0x4c>
 800c55c:	2330      	movs	r3, #48	; 0x30
 800c55e:	3130      	adds	r1, #48	; 0x30
 800c560:	7083      	strb	r3, [r0, #2]
 800c562:	70c1      	strb	r1, [r0, #3]
 800c564:	1d03      	adds	r3, r0, #4
 800c566:	e7f1      	b.n	800c54c <__exponent+0x60>

0800c568 <_printf_float>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	b08b      	sub	sp, #44	; 0x2c
 800c56e:	460c      	mov	r4, r1
 800c570:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c574:	4616      	mov	r6, r2
 800c576:	461f      	mov	r7, r3
 800c578:	4605      	mov	r5, r0
 800c57a:	f000 fd9f 	bl	800d0bc <_localeconv_r>
 800c57e:	f8d0 b000 	ldr.w	fp, [r0]
 800c582:	4658      	mov	r0, fp
 800c584:	f7f3 feac 	bl	80002e0 <strlen>
 800c588:	2300      	movs	r3, #0
 800c58a:	9308      	str	r3, [sp, #32]
 800c58c:	f8d8 3000 	ldr.w	r3, [r8]
 800c590:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c594:	6822      	ldr	r2, [r4, #0]
 800c596:	3307      	adds	r3, #7
 800c598:	f023 0307 	bic.w	r3, r3, #7
 800c59c:	f103 0108 	add.w	r1, r3, #8
 800c5a0:	f8c8 1000 	str.w	r1, [r8]
 800c5a4:	ed93 0b00 	vldr	d0, [r3]
 800c5a8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c808 <_printf_float+0x2a0>
 800c5ac:	eeb0 7bc0 	vabs.f64	d7, d0
 800c5b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c5bc:	4682      	mov	sl, r0
 800c5be:	dd24      	ble.n	800c60a <_printf_float+0xa2>
 800c5c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c8:	d502      	bpl.n	800c5d0 <_printf_float+0x68>
 800c5ca:	232d      	movs	r3, #45	; 0x2d
 800c5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d0:	498f      	ldr	r1, [pc, #572]	; (800c810 <_printf_float+0x2a8>)
 800c5d2:	4b90      	ldr	r3, [pc, #576]	; (800c814 <_printf_float+0x2ac>)
 800c5d4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c5d8:	bf94      	ite	ls
 800c5da:	4688      	movls	r8, r1
 800c5dc:	4698      	movhi	r8, r3
 800c5de:	2303      	movs	r3, #3
 800c5e0:	6123      	str	r3, [r4, #16]
 800c5e2:	f022 0204 	bic.w	r2, r2, #4
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6022      	str	r2, [r4, #0]
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	9700      	str	r7, [sp, #0]
 800c5ee:	4633      	mov	r3, r6
 800c5f0:	aa09      	add	r2, sp, #36	; 0x24
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f000 fa81 	bl	800cafc <_printf_common>
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	f040 808a 	bne.w	800c714 <_printf_float+0x1ac>
 800c600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c604:	b00b      	add	sp, #44	; 0x2c
 800c606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c612:	d709      	bvc.n	800c628 <_printf_float+0xc0>
 800c614:	ee10 3a90 	vmov	r3, s1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfbc      	itt	lt
 800c61c:	232d      	movlt	r3, #45	; 0x2d
 800c61e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c622:	497d      	ldr	r1, [pc, #500]	; (800c818 <_printf_float+0x2b0>)
 800c624:	4b7d      	ldr	r3, [pc, #500]	; (800c81c <_printf_float+0x2b4>)
 800c626:	e7d5      	b.n	800c5d4 <_printf_float+0x6c>
 800c628:	6863      	ldr	r3, [r4, #4]
 800c62a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c62e:	9104      	str	r1, [sp, #16]
 800c630:	1c59      	adds	r1, r3, #1
 800c632:	d13c      	bne.n	800c6ae <_printf_float+0x146>
 800c634:	2306      	movs	r3, #6
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	2300      	movs	r3, #0
 800c63a:	9303      	str	r3, [sp, #12]
 800c63c:	ab08      	add	r3, sp, #32
 800c63e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c646:	ab07      	add	r3, sp, #28
 800c648:	6861      	ldr	r1, [r4, #4]
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	6022      	str	r2, [r4, #0]
 800c64e:	f10d 031b 	add.w	r3, sp, #27
 800c652:	4628      	mov	r0, r5
 800c654:	f7ff fef8 	bl	800c448 <__cvt>
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	9907      	ldr	r1, [sp, #28]
 800c65c:	2b47      	cmp	r3, #71	; 0x47
 800c65e:	4680      	mov	r8, r0
 800c660:	d108      	bne.n	800c674 <_printf_float+0x10c>
 800c662:	1cc8      	adds	r0, r1, #3
 800c664:	db02      	blt.n	800c66c <_printf_float+0x104>
 800c666:	6863      	ldr	r3, [r4, #4]
 800c668:	4299      	cmp	r1, r3
 800c66a:	dd41      	ble.n	800c6f0 <_printf_float+0x188>
 800c66c:	f1a9 0902 	sub.w	r9, r9, #2
 800c670:	fa5f f989 	uxtb.w	r9, r9
 800c674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c678:	d820      	bhi.n	800c6bc <_printf_float+0x154>
 800c67a:	3901      	subs	r1, #1
 800c67c:	464a      	mov	r2, r9
 800c67e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c682:	9107      	str	r1, [sp, #28]
 800c684:	f7ff ff32 	bl	800c4ec <__exponent>
 800c688:	9a08      	ldr	r2, [sp, #32]
 800c68a:	9004      	str	r0, [sp, #16]
 800c68c:	1813      	adds	r3, r2, r0
 800c68e:	2a01      	cmp	r2, #1
 800c690:	6123      	str	r3, [r4, #16]
 800c692:	dc02      	bgt.n	800c69a <_printf_float+0x132>
 800c694:	6822      	ldr	r2, [r4, #0]
 800c696:	07d2      	lsls	r2, r2, #31
 800c698:	d501      	bpl.n	800c69e <_printf_float+0x136>
 800c69a:	3301      	adds	r3, #1
 800c69c:	6123      	str	r3, [r4, #16]
 800c69e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0a2      	beq.n	800c5ec <_printf_float+0x84>
 800c6a6:	232d      	movs	r3, #45	; 0x2d
 800c6a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6ac:	e79e      	b.n	800c5ec <_printf_float+0x84>
 800c6ae:	9904      	ldr	r1, [sp, #16]
 800c6b0:	2947      	cmp	r1, #71	; 0x47
 800c6b2:	d1c1      	bne.n	800c638 <_printf_float+0xd0>
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1bf      	bne.n	800c638 <_printf_float+0xd0>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e7bc      	b.n	800c636 <_printf_float+0xce>
 800c6bc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c6c0:	d118      	bne.n	800c6f4 <_printf_float+0x18c>
 800c6c2:	2900      	cmp	r1, #0
 800c6c4:	6863      	ldr	r3, [r4, #4]
 800c6c6:	dd0b      	ble.n	800c6e0 <_printf_float+0x178>
 800c6c8:	6121      	str	r1, [r4, #16]
 800c6ca:	b913      	cbnz	r3, 800c6d2 <_printf_float+0x16a>
 800c6cc:	6822      	ldr	r2, [r4, #0]
 800c6ce:	07d0      	lsls	r0, r2, #31
 800c6d0:	d502      	bpl.n	800c6d8 <_printf_float+0x170>
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	440b      	add	r3, r1
 800c6d6:	6123      	str	r3, [r4, #16]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6dc:	9304      	str	r3, [sp, #16]
 800c6de:	e7de      	b.n	800c69e <_printf_float+0x136>
 800c6e0:	b913      	cbnz	r3, 800c6e8 <_printf_float+0x180>
 800c6e2:	6822      	ldr	r2, [r4, #0]
 800c6e4:	07d2      	lsls	r2, r2, #31
 800c6e6:	d501      	bpl.n	800c6ec <_printf_float+0x184>
 800c6e8:	3302      	adds	r3, #2
 800c6ea:	e7f4      	b.n	800c6d6 <_printf_float+0x16e>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e7f2      	b.n	800c6d6 <_printf_float+0x16e>
 800c6f0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c6f4:	9b08      	ldr	r3, [sp, #32]
 800c6f6:	4299      	cmp	r1, r3
 800c6f8:	db05      	blt.n	800c706 <_printf_float+0x19e>
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	6121      	str	r1, [r4, #16]
 800c6fe:	07d8      	lsls	r0, r3, #31
 800c700:	d5ea      	bpl.n	800c6d8 <_printf_float+0x170>
 800c702:	1c4b      	adds	r3, r1, #1
 800c704:	e7e7      	b.n	800c6d6 <_printf_float+0x16e>
 800c706:	2900      	cmp	r1, #0
 800c708:	bfd4      	ite	le
 800c70a:	f1c1 0202 	rsble	r2, r1, #2
 800c70e:	2201      	movgt	r2, #1
 800c710:	4413      	add	r3, r2
 800c712:	e7e0      	b.n	800c6d6 <_printf_float+0x16e>
 800c714:	6823      	ldr	r3, [r4, #0]
 800c716:	055a      	lsls	r2, r3, #21
 800c718:	d407      	bmi.n	800c72a <_printf_float+0x1c2>
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	4642      	mov	r2, r8
 800c71e:	4631      	mov	r1, r6
 800c720:	4628      	mov	r0, r5
 800c722:	47b8      	blx	r7
 800c724:	3001      	adds	r0, #1
 800c726:	d12a      	bne.n	800c77e <_printf_float+0x216>
 800c728:	e76a      	b.n	800c600 <_printf_float+0x98>
 800c72a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c72e:	f240 80e0 	bls.w	800c8f2 <_printf_float+0x38a>
 800c732:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c736:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73e:	d133      	bne.n	800c7a8 <_printf_float+0x240>
 800c740:	4a37      	ldr	r2, [pc, #220]	; (800c820 <_printf_float+0x2b8>)
 800c742:	2301      	movs	r3, #1
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	47b8      	blx	r7
 800c74a:	3001      	adds	r0, #1
 800c74c:	f43f af58 	beq.w	800c600 <_printf_float+0x98>
 800c750:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c754:	429a      	cmp	r2, r3
 800c756:	db02      	blt.n	800c75e <_printf_float+0x1f6>
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	07d8      	lsls	r0, r3, #31
 800c75c:	d50f      	bpl.n	800c77e <_printf_float+0x216>
 800c75e:	4653      	mov	r3, sl
 800c760:	465a      	mov	r2, fp
 800c762:	4631      	mov	r1, r6
 800c764:	4628      	mov	r0, r5
 800c766:	47b8      	blx	r7
 800c768:	3001      	adds	r0, #1
 800c76a:	f43f af49 	beq.w	800c600 <_printf_float+0x98>
 800c76e:	f04f 0800 	mov.w	r8, #0
 800c772:	f104 091a 	add.w	r9, r4, #26
 800c776:	9b08      	ldr	r3, [sp, #32]
 800c778:	3b01      	subs	r3, #1
 800c77a:	4543      	cmp	r3, r8
 800c77c:	dc09      	bgt.n	800c792 <_printf_float+0x22a>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	079b      	lsls	r3, r3, #30
 800c782:	f100 8106 	bmi.w	800c992 <_printf_float+0x42a>
 800c786:	68e0      	ldr	r0, [r4, #12]
 800c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78a:	4298      	cmp	r0, r3
 800c78c:	bfb8      	it	lt
 800c78e:	4618      	movlt	r0, r3
 800c790:	e738      	b.n	800c604 <_printf_float+0x9c>
 800c792:	2301      	movs	r3, #1
 800c794:	464a      	mov	r2, r9
 800c796:	4631      	mov	r1, r6
 800c798:	4628      	mov	r0, r5
 800c79a:	47b8      	blx	r7
 800c79c:	3001      	adds	r0, #1
 800c79e:	f43f af2f 	beq.w	800c600 <_printf_float+0x98>
 800c7a2:	f108 0801 	add.w	r8, r8, #1
 800c7a6:	e7e6      	b.n	800c776 <_printf_float+0x20e>
 800c7a8:	9b07      	ldr	r3, [sp, #28]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	dc3a      	bgt.n	800c824 <_printf_float+0x2bc>
 800c7ae:	4a1c      	ldr	r2, [pc, #112]	; (800c820 <_printf_float+0x2b8>)
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f43f af21 	beq.w	800c600 <_printf_float+0x98>
 800c7be:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	d102      	bne.n	800c7cc <_printf_float+0x264>
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	07d9      	lsls	r1, r3, #31
 800c7ca:	d5d8      	bpl.n	800c77e <_printf_float+0x216>
 800c7cc:	4653      	mov	r3, sl
 800c7ce:	465a      	mov	r2, fp
 800c7d0:	4631      	mov	r1, r6
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	47b8      	blx	r7
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	f43f af12 	beq.w	800c600 <_printf_float+0x98>
 800c7dc:	f04f 0900 	mov.w	r9, #0
 800c7e0:	f104 0a1a 	add.w	sl, r4, #26
 800c7e4:	9b07      	ldr	r3, [sp, #28]
 800c7e6:	425b      	negs	r3, r3
 800c7e8:	454b      	cmp	r3, r9
 800c7ea:	dc01      	bgt.n	800c7f0 <_printf_float+0x288>
 800c7ec:	9b08      	ldr	r3, [sp, #32]
 800c7ee:	e795      	b.n	800c71c <_printf_float+0x1b4>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	4631      	mov	r1, r6
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	47b8      	blx	r7
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	f43f af00 	beq.w	800c600 <_printf_float+0x98>
 800c800:	f109 0901 	add.w	r9, r9, #1
 800c804:	e7ee      	b.n	800c7e4 <_printf_float+0x27c>
 800c806:	bf00      	nop
 800c808:	ffffffff 	.word	0xffffffff
 800c80c:	7fefffff 	.word	0x7fefffff
 800c810:	080902cc 	.word	0x080902cc
 800c814:	080902d0 	.word	0x080902d0
 800c818:	080902d4 	.word	0x080902d4
 800c81c:	080902d8 	.word	0x080902d8
 800c820:	080902dc 	.word	0x080902dc
 800c824:	9a08      	ldr	r2, [sp, #32]
 800c826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c828:	429a      	cmp	r2, r3
 800c82a:	bfa8      	it	ge
 800c82c:	461a      	movge	r2, r3
 800c82e:	2a00      	cmp	r2, #0
 800c830:	4691      	mov	r9, r2
 800c832:	dc38      	bgt.n	800c8a6 <_printf_float+0x33e>
 800c834:	2300      	movs	r3, #0
 800c836:	9305      	str	r3, [sp, #20]
 800c838:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c83c:	f104 021a 	add.w	r2, r4, #26
 800c840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c842:	9905      	ldr	r1, [sp, #20]
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	eba3 0309 	sub.w	r3, r3, r9
 800c84a:	428b      	cmp	r3, r1
 800c84c:	dc33      	bgt.n	800c8b6 <_printf_float+0x34e>
 800c84e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c852:	429a      	cmp	r2, r3
 800c854:	db3c      	blt.n	800c8d0 <_printf_float+0x368>
 800c856:	6823      	ldr	r3, [r4, #0]
 800c858:	07da      	lsls	r2, r3, #31
 800c85a:	d439      	bmi.n	800c8d0 <_printf_float+0x368>
 800c85c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c860:	eba2 0903 	sub.w	r9, r2, r3
 800c864:	9b04      	ldr	r3, [sp, #16]
 800c866:	1ad2      	subs	r2, r2, r3
 800c868:	4591      	cmp	r9, r2
 800c86a:	bfa8      	it	ge
 800c86c:	4691      	movge	r9, r2
 800c86e:	f1b9 0f00 	cmp.w	r9, #0
 800c872:	dc35      	bgt.n	800c8e0 <_printf_float+0x378>
 800c874:	f04f 0800 	mov.w	r8, #0
 800c878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c87c:	f104 0a1a 	add.w	sl, r4, #26
 800c880:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	eba3 0309 	sub.w	r3, r3, r9
 800c88a:	4543      	cmp	r3, r8
 800c88c:	f77f af77 	ble.w	800c77e <_printf_float+0x216>
 800c890:	2301      	movs	r3, #1
 800c892:	4652      	mov	r2, sl
 800c894:	4631      	mov	r1, r6
 800c896:	4628      	mov	r0, r5
 800c898:	47b8      	blx	r7
 800c89a:	3001      	adds	r0, #1
 800c89c:	f43f aeb0 	beq.w	800c600 <_printf_float+0x98>
 800c8a0:	f108 0801 	add.w	r8, r8, #1
 800c8a4:	e7ec      	b.n	800c880 <_printf_float+0x318>
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	4642      	mov	r2, r8
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b8      	blx	r7
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d1bf      	bne.n	800c834 <_printf_float+0x2cc>
 800c8b4:	e6a4      	b.n	800c600 <_printf_float+0x98>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	9204      	str	r2, [sp, #16]
 800c8be:	47b8      	blx	r7
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	f43f ae9d 	beq.w	800c600 <_printf_float+0x98>
 800c8c6:	9b05      	ldr	r3, [sp, #20]
 800c8c8:	9a04      	ldr	r2, [sp, #16]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	9305      	str	r3, [sp, #20]
 800c8ce:	e7b7      	b.n	800c840 <_printf_float+0x2d8>
 800c8d0:	4653      	mov	r3, sl
 800c8d2:	465a      	mov	r2, fp
 800c8d4:	4631      	mov	r1, r6
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	47b8      	blx	r7
 800c8da:	3001      	adds	r0, #1
 800c8dc:	d1be      	bne.n	800c85c <_printf_float+0x2f4>
 800c8de:	e68f      	b.n	800c600 <_printf_float+0x98>
 800c8e0:	9a04      	ldr	r2, [sp, #16]
 800c8e2:	464b      	mov	r3, r9
 800c8e4:	4442      	add	r2, r8
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	47b8      	blx	r7
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	d1c1      	bne.n	800c874 <_printf_float+0x30c>
 800c8f0:	e686      	b.n	800c600 <_printf_float+0x98>
 800c8f2:	9a08      	ldr	r2, [sp, #32]
 800c8f4:	2a01      	cmp	r2, #1
 800c8f6:	dc01      	bgt.n	800c8fc <_printf_float+0x394>
 800c8f8:	07db      	lsls	r3, r3, #31
 800c8fa:	d537      	bpl.n	800c96c <_printf_float+0x404>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	4642      	mov	r2, r8
 800c900:	4631      	mov	r1, r6
 800c902:	4628      	mov	r0, r5
 800c904:	47b8      	blx	r7
 800c906:	3001      	adds	r0, #1
 800c908:	f43f ae7a 	beq.w	800c600 <_printf_float+0x98>
 800c90c:	4653      	mov	r3, sl
 800c90e:	465a      	mov	r2, fp
 800c910:	4631      	mov	r1, r6
 800c912:	4628      	mov	r0, r5
 800c914:	47b8      	blx	r7
 800c916:	3001      	adds	r0, #1
 800c918:	f43f ae72 	beq.w	800c600 <_printf_float+0x98>
 800c91c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c920:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c928:	9b08      	ldr	r3, [sp, #32]
 800c92a:	d01a      	beq.n	800c962 <_printf_float+0x3fa>
 800c92c:	3b01      	subs	r3, #1
 800c92e:	f108 0201 	add.w	r2, r8, #1
 800c932:	4631      	mov	r1, r6
 800c934:	4628      	mov	r0, r5
 800c936:	47b8      	blx	r7
 800c938:	3001      	adds	r0, #1
 800c93a:	d10e      	bne.n	800c95a <_printf_float+0x3f2>
 800c93c:	e660      	b.n	800c600 <_printf_float+0x98>
 800c93e:	2301      	movs	r3, #1
 800c940:	464a      	mov	r2, r9
 800c942:	4631      	mov	r1, r6
 800c944:	4628      	mov	r0, r5
 800c946:	47b8      	blx	r7
 800c948:	3001      	adds	r0, #1
 800c94a:	f43f ae59 	beq.w	800c600 <_printf_float+0x98>
 800c94e:	f108 0801 	add.w	r8, r8, #1
 800c952:	9b08      	ldr	r3, [sp, #32]
 800c954:	3b01      	subs	r3, #1
 800c956:	4543      	cmp	r3, r8
 800c958:	dcf1      	bgt.n	800c93e <_printf_float+0x3d6>
 800c95a:	9b04      	ldr	r3, [sp, #16]
 800c95c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c960:	e6dd      	b.n	800c71e <_printf_float+0x1b6>
 800c962:	f04f 0800 	mov.w	r8, #0
 800c966:	f104 091a 	add.w	r9, r4, #26
 800c96a:	e7f2      	b.n	800c952 <_printf_float+0x3ea>
 800c96c:	2301      	movs	r3, #1
 800c96e:	4642      	mov	r2, r8
 800c970:	e7df      	b.n	800c932 <_printf_float+0x3ca>
 800c972:	2301      	movs	r3, #1
 800c974:	464a      	mov	r2, r9
 800c976:	4631      	mov	r1, r6
 800c978:	4628      	mov	r0, r5
 800c97a:	47b8      	blx	r7
 800c97c:	3001      	adds	r0, #1
 800c97e:	f43f ae3f 	beq.w	800c600 <_printf_float+0x98>
 800c982:	f108 0801 	add.w	r8, r8, #1
 800c986:	68e3      	ldr	r3, [r4, #12]
 800c988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c98a:	1a5b      	subs	r3, r3, r1
 800c98c:	4543      	cmp	r3, r8
 800c98e:	dcf0      	bgt.n	800c972 <_printf_float+0x40a>
 800c990:	e6f9      	b.n	800c786 <_printf_float+0x21e>
 800c992:	f04f 0800 	mov.w	r8, #0
 800c996:	f104 0919 	add.w	r9, r4, #25
 800c99a:	e7f4      	b.n	800c986 <_printf_float+0x41e>

0800c99c <malloc>:
 800c99c:	4b02      	ldr	r3, [pc, #8]	; (800c9a8 <malloc+0xc>)
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f000 b82b 	b.w	800c9fc <_malloc_r>
 800c9a6:	bf00      	nop
 800c9a8:	200009e4 	.word	0x200009e4

0800c9ac <free>:
 800c9ac:	4b02      	ldr	r3, [pc, #8]	; (800c9b8 <free+0xc>)
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	f001 b9e5 	b.w	800dd80 <_free_r>
 800c9b6:	bf00      	nop
 800c9b8:	200009e4 	.word	0x200009e4

0800c9bc <sbrk_aligned>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4e0e      	ldr	r6, [pc, #56]	; (800c9f8 <sbrk_aligned+0x3c>)
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	6831      	ldr	r1, [r6, #0]
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b911      	cbnz	r1, 800c9ce <sbrk_aligned+0x12>
 800c9c8:	f000 fb7c 	bl	800d0c4 <_sbrk_r>
 800c9cc:	6030      	str	r0, [r6, #0]
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 fb77 	bl	800d0c4 <_sbrk_r>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	d00a      	beq.n	800c9f0 <sbrk_aligned+0x34>
 800c9da:	1cc4      	adds	r4, r0, #3
 800c9dc:	f024 0403 	bic.w	r4, r4, #3
 800c9e0:	42a0      	cmp	r0, r4
 800c9e2:	d007      	beq.n	800c9f4 <sbrk_aligned+0x38>
 800c9e4:	1a21      	subs	r1, r4, r0
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 fb6c 	bl	800d0c4 <_sbrk_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d101      	bne.n	800c9f4 <sbrk_aligned+0x38>
 800c9f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	20002fe8 	.word	0x20002fe8

0800c9fc <_malloc_r>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4607      	mov	r7, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d905      	bls.n	800ca24 <_malloc_r+0x28>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	2600      	movs	r6, #0
 800ca1e:	4630      	mov	r0, r6
 800ca20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800caf8 <_malloc_r+0xfc>
 800ca28:	f000 f9f8 	bl	800ce1c <__malloc_lock>
 800ca2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca30:	461c      	mov	r4, r3
 800ca32:	bb5c      	cbnz	r4, 800ca8c <_malloc_r+0x90>
 800ca34:	4629      	mov	r1, r5
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7ff ffc0 	bl	800c9bc <sbrk_aligned>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	4604      	mov	r4, r0
 800ca40:	d155      	bne.n	800caee <_malloc_r+0xf2>
 800ca42:	f8d8 4000 	ldr.w	r4, [r8]
 800ca46:	4626      	mov	r6, r4
 800ca48:	2e00      	cmp	r6, #0
 800ca4a:	d145      	bne.n	800cad8 <_malloc_r+0xdc>
 800ca4c:	2c00      	cmp	r4, #0
 800ca4e:	d048      	beq.n	800cae2 <_malloc_r+0xe6>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	4631      	mov	r1, r6
 800ca54:	4638      	mov	r0, r7
 800ca56:	eb04 0903 	add.w	r9, r4, r3
 800ca5a:	f000 fb33 	bl	800d0c4 <_sbrk_r>
 800ca5e:	4581      	cmp	r9, r0
 800ca60:	d13f      	bne.n	800cae2 <_malloc_r+0xe6>
 800ca62:	6821      	ldr	r1, [r4, #0]
 800ca64:	1a6d      	subs	r5, r5, r1
 800ca66:	4629      	mov	r1, r5
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff ffa7 	bl	800c9bc <sbrk_aligned>
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d037      	beq.n	800cae2 <_malloc_r+0xe6>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	442b      	add	r3, r5
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d038      	beq.n	800caf2 <_malloc_r+0xf6>
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	42a2      	cmp	r2, r4
 800ca84:	d12b      	bne.n	800cade <_malloc_r+0xe2>
 800ca86:	2200      	movs	r2, #0
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	e00f      	b.n	800caac <_malloc_r+0xb0>
 800ca8c:	6822      	ldr	r2, [r4, #0]
 800ca8e:	1b52      	subs	r2, r2, r5
 800ca90:	d41f      	bmi.n	800cad2 <_malloc_r+0xd6>
 800ca92:	2a0b      	cmp	r2, #11
 800ca94:	d917      	bls.n	800cac6 <_malloc_r+0xca>
 800ca96:	1961      	adds	r1, r4, r5
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	6025      	str	r5, [r4, #0]
 800ca9c:	bf18      	it	ne
 800ca9e:	6059      	strne	r1, [r3, #4]
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	bf08      	it	eq
 800caa4:	f8c8 1000 	streq.w	r1, [r8]
 800caa8:	5162      	str	r2, [r4, r5]
 800caaa:	604b      	str	r3, [r1, #4]
 800caac:	4638      	mov	r0, r7
 800caae:	f104 060b 	add.w	r6, r4, #11
 800cab2:	f000 f9b9 	bl	800ce28 <__malloc_unlock>
 800cab6:	f026 0607 	bic.w	r6, r6, #7
 800caba:	1d23      	adds	r3, r4, #4
 800cabc:	1af2      	subs	r2, r6, r3
 800cabe:	d0ae      	beq.n	800ca1e <_malloc_r+0x22>
 800cac0:	1b9b      	subs	r3, r3, r6
 800cac2:	50a3      	str	r3, [r4, r2]
 800cac4:	e7ab      	b.n	800ca1e <_malloc_r+0x22>
 800cac6:	42a3      	cmp	r3, r4
 800cac8:	6862      	ldr	r2, [r4, #4]
 800caca:	d1dd      	bne.n	800ca88 <_malloc_r+0x8c>
 800cacc:	f8c8 2000 	str.w	r2, [r8]
 800cad0:	e7ec      	b.n	800caac <_malloc_r+0xb0>
 800cad2:	4623      	mov	r3, r4
 800cad4:	6864      	ldr	r4, [r4, #4]
 800cad6:	e7ac      	b.n	800ca32 <_malloc_r+0x36>
 800cad8:	4634      	mov	r4, r6
 800cada:	6876      	ldr	r6, [r6, #4]
 800cadc:	e7b4      	b.n	800ca48 <_malloc_r+0x4c>
 800cade:	4613      	mov	r3, r2
 800cae0:	e7cc      	b.n	800ca7c <_malloc_r+0x80>
 800cae2:	230c      	movs	r3, #12
 800cae4:	603b      	str	r3, [r7, #0]
 800cae6:	4638      	mov	r0, r7
 800cae8:	f000 f99e 	bl	800ce28 <__malloc_unlock>
 800caec:	e797      	b.n	800ca1e <_malloc_r+0x22>
 800caee:	6025      	str	r5, [r4, #0]
 800caf0:	e7dc      	b.n	800caac <_malloc_r+0xb0>
 800caf2:	605b      	str	r3, [r3, #4]
 800caf4:	deff      	udf	#255	; 0xff
 800caf6:	bf00      	nop
 800caf8:	20002fe4 	.word	0x20002fe4

0800cafc <_printf_common>:
 800cafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb00:	4616      	mov	r6, r2
 800cb02:	4699      	mov	r9, r3
 800cb04:	688a      	ldr	r2, [r1, #8]
 800cb06:	690b      	ldr	r3, [r1, #16]
 800cb08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	bfb8      	it	lt
 800cb10:	4613      	movlt	r3, r2
 800cb12:	6033      	str	r3, [r6, #0]
 800cb14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb18:	4607      	mov	r7, r0
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	b10a      	cbz	r2, 800cb22 <_printf_common+0x26>
 800cb1e:	3301      	adds	r3, #1
 800cb20:	6033      	str	r3, [r6, #0]
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	0699      	lsls	r1, r3, #26
 800cb26:	bf42      	ittt	mi
 800cb28:	6833      	ldrmi	r3, [r6, #0]
 800cb2a:	3302      	addmi	r3, #2
 800cb2c:	6033      	strmi	r3, [r6, #0]
 800cb2e:	6825      	ldr	r5, [r4, #0]
 800cb30:	f015 0506 	ands.w	r5, r5, #6
 800cb34:	d106      	bne.n	800cb44 <_printf_common+0x48>
 800cb36:	f104 0a19 	add.w	sl, r4, #25
 800cb3a:	68e3      	ldr	r3, [r4, #12]
 800cb3c:	6832      	ldr	r2, [r6, #0]
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	dc26      	bgt.n	800cb92 <_printf_common+0x96>
 800cb44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb48:	1e13      	subs	r3, r2, #0
 800cb4a:	6822      	ldr	r2, [r4, #0]
 800cb4c:	bf18      	it	ne
 800cb4e:	2301      	movne	r3, #1
 800cb50:	0692      	lsls	r2, r2, #26
 800cb52:	d42b      	bmi.n	800cbac <_printf_common+0xb0>
 800cb54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb58:	4649      	mov	r1, r9
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	47c0      	blx	r8
 800cb5e:	3001      	adds	r0, #1
 800cb60:	d01e      	beq.n	800cba0 <_printf_common+0xa4>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	6922      	ldr	r2, [r4, #16]
 800cb66:	f003 0306 	and.w	r3, r3, #6
 800cb6a:	2b04      	cmp	r3, #4
 800cb6c:	bf02      	ittt	eq
 800cb6e:	68e5      	ldreq	r5, [r4, #12]
 800cb70:	6833      	ldreq	r3, [r6, #0]
 800cb72:	1aed      	subeq	r5, r5, r3
 800cb74:	68a3      	ldr	r3, [r4, #8]
 800cb76:	bf0c      	ite	eq
 800cb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb7c:	2500      	movne	r5, #0
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	bfc4      	itt	gt
 800cb82:	1a9b      	subgt	r3, r3, r2
 800cb84:	18ed      	addgt	r5, r5, r3
 800cb86:	2600      	movs	r6, #0
 800cb88:	341a      	adds	r4, #26
 800cb8a:	42b5      	cmp	r5, r6
 800cb8c:	d11a      	bne.n	800cbc4 <_printf_common+0xc8>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	e008      	b.n	800cba4 <_printf_common+0xa8>
 800cb92:	2301      	movs	r3, #1
 800cb94:	4652      	mov	r2, sl
 800cb96:	4649      	mov	r1, r9
 800cb98:	4638      	mov	r0, r7
 800cb9a:	47c0      	blx	r8
 800cb9c:	3001      	adds	r0, #1
 800cb9e:	d103      	bne.n	800cba8 <_printf_common+0xac>
 800cba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba8:	3501      	adds	r5, #1
 800cbaa:	e7c6      	b.n	800cb3a <_printf_common+0x3e>
 800cbac:	18e1      	adds	r1, r4, r3
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	2030      	movs	r0, #48	; 0x30
 800cbb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbb6:	4422      	add	r2, r4
 800cbb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbc0:	3302      	adds	r3, #2
 800cbc2:	e7c7      	b.n	800cb54 <_printf_common+0x58>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	4649      	mov	r1, r9
 800cbca:	4638      	mov	r0, r7
 800cbcc:	47c0      	blx	r8
 800cbce:	3001      	adds	r0, #1
 800cbd0:	d0e6      	beq.n	800cba0 <_printf_common+0xa4>
 800cbd2:	3601      	adds	r6, #1
 800cbd4:	e7d9      	b.n	800cb8a <_printf_common+0x8e>
	...

0800cbd8 <_printf_i>:
 800cbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbdc:	7e0f      	ldrb	r7, [r1, #24]
 800cbde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbe0:	2f78      	cmp	r7, #120	; 0x78
 800cbe2:	4691      	mov	r9, r2
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	469a      	mov	sl, r3
 800cbea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cbee:	d807      	bhi.n	800cc00 <_printf_i+0x28>
 800cbf0:	2f62      	cmp	r7, #98	; 0x62
 800cbf2:	d80a      	bhi.n	800cc0a <_printf_i+0x32>
 800cbf4:	2f00      	cmp	r7, #0
 800cbf6:	f000 80d4 	beq.w	800cda2 <_printf_i+0x1ca>
 800cbfa:	2f58      	cmp	r7, #88	; 0x58
 800cbfc:	f000 80c0 	beq.w	800cd80 <_printf_i+0x1a8>
 800cc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc08:	e03a      	b.n	800cc80 <_printf_i+0xa8>
 800cc0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc0e:	2b15      	cmp	r3, #21
 800cc10:	d8f6      	bhi.n	800cc00 <_printf_i+0x28>
 800cc12:	a101      	add	r1, pc, #4	; (adr r1, 800cc18 <_printf_i+0x40>)
 800cc14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc18:	0800cc71 	.word	0x0800cc71
 800cc1c:	0800cc85 	.word	0x0800cc85
 800cc20:	0800cc01 	.word	0x0800cc01
 800cc24:	0800cc01 	.word	0x0800cc01
 800cc28:	0800cc01 	.word	0x0800cc01
 800cc2c:	0800cc01 	.word	0x0800cc01
 800cc30:	0800cc85 	.word	0x0800cc85
 800cc34:	0800cc01 	.word	0x0800cc01
 800cc38:	0800cc01 	.word	0x0800cc01
 800cc3c:	0800cc01 	.word	0x0800cc01
 800cc40:	0800cc01 	.word	0x0800cc01
 800cc44:	0800cd89 	.word	0x0800cd89
 800cc48:	0800ccb1 	.word	0x0800ccb1
 800cc4c:	0800cd43 	.word	0x0800cd43
 800cc50:	0800cc01 	.word	0x0800cc01
 800cc54:	0800cc01 	.word	0x0800cc01
 800cc58:	0800cdab 	.word	0x0800cdab
 800cc5c:	0800cc01 	.word	0x0800cc01
 800cc60:	0800ccb1 	.word	0x0800ccb1
 800cc64:	0800cc01 	.word	0x0800cc01
 800cc68:	0800cc01 	.word	0x0800cc01
 800cc6c:	0800cd4b 	.word	0x0800cd4b
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	1d1a      	adds	r2, r3, #4
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	602a      	str	r2, [r5, #0]
 800cc78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc80:	2301      	movs	r3, #1
 800cc82:	e09f      	b.n	800cdc4 <_printf_i+0x1ec>
 800cc84:	6820      	ldr	r0, [r4, #0]
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	0607      	lsls	r7, r0, #24
 800cc8a:	f103 0104 	add.w	r1, r3, #4
 800cc8e:	6029      	str	r1, [r5, #0]
 800cc90:	d501      	bpl.n	800cc96 <_printf_i+0xbe>
 800cc92:	681e      	ldr	r6, [r3, #0]
 800cc94:	e003      	b.n	800cc9e <_printf_i+0xc6>
 800cc96:	0646      	lsls	r6, r0, #25
 800cc98:	d5fb      	bpl.n	800cc92 <_printf_i+0xba>
 800cc9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc9e:	2e00      	cmp	r6, #0
 800cca0:	da03      	bge.n	800ccaa <_printf_i+0xd2>
 800cca2:	232d      	movs	r3, #45	; 0x2d
 800cca4:	4276      	negs	r6, r6
 800cca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccaa:	485a      	ldr	r0, [pc, #360]	; (800ce14 <_printf_i+0x23c>)
 800ccac:	230a      	movs	r3, #10
 800ccae:	e012      	b.n	800ccd6 <_printf_i+0xfe>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	6820      	ldr	r0, [r4, #0]
 800ccb4:	1d19      	adds	r1, r3, #4
 800ccb6:	6029      	str	r1, [r5, #0]
 800ccb8:	0605      	lsls	r5, r0, #24
 800ccba:	d501      	bpl.n	800ccc0 <_printf_i+0xe8>
 800ccbc:	681e      	ldr	r6, [r3, #0]
 800ccbe:	e002      	b.n	800ccc6 <_printf_i+0xee>
 800ccc0:	0641      	lsls	r1, r0, #25
 800ccc2:	d5fb      	bpl.n	800ccbc <_printf_i+0xe4>
 800ccc4:	881e      	ldrh	r6, [r3, #0]
 800ccc6:	4853      	ldr	r0, [pc, #332]	; (800ce14 <_printf_i+0x23c>)
 800ccc8:	2f6f      	cmp	r7, #111	; 0x6f
 800ccca:	bf0c      	ite	eq
 800cccc:	2308      	moveq	r3, #8
 800ccce:	230a      	movne	r3, #10
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccd6:	6865      	ldr	r5, [r4, #4]
 800ccd8:	60a5      	str	r5, [r4, #8]
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	bfa2      	ittt	ge
 800ccde:	6821      	ldrge	r1, [r4, #0]
 800cce0:	f021 0104 	bicge.w	r1, r1, #4
 800cce4:	6021      	strge	r1, [r4, #0]
 800cce6:	b90e      	cbnz	r6, 800ccec <_printf_i+0x114>
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	d04b      	beq.n	800cd84 <_printf_i+0x1ac>
 800ccec:	4615      	mov	r5, r2
 800ccee:	fbb6 f1f3 	udiv	r1, r6, r3
 800ccf2:	fb03 6711 	mls	r7, r3, r1, r6
 800ccf6:	5dc7      	ldrb	r7, [r0, r7]
 800ccf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ccfc:	4637      	mov	r7, r6
 800ccfe:	42bb      	cmp	r3, r7
 800cd00:	460e      	mov	r6, r1
 800cd02:	d9f4      	bls.n	800ccee <_printf_i+0x116>
 800cd04:	2b08      	cmp	r3, #8
 800cd06:	d10b      	bne.n	800cd20 <_printf_i+0x148>
 800cd08:	6823      	ldr	r3, [r4, #0]
 800cd0a:	07de      	lsls	r6, r3, #31
 800cd0c:	d508      	bpl.n	800cd20 <_printf_i+0x148>
 800cd0e:	6923      	ldr	r3, [r4, #16]
 800cd10:	6861      	ldr	r1, [r4, #4]
 800cd12:	4299      	cmp	r1, r3
 800cd14:	bfde      	ittt	le
 800cd16:	2330      	movle	r3, #48	; 0x30
 800cd18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd20:	1b52      	subs	r2, r2, r5
 800cd22:	6122      	str	r2, [r4, #16]
 800cd24:	f8cd a000 	str.w	sl, [sp]
 800cd28:	464b      	mov	r3, r9
 800cd2a:	aa03      	add	r2, sp, #12
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	4640      	mov	r0, r8
 800cd30:	f7ff fee4 	bl	800cafc <_printf_common>
 800cd34:	3001      	adds	r0, #1
 800cd36:	d14a      	bne.n	800cdce <_printf_i+0x1f6>
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd3c:	b004      	add	sp, #16
 800cd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	f043 0320 	orr.w	r3, r3, #32
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	4833      	ldr	r0, [pc, #204]	; (800ce18 <_printf_i+0x240>)
 800cd4c:	2778      	movs	r7, #120	; 0x78
 800cd4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	6829      	ldr	r1, [r5, #0]
 800cd56:	061f      	lsls	r7, r3, #24
 800cd58:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd5c:	d402      	bmi.n	800cd64 <_printf_i+0x18c>
 800cd5e:	065f      	lsls	r7, r3, #25
 800cd60:	bf48      	it	mi
 800cd62:	b2b6      	uxthmi	r6, r6
 800cd64:	07df      	lsls	r7, r3, #31
 800cd66:	bf48      	it	mi
 800cd68:	f043 0320 	orrmi.w	r3, r3, #32
 800cd6c:	6029      	str	r1, [r5, #0]
 800cd6e:	bf48      	it	mi
 800cd70:	6023      	strmi	r3, [r4, #0]
 800cd72:	b91e      	cbnz	r6, 800cd7c <_printf_i+0x1a4>
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	f023 0320 	bic.w	r3, r3, #32
 800cd7a:	6023      	str	r3, [r4, #0]
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	e7a7      	b.n	800ccd0 <_printf_i+0xf8>
 800cd80:	4824      	ldr	r0, [pc, #144]	; (800ce14 <_printf_i+0x23c>)
 800cd82:	e7e4      	b.n	800cd4e <_printf_i+0x176>
 800cd84:	4615      	mov	r5, r2
 800cd86:	e7bd      	b.n	800cd04 <_printf_i+0x12c>
 800cd88:	682b      	ldr	r3, [r5, #0]
 800cd8a:	6826      	ldr	r6, [r4, #0]
 800cd8c:	6961      	ldr	r1, [r4, #20]
 800cd8e:	1d18      	adds	r0, r3, #4
 800cd90:	6028      	str	r0, [r5, #0]
 800cd92:	0635      	lsls	r5, r6, #24
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	d501      	bpl.n	800cd9c <_printf_i+0x1c4>
 800cd98:	6019      	str	r1, [r3, #0]
 800cd9a:	e002      	b.n	800cda2 <_printf_i+0x1ca>
 800cd9c:	0670      	lsls	r0, r6, #25
 800cd9e:	d5fb      	bpl.n	800cd98 <_printf_i+0x1c0>
 800cda0:	8019      	strh	r1, [r3, #0]
 800cda2:	2300      	movs	r3, #0
 800cda4:	6123      	str	r3, [r4, #16]
 800cda6:	4615      	mov	r5, r2
 800cda8:	e7bc      	b.n	800cd24 <_printf_i+0x14c>
 800cdaa:	682b      	ldr	r3, [r5, #0]
 800cdac:	1d1a      	adds	r2, r3, #4
 800cdae:	602a      	str	r2, [r5, #0]
 800cdb0:	681d      	ldr	r5, [r3, #0]
 800cdb2:	6862      	ldr	r2, [r4, #4]
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f7f3 fa42 	bl	8000240 <memchr>
 800cdbc:	b108      	cbz	r0, 800cdc2 <_printf_i+0x1ea>
 800cdbe:	1b40      	subs	r0, r0, r5
 800cdc0:	6060      	str	r0, [r4, #4]
 800cdc2:	6863      	ldr	r3, [r4, #4]
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdcc:	e7aa      	b.n	800cd24 <_printf_i+0x14c>
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	47d0      	blx	sl
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d0ad      	beq.n	800cd38 <_printf_i+0x160>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	079b      	lsls	r3, r3, #30
 800cde0:	d413      	bmi.n	800ce0a <_printf_i+0x232>
 800cde2:	68e0      	ldr	r0, [r4, #12]
 800cde4:	9b03      	ldr	r3, [sp, #12]
 800cde6:	4298      	cmp	r0, r3
 800cde8:	bfb8      	it	lt
 800cdea:	4618      	movlt	r0, r3
 800cdec:	e7a6      	b.n	800cd3c <_printf_i+0x164>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	47d0      	blx	sl
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d09d      	beq.n	800cd38 <_printf_i+0x160>
 800cdfc:	3501      	adds	r5, #1
 800cdfe:	68e3      	ldr	r3, [r4, #12]
 800ce00:	9903      	ldr	r1, [sp, #12]
 800ce02:	1a5b      	subs	r3, r3, r1
 800ce04:	42ab      	cmp	r3, r5
 800ce06:	dcf2      	bgt.n	800cdee <_printf_i+0x216>
 800ce08:	e7eb      	b.n	800cde2 <_printf_i+0x20a>
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	f104 0619 	add.w	r6, r4, #25
 800ce10:	e7f5      	b.n	800cdfe <_printf_i+0x226>
 800ce12:	bf00      	nop
 800ce14:	080902de 	.word	0x080902de
 800ce18:	080902ef 	.word	0x080902ef

0800ce1c <__malloc_lock>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__malloc_lock+0x8>)
 800ce1e:	f000 b98b 	b.w	800d138 <__retarget_lock_acquire_recursive>
 800ce22:	bf00      	nop
 800ce24:	20003128 	.word	0x20003128

0800ce28 <__malloc_unlock>:
 800ce28:	4801      	ldr	r0, [pc, #4]	; (800ce30 <__malloc_unlock+0x8>)
 800ce2a:	f000 b986 	b.w	800d13a <__retarget_lock_release_recursive>
 800ce2e:	bf00      	nop
 800ce30:	20003128 	.word	0x20003128

0800ce34 <siprintf>:
 800ce34:	b40e      	push	{r1, r2, r3}
 800ce36:	b500      	push	{lr}
 800ce38:	b09c      	sub	sp, #112	; 0x70
 800ce3a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce3c:	9002      	str	r0, [sp, #8]
 800ce3e:	9006      	str	r0, [sp, #24]
 800ce40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce44:	4809      	ldr	r0, [pc, #36]	; (800ce6c <siprintf+0x38>)
 800ce46:	9107      	str	r1, [sp, #28]
 800ce48:	9104      	str	r1, [sp, #16]
 800ce4a:	4909      	ldr	r1, [pc, #36]	; (800ce70 <siprintf+0x3c>)
 800ce4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce50:	9105      	str	r1, [sp, #20]
 800ce52:	6800      	ldr	r0, [r0, #0]
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	a902      	add	r1, sp, #8
 800ce58:	f001 f838 	bl	800decc <_svfiprintf_r>
 800ce5c:	9b02      	ldr	r3, [sp, #8]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	b01c      	add	sp, #112	; 0x70
 800ce64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce68:	b003      	add	sp, #12
 800ce6a:	4770      	bx	lr
 800ce6c:	200009e4 	.word	0x200009e4
 800ce70:	ffff0208 	.word	0xffff0208

0800ce74 <srand>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4b10      	ldr	r3, [pc, #64]	; (800ceb8 <srand+0x44>)
 800ce78:	681d      	ldr	r5, [r3, #0]
 800ce7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	b9b3      	cbnz	r3, 800ceae <srand+0x3a>
 800ce80:	2018      	movs	r0, #24
 800ce82:	f7ff fd8b 	bl	800c99c <malloc>
 800ce86:	4602      	mov	r2, r0
 800ce88:	6328      	str	r0, [r5, #48]	; 0x30
 800ce8a:	b920      	cbnz	r0, 800ce96 <srand+0x22>
 800ce8c:	4b0b      	ldr	r3, [pc, #44]	; (800cebc <srand+0x48>)
 800ce8e:	480c      	ldr	r0, [pc, #48]	; (800cec0 <srand+0x4c>)
 800ce90:	2146      	movs	r1, #70	; 0x46
 800ce92:	f000 f961 	bl	800d158 <__assert_func>
 800ce96:	490b      	ldr	r1, [pc, #44]	; (800cec4 <srand+0x50>)
 800ce98:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <srand+0x54>)
 800ce9a:	e9c0 1300 	strd	r1, r3, [r0]
 800ce9e:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <srand+0x58>)
 800cea0:	6083      	str	r3, [r0, #8]
 800cea2:	230b      	movs	r3, #11
 800cea4:	8183      	strh	r3, [r0, #12]
 800cea6:	2100      	movs	r1, #0
 800cea8:	2001      	movs	r0, #1
 800ceaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ceae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	611c      	str	r4, [r3, #16]
 800ceb4:	615a      	str	r2, [r3, #20]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	200009e4 	.word	0x200009e4
 800cebc:	08090300 	.word	0x08090300
 800cec0:	08090317 	.word	0x08090317
 800cec4:	abcd330e 	.word	0xabcd330e
 800cec8:	e66d1234 	.word	0xe66d1234
 800cecc:	0005deec 	.word	0x0005deec

0800ced0 <rand>:
 800ced0:	4b16      	ldr	r3, [pc, #88]	; (800cf2c <rand+0x5c>)
 800ced2:	b510      	push	{r4, lr}
 800ced4:	681c      	ldr	r4, [r3, #0]
 800ced6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ced8:	b9b3      	cbnz	r3, 800cf08 <rand+0x38>
 800ceda:	2018      	movs	r0, #24
 800cedc:	f7ff fd5e 	bl	800c99c <malloc>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6320      	str	r0, [r4, #48]	; 0x30
 800cee4:	b920      	cbnz	r0, 800cef0 <rand+0x20>
 800cee6:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <rand+0x60>)
 800cee8:	4812      	ldr	r0, [pc, #72]	; (800cf34 <rand+0x64>)
 800ceea:	2152      	movs	r1, #82	; 0x52
 800ceec:	f000 f934 	bl	800d158 <__assert_func>
 800cef0:	4911      	ldr	r1, [pc, #68]	; (800cf38 <rand+0x68>)
 800cef2:	4b12      	ldr	r3, [pc, #72]	; (800cf3c <rand+0x6c>)
 800cef4:	e9c0 1300 	strd	r1, r3, [r0]
 800cef8:	4b11      	ldr	r3, [pc, #68]	; (800cf40 <rand+0x70>)
 800cefa:	6083      	str	r3, [r0, #8]
 800cefc:	230b      	movs	r3, #11
 800cefe:	8183      	strh	r3, [r0, #12]
 800cf00:	2100      	movs	r1, #0
 800cf02:	2001      	movs	r0, #1
 800cf04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cf08:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cf0a:	480e      	ldr	r0, [pc, #56]	; (800cf44 <rand+0x74>)
 800cf0c:	690b      	ldr	r3, [r1, #16]
 800cf0e:	694c      	ldr	r4, [r1, #20]
 800cf10:	4a0d      	ldr	r2, [pc, #52]	; (800cf48 <rand+0x78>)
 800cf12:	4358      	muls	r0, r3
 800cf14:	fb02 0004 	mla	r0, r2, r4, r0
 800cf18:	fba3 3202 	umull	r3, r2, r3, r2
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	eb40 0002 	adc.w	r0, r0, r2
 800cf22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cf26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cf2a:	bd10      	pop	{r4, pc}
 800cf2c:	200009e4 	.word	0x200009e4
 800cf30:	08090300 	.word	0x08090300
 800cf34:	08090317 	.word	0x08090317
 800cf38:	abcd330e 	.word	0xabcd330e
 800cf3c:	e66d1234 	.word	0xe66d1234
 800cf40:	0005deec 	.word	0x0005deec
 800cf44:	5851f42d 	.word	0x5851f42d
 800cf48:	4c957f2d 	.word	0x4c957f2d

0800cf4c <std>:
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	b510      	push	{r4, lr}
 800cf50:	4604      	mov	r4, r0
 800cf52:	e9c0 3300 	strd	r3, r3, [r0]
 800cf56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf5a:	6083      	str	r3, [r0, #8]
 800cf5c:	8181      	strh	r1, [r0, #12]
 800cf5e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf60:	81c2      	strh	r2, [r0, #14]
 800cf62:	6183      	str	r3, [r0, #24]
 800cf64:	4619      	mov	r1, r3
 800cf66:	2208      	movs	r2, #8
 800cf68:	305c      	adds	r0, #92	; 0x5c
 800cf6a:	f000 f89f 	bl	800d0ac <memset>
 800cf6e:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <std+0x38>)
 800cf70:	6263      	str	r3, [r4, #36]	; 0x24
 800cf72:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <std+0x3c>)
 800cf74:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf76:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <std+0x40>)
 800cf78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf7a:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <std+0x44>)
 800cf7c:	6224      	str	r4, [r4, #32]
 800cf7e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	bf00      	nop
 800cf84:	0800e91d 	.word	0x0800e91d
 800cf88:	0800e93f 	.word	0x0800e93f
 800cf8c:	0800e977 	.word	0x0800e977
 800cf90:	0800e99b 	.word	0x0800e99b

0800cf94 <stdio_exit_handler>:
 800cf94:	4a02      	ldr	r2, [pc, #8]	; (800cfa0 <stdio_exit_handler+0xc>)
 800cf96:	4903      	ldr	r1, [pc, #12]	; (800cfa4 <stdio_exit_handler+0x10>)
 800cf98:	4803      	ldr	r0, [pc, #12]	; (800cfa8 <stdio_exit_handler+0x14>)
 800cf9a:	f000 b869 	b.w	800d070 <_fwalk_sglue>
 800cf9e:	bf00      	nop
 800cfa0:	2000098c 	.word	0x2000098c
 800cfa4:	0800e1d5 	.word	0x0800e1d5
 800cfa8:	20000998 	.word	0x20000998

0800cfac <cleanup_stdio>:
 800cfac:	6841      	ldr	r1, [r0, #4]
 800cfae:	4b0c      	ldr	r3, [pc, #48]	; (800cfe0 <cleanup_stdio+0x34>)
 800cfb0:	4299      	cmp	r1, r3
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	d001      	beq.n	800cfbc <cleanup_stdio+0x10>
 800cfb8:	f001 f90c 	bl	800e1d4 <_fflush_r>
 800cfbc:	68a1      	ldr	r1, [r4, #8]
 800cfbe:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <cleanup_stdio+0x38>)
 800cfc0:	4299      	cmp	r1, r3
 800cfc2:	d002      	beq.n	800cfca <cleanup_stdio+0x1e>
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f001 f905 	bl	800e1d4 <_fflush_r>
 800cfca:	68e1      	ldr	r1, [r4, #12]
 800cfcc:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <cleanup_stdio+0x3c>)
 800cfce:	4299      	cmp	r1, r3
 800cfd0:	d004      	beq.n	800cfdc <cleanup_stdio+0x30>
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd8:	f001 b8fc 	b.w	800e1d4 <_fflush_r>
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	bf00      	nop
 800cfe0:	20002fec 	.word	0x20002fec
 800cfe4:	20003054 	.word	0x20003054
 800cfe8:	200030bc 	.word	0x200030bc

0800cfec <global_stdio_init.part.0>:
 800cfec:	b510      	push	{r4, lr}
 800cfee:	4b0b      	ldr	r3, [pc, #44]	; (800d01c <global_stdio_init.part.0+0x30>)
 800cff0:	4c0b      	ldr	r4, [pc, #44]	; (800d020 <global_stdio_init.part.0+0x34>)
 800cff2:	4a0c      	ldr	r2, [pc, #48]	; (800d024 <global_stdio_init.part.0+0x38>)
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	4620      	mov	r0, r4
 800cff8:	2200      	movs	r2, #0
 800cffa:	2104      	movs	r1, #4
 800cffc:	f7ff ffa6 	bl	800cf4c <std>
 800d000:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d004:	2201      	movs	r2, #1
 800d006:	2109      	movs	r1, #9
 800d008:	f7ff ffa0 	bl	800cf4c <std>
 800d00c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d010:	2202      	movs	r2, #2
 800d012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d016:	2112      	movs	r1, #18
 800d018:	f7ff bf98 	b.w	800cf4c <std>
 800d01c:	20003124 	.word	0x20003124
 800d020:	20002fec 	.word	0x20002fec
 800d024:	0800cf95 	.word	0x0800cf95

0800d028 <__sfp_lock_acquire>:
 800d028:	4801      	ldr	r0, [pc, #4]	; (800d030 <__sfp_lock_acquire+0x8>)
 800d02a:	f000 b885 	b.w	800d138 <__retarget_lock_acquire_recursive>
 800d02e:	bf00      	nop
 800d030:	20003129 	.word	0x20003129

0800d034 <__sfp_lock_release>:
 800d034:	4801      	ldr	r0, [pc, #4]	; (800d03c <__sfp_lock_release+0x8>)
 800d036:	f000 b880 	b.w	800d13a <__retarget_lock_release_recursive>
 800d03a:	bf00      	nop
 800d03c:	20003129 	.word	0x20003129

0800d040 <__sinit>:
 800d040:	b510      	push	{r4, lr}
 800d042:	4604      	mov	r4, r0
 800d044:	f7ff fff0 	bl	800d028 <__sfp_lock_acquire>
 800d048:	6a23      	ldr	r3, [r4, #32]
 800d04a:	b11b      	cbz	r3, 800d054 <__sinit+0x14>
 800d04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d050:	f7ff bff0 	b.w	800d034 <__sfp_lock_release>
 800d054:	4b04      	ldr	r3, [pc, #16]	; (800d068 <__sinit+0x28>)
 800d056:	6223      	str	r3, [r4, #32]
 800d058:	4b04      	ldr	r3, [pc, #16]	; (800d06c <__sinit+0x2c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1f5      	bne.n	800d04c <__sinit+0xc>
 800d060:	f7ff ffc4 	bl	800cfec <global_stdio_init.part.0>
 800d064:	e7f2      	b.n	800d04c <__sinit+0xc>
 800d066:	bf00      	nop
 800d068:	0800cfad 	.word	0x0800cfad
 800d06c:	20003124 	.word	0x20003124

0800d070 <_fwalk_sglue>:
 800d070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d074:	4607      	mov	r7, r0
 800d076:	4688      	mov	r8, r1
 800d078:	4614      	mov	r4, r2
 800d07a:	2600      	movs	r6, #0
 800d07c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d080:	f1b9 0901 	subs.w	r9, r9, #1
 800d084:	d505      	bpl.n	800d092 <_fwalk_sglue+0x22>
 800d086:	6824      	ldr	r4, [r4, #0]
 800d088:	2c00      	cmp	r4, #0
 800d08a:	d1f7      	bne.n	800d07c <_fwalk_sglue+0xc>
 800d08c:	4630      	mov	r0, r6
 800d08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d092:	89ab      	ldrh	r3, [r5, #12]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d907      	bls.n	800d0a8 <_fwalk_sglue+0x38>
 800d098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d09c:	3301      	adds	r3, #1
 800d09e:	d003      	beq.n	800d0a8 <_fwalk_sglue+0x38>
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	47c0      	blx	r8
 800d0a6:	4306      	orrs	r6, r0
 800d0a8:	3568      	adds	r5, #104	; 0x68
 800d0aa:	e7e9      	b.n	800d080 <_fwalk_sglue+0x10>

0800d0ac <memset>:
 800d0ac:	4402      	add	r2, r0
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d100      	bne.n	800d0b6 <memset+0xa>
 800d0b4:	4770      	bx	lr
 800d0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0ba:	e7f9      	b.n	800d0b0 <memset+0x4>

0800d0bc <_localeconv_r>:
 800d0bc:	4800      	ldr	r0, [pc, #0]	; (800d0c0 <_localeconv_r+0x4>)
 800d0be:	4770      	bx	lr
 800d0c0:	20000ad8 	.word	0x20000ad8

0800d0c4 <_sbrk_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	4d06      	ldr	r5, [pc, #24]	; (800d0e0 <_sbrk_r+0x1c>)
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	602b      	str	r3, [r5, #0]
 800d0d0:	f7f9 fca6 	bl	8006a20 <_sbrk>
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	d102      	bne.n	800d0de <_sbrk_r+0x1a>
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	b103      	cbz	r3, 800d0de <_sbrk_r+0x1a>
 800d0dc:	6023      	str	r3, [r4, #0]
 800d0de:	bd38      	pop	{r3, r4, r5, pc}
 800d0e0:	2000312c 	.word	0x2000312c

0800d0e4 <__errno>:
 800d0e4:	4b01      	ldr	r3, [pc, #4]	; (800d0ec <__errno+0x8>)
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	200009e4 	.word	0x200009e4

0800d0f0 <__libc_init_array>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	4d0d      	ldr	r5, [pc, #52]	; (800d128 <__libc_init_array+0x38>)
 800d0f4:	4c0d      	ldr	r4, [pc, #52]	; (800d12c <__libc_init_array+0x3c>)
 800d0f6:	1b64      	subs	r4, r4, r5
 800d0f8:	10a4      	asrs	r4, r4, #2
 800d0fa:	2600      	movs	r6, #0
 800d0fc:	42a6      	cmp	r6, r4
 800d0fe:	d109      	bne.n	800d114 <__libc_init_array+0x24>
 800d100:	4d0b      	ldr	r5, [pc, #44]	; (800d130 <__libc_init_array+0x40>)
 800d102:	4c0c      	ldr	r4, [pc, #48]	; (800d134 <__libc_init_array+0x44>)
 800d104:	f001 ffc0 	bl	800f088 <_init>
 800d108:	1b64      	subs	r4, r4, r5
 800d10a:	10a4      	asrs	r4, r4, #2
 800d10c:	2600      	movs	r6, #0
 800d10e:	42a6      	cmp	r6, r4
 800d110:	d105      	bne.n	800d11e <__libc_init_array+0x2e>
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	f855 3b04 	ldr.w	r3, [r5], #4
 800d118:	4798      	blx	r3
 800d11a:	3601      	adds	r6, #1
 800d11c:	e7ee      	b.n	800d0fc <__libc_init_array+0xc>
 800d11e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d122:	4798      	blx	r3
 800d124:	3601      	adds	r6, #1
 800d126:	e7f2      	b.n	800d10e <__libc_init_array+0x1e>
 800d128:	080906a0 	.word	0x080906a0
 800d12c:	080906a0 	.word	0x080906a0
 800d130:	080906a0 	.word	0x080906a0
 800d134:	080906a4 	.word	0x080906a4

0800d138 <__retarget_lock_acquire_recursive>:
 800d138:	4770      	bx	lr

0800d13a <__retarget_lock_release_recursive>:
 800d13a:	4770      	bx	lr

0800d13c <memcpy>:
 800d13c:	440a      	add	r2, r1
 800d13e:	4291      	cmp	r1, r2
 800d140:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d144:	d100      	bne.n	800d148 <memcpy+0xc>
 800d146:	4770      	bx	lr
 800d148:	b510      	push	{r4, lr}
 800d14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d152:	4291      	cmp	r1, r2
 800d154:	d1f9      	bne.n	800d14a <memcpy+0xe>
 800d156:	bd10      	pop	{r4, pc}

0800d158 <__assert_func>:
 800d158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d15a:	4614      	mov	r4, r2
 800d15c:	461a      	mov	r2, r3
 800d15e:	4b09      	ldr	r3, [pc, #36]	; (800d184 <__assert_func+0x2c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4605      	mov	r5, r0
 800d164:	68d8      	ldr	r0, [r3, #12]
 800d166:	b14c      	cbz	r4, 800d17c <__assert_func+0x24>
 800d168:	4b07      	ldr	r3, [pc, #28]	; (800d188 <__assert_func+0x30>)
 800d16a:	9100      	str	r1, [sp, #0]
 800d16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d170:	4906      	ldr	r1, [pc, #24]	; (800d18c <__assert_func+0x34>)
 800d172:	462b      	mov	r3, r5
 800d174:	f001 fc16 	bl	800e9a4 <fiprintf>
 800d178:	f001 fcb6 	bl	800eae8 <abort>
 800d17c:	4b04      	ldr	r3, [pc, #16]	; (800d190 <__assert_func+0x38>)
 800d17e:	461c      	mov	r4, r3
 800d180:	e7f3      	b.n	800d16a <__assert_func+0x12>
 800d182:	bf00      	nop
 800d184:	200009e4 	.word	0x200009e4
 800d188:	0809036f 	.word	0x0809036f
 800d18c:	0809037c 	.word	0x0809037c
 800d190:	080903aa 	.word	0x080903aa

0800d194 <quorem>:
 800d194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	6903      	ldr	r3, [r0, #16]
 800d19a:	690c      	ldr	r4, [r1, #16]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	4607      	mov	r7, r0
 800d1a0:	db7e      	blt.n	800d2a0 <quorem+0x10c>
 800d1a2:	3c01      	subs	r4, #1
 800d1a4:	f101 0814 	add.w	r8, r1, #20
 800d1a8:	f100 0514 	add.w	r5, r0, #20
 800d1ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1ca:	d331      	bcc.n	800d230 <quorem+0x9c>
 800d1cc:	f04f 0e00 	mov.w	lr, #0
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	46ac      	mov	ip, r5
 800d1d4:	46f2      	mov	sl, lr
 800d1d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1da:	b293      	uxth	r3, r2
 800d1dc:	fb06 e303 	mla	r3, r6, r3, lr
 800d1e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1e4:	0c1a      	lsrs	r2, r3, #16
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	ebaa 0303 	sub.w	r3, sl, r3
 800d1ec:	f8dc a000 	ldr.w	sl, [ip]
 800d1f0:	fa13 f38a 	uxtah	r3, r3, sl
 800d1f4:	fb06 220e 	mla	r2, r6, lr, r2
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	9b00      	ldr	r3, [sp, #0]
 800d1fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d200:	b292      	uxth	r2, r2
 800d202:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d206:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d20a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d20e:	4581      	cmp	r9, r0
 800d210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d214:	f84c 3b04 	str.w	r3, [ip], #4
 800d218:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d21c:	d2db      	bcs.n	800d1d6 <quorem+0x42>
 800d21e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d222:	b92b      	cbnz	r3, 800d230 <quorem+0x9c>
 800d224:	9b01      	ldr	r3, [sp, #4]
 800d226:	3b04      	subs	r3, #4
 800d228:	429d      	cmp	r5, r3
 800d22a:	461a      	mov	r2, r3
 800d22c:	d32c      	bcc.n	800d288 <quorem+0xf4>
 800d22e:	613c      	str	r4, [r7, #16]
 800d230:	4638      	mov	r0, r7
 800d232:	f001 fa73 	bl	800e71c <__mcmp>
 800d236:	2800      	cmp	r0, #0
 800d238:	db22      	blt.n	800d280 <quorem+0xec>
 800d23a:	3601      	adds	r6, #1
 800d23c:	4629      	mov	r1, r5
 800d23e:	2000      	movs	r0, #0
 800d240:	f858 2b04 	ldr.w	r2, [r8], #4
 800d244:	f8d1 c000 	ldr.w	ip, [r1]
 800d248:	b293      	uxth	r3, r2
 800d24a:	1ac3      	subs	r3, r0, r3
 800d24c:	0c12      	lsrs	r2, r2, #16
 800d24e:	fa13 f38c 	uxtah	r3, r3, ip
 800d252:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d260:	45c1      	cmp	r9, r8
 800d262:	f841 3b04 	str.w	r3, [r1], #4
 800d266:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d26a:	d2e9      	bcs.n	800d240 <quorem+0xac>
 800d26c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d270:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d274:	b922      	cbnz	r2, 800d280 <quorem+0xec>
 800d276:	3b04      	subs	r3, #4
 800d278:	429d      	cmp	r5, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	d30a      	bcc.n	800d294 <quorem+0x100>
 800d27e:	613c      	str	r4, [r7, #16]
 800d280:	4630      	mov	r0, r6
 800d282:	b003      	add	sp, #12
 800d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d288:	6812      	ldr	r2, [r2, #0]
 800d28a:	3b04      	subs	r3, #4
 800d28c:	2a00      	cmp	r2, #0
 800d28e:	d1ce      	bne.n	800d22e <quorem+0x9a>
 800d290:	3c01      	subs	r4, #1
 800d292:	e7c9      	b.n	800d228 <quorem+0x94>
 800d294:	6812      	ldr	r2, [r2, #0]
 800d296:	3b04      	subs	r3, #4
 800d298:	2a00      	cmp	r2, #0
 800d29a:	d1f0      	bne.n	800d27e <quorem+0xea>
 800d29c:	3c01      	subs	r4, #1
 800d29e:	e7eb      	b.n	800d278 <quorem+0xe4>
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	e7ee      	b.n	800d282 <quorem+0xee>
 800d2a4:	0000      	movs	r0, r0
	...

0800d2a8 <_dtoa_r>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	ed2d 8b02 	vpush	{d8}
 800d2b0:	69c5      	ldr	r5, [r0, #28]
 800d2b2:	b091      	sub	sp, #68	; 0x44
 800d2b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d2b8:	ec59 8b10 	vmov	r8, r9, d0
 800d2bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d2be:	9106      	str	r1, [sp, #24]
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	9208      	str	r2, [sp, #32]
 800d2c4:	930c      	str	r3, [sp, #48]	; 0x30
 800d2c6:	b975      	cbnz	r5, 800d2e6 <_dtoa_r+0x3e>
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	f7ff fb67 	bl	800c99c <malloc>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	61f0      	str	r0, [r6, #28]
 800d2d2:	b920      	cbnz	r0, 800d2de <_dtoa_r+0x36>
 800d2d4:	4ba6      	ldr	r3, [pc, #664]	; (800d570 <_dtoa_r+0x2c8>)
 800d2d6:	21ef      	movs	r1, #239	; 0xef
 800d2d8:	48a6      	ldr	r0, [pc, #664]	; (800d574 <_dtoa_r+0x2cc>)
 800d2da:	f7ff ff3d 	bl	800d158 <__assert_func>
 800d2de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2e2:	6005      	str	r5, [r0, #0]
 800d2e4:	60c5      	str	r5, [r0, #12]
 800d2e6:	69f3      	ldr	r3, [r6, #28]
 800d2e8:	6819      	ldr	r1, [r3, #0]
 800d2ea:	b151      	cbz	r1, 800d302 <_dtoa_r+0x5a>
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	604a      	str	r2, [r1, #4]
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	4093      	lsls	r3, r2
 800d2f4:	608b      	str	r3, [r1, #8]
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f000 ffd4 	bl	800e2a4 <_Bfree>
 800d2fc:	69f3      	ldr	r3, [r6, #28]
 800d2fe:	2200      	movs	r2, #0
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	f1b9 0300 	subs.w	r3, r9, #0
 800d306:	bfbb      	ittet	lt
 800d308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d30c:	9303      	strlt	r3, [sp, #12]
 800d30e:	2300      	movge	r3, #0
 800d310:	2201      	movlt	r2, #1
 800d312:	bfac      	ite	ge
 800d314:	6023      	strge	r3, [r4, #0]
 800d316:	6022      	strlt	r2, [r4, #0]
 800d318:	4b97      	ldr	r3, [pc, #604]	; (800d578 <_dtoa_r+0x2d0>)
 800d31a:	9c03      	ldr	r4, [sp, #12]
 800d31c:	43a3      	bics	r3, r4
 800d31e:	d11c      	bne.n	800d35a <_dtoa_r+0xb2>
 800d320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d322:	f242 730f 	movw	r3, #9999	; 0x270f
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d32c:	ea53 0308 	orrs.w	r3, r3, r8
 800d330:	f000 84fb 	beq.w	800dd2a <_dtoa_r+0xa82>
 800d334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d336:	b963      	cbnz	r3, 800d352 <_dtoa_r+0xaa>
 800d338:	4b90      	ldr	r3, [pc, #576]	; (800d57c <_dtoa_r+0x2d4>)
 800d33a:	e020      	b.n	800d37e <_dtoa_r+0xd6>
 800d33c:	4b90      	ldr	r3, [pc, #576]	; (800d580 <_dtoa_r+0x2d8>)
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	3308      	adds	r3, #8
 800d342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d344:	6013      	str	r3, [r2, #0]
 800d346:	9801      	ldr	r0, [sp, #4]
 800d348:	b011      	add	sp, #68	; 0x44
 800d34a:	ecbd 8b02 	vpop	{d8}
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	4b8a      	ldr	r3, [pc, #552]	; (800d57c <_dtoa_r+0x2d4>)
 800d354:	9301      	str	r3, [sp, #4]
 800d356:	3303      	adds	r3, #3
 800d358:	e7f3      	b.n	800d342 <_dtoa_r+0x9a>
 800d35a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d35e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d366:	d10c      	bne.n	800d382 <_dtoa_r+0xda>
 800d368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d36a:	2301      	movs	r3, #1
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 84d7 	beq.w	800dd24 <_dtoa_r+0xa7c>
 800d376:	4b83      	ldr	r3, [pc, #524]	; (800d584 <_dtoa_r+0x2dc>)
 800d378:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	e7e1      	b.n	800d346 <_dtoa_r+0x9e>
 800d382:	aa0e      	add	r2, sp, #56	; 0x38
 800d384:	a90f      	add	r1, sp, #60	; 0x3c
 800d386:	4630      	mov	r0, r6
 800d388:	eeb0 0b48 	vmov.f64	d0, d8
 800d38c:	f001 fa6c 	bl	800e868 <__d2b>
 800d390:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d396:	4605      	mov	r5, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d046      	beq.n	800d42a <_dtoa_r+0x182>
 800d39c:	eeb0 7b48 	vmov.f64	d7, d8
 800d3a0:	ee18 1a90 	vmov	r1, s17
 800d3a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d3a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d3ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d3b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	ee07 1a90 	vmov	s15, r1
 800d3ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d3be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d558 <_dtoa_r+0x2b0>
 800d3c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d560 <_dtoa_r+0x2b8>
 800d3ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d3ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d568 <_dtoa_r+0x2c0>
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d3da:	eeb0 7b46 	vmov.f64	d7, d6
 800d3de:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d3e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d3e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	ee16 ba90 	vmov	fp, s13
 800d3f2:	9009      	str	r0, [sp, #36]	; 0x24
 800d3f4:	d508      	bpl.n	800d408 <_dtoa_r+0x160>
 800d3f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d3fa:	eeb4 6b47 	vcmp.f64	d6, d7
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	bf18      	it	ne
 800d404:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800d408:	f1bb 0f16 	cmp.w	fp, #22
 800d40c:	d82b      	bhi.n	800d466 <_dtoa_r+0x1be>
 800d40e:	495e      	ldr	r1, [pc, #376]	; (800d588 <_dtoa_r+0x2e0>)
 800d410:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d414:	ed91 7b00 	vldr	d7, [r1]
 800d418:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d420:	d501      	bpl.n	800d426 <_dtoa_r+0x17e>
 800d422:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d426:	2100      	movs	r1, #0
 800d428:	e01e      	b.n	800d468 <_dtoa_r+0x1c0>
 800d42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d42c:	4413      	add	r3, r2
 800d42e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d432:	2920      	cmp	r1, #32
 800d434:	bfc1      	itttt	gt
 800d436:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d43a:	408c      	lslgt	r4, r1
 800d43c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d440:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d444:	bfd6      	itet	le
 800d446:	f1c1 0120 	rsble	r1, r1, #32
 800d44a:	4321      	orrgt	r1, r4
 800d44c:	fa08 f101 	lslle.w	r1, r8, r1
 800d450:	ee07 1a90 	vmov	s15, r1
 800d454:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d458:	3b01      	subs	r3, #1
 800d45a:	ee17 1a90 	vmov	r1, s15
 800d45e:	2001      	movs	r0, #1
 800d460:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d464:	e7a7      	b.n	800d3b6 <_dtoa_r+0x10e>
 800d466:	2101      	movs	r1, #1
 800d468:	1ad2      	subs	r2, r2, r3
 800d46a:	1e53      	subs	r3, r2, #1
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	bf45      	ittet	mi
 800d470:	f1c2 0301 	rsbmi	r3, r2, #1
 800d474:	9304      	strmi	r3, [sp, #16]
 800d476:	2300      	movpl	r3, #0
 800d478:	2300      	movmi	r3, #0
 800d47a:	bf4c      	ite	mi
 800d47c:	9305      	strmi	r3, [sp, #20]
 800d47e:	9304      	strpl	r3, [sp, #16]
 800d480:	f1bb 0f00 	cmp.w	fp, #0
 800d484:	910b      	str	r1, [sp, #44]	; 0x2c
 800d486:	db18      	blt.n	800d4ba <_dtoa_r+0x212>
 800d488:	9b05      	ldr	r3, [sp, #20]
 800d48a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d48e:	445b      	add	r3, fp
 800d490:	9305      	str	r3, [sp, #20]
 800d492:	2300      	movs	r3, #0
 800d494:	9a06      	ldr	r2, [sp, #24]
 800d496:	2a09      	cmp	r2, #9
 800d498:	d848      	bhi.n	800d52c <_dtoa_r+0x284>
 800d49a:	2a05      	cmp	r2, #5
 800d49c:	bfc4      	itt	gt
 800d49e:	3a04      	subgt	r2, #4
 800d4a0:	9206      	strgt	r2, [sp, #24]
 800d4a2:	9a06      	ldr	r2, [sp, #24]
 800d4a4:	f1a2 0202 	sub.w	r2, r2, #2
 800d4a8:	bfcc      	ite	gt
 800d4aa:	2400      	movgt	r4, #0
 800d4ac:	2401      	movle	r4, #1
 800d4ae:	2a03      	cmp	r2, #3
 800d4b0:	d847      	bhi.n	800d542 <_dtoa_r+0x29a>
 800d4b2:	e8df f002 	tbb	[pc, r2]
 800d4b6:	2d0b      	.short	0x2d0b
 800d4b8:	392b      	.short	0x392b
 800d4ba:	9b04      	ldr	r3, [sp, #16]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	eba3 030b 	sub.w	r3, r3, fp
 800d4c2:	9304      	str	r3, [sp, #16]
 800d4c4:	920a      	str	r2, [sp, #40]	; 0x28
 800d4c6:	f1cb 0300 	rsb	r3, fp, #0
 800d4ca:	e7e3      	b.n	800d494 <_dtoa_r+0x1ec>
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	9207      	str	r2, [sp, #28]
 800d4d0:	9a08      	ldr	r2, [sp, #32]
 800d4d2:	2a00      	cmp	r2, #0
 800d4d4:	dc38      	bgt.n	800d548 <_dtoa_r+0x2a0>
 800d4d6:	f04f 0a01 	mov.w	sl, #1
 800d4da:	46d1      	mov	r9, sl
 800d4dc:	4652      	mov	r2, sl
 800d4de:	f8cd a020 	str.w	sl, [sp, #32]
 800d4e2:	69f7      	ldr	r7, [r6, #28]
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	2004      	movs	r0, #4
 800d4e8:	f100 0c14 	add.w	ip, r0, #20
 800d4ec:	4594      	cmp	ip, r2
 800d4ee:	d930      	bls.n	800d552 <_dtoa_r+0x2aa>
 800d4f0:	6079      	str	r1, [r7, #4]
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800d4f6:	f000 fe95 	bl	800e224 <_Balloc>
 800d4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4fc:	9001      	str	r0, [sp, #4]
 800d4fe:	4602      	mov	r2, r0
 800d500:	2800      	cmp	r0, #0
 800d502:	d145      	bne.n	800d590 <_dtoa_r+0x2e8>
 800d504:	4b21      	ldr	r3, [pc, #132]	; (800d58c <_dtoa_r+0x2e4>)
 800d506:	f240 11af 	movw	r1, #431	; 0x1af
 800d50a:	e6e5      	b.n	800d2d8 <_dtoa_r+0x30>
 800d50c:	2201      	movs	r2, #1
 800d50e:	e7de      	b.n	800d4ce <_dtoa_r+0x226>
 800d510:	2200      	movs	r2, #0
 800d512:	9207      	str	r2, [sp, #28]
 800d514:	9a08      	ldr	r2, [sp, #32]
 800d516:	eb0b 0a02 	add.w	sl, fp, r2
 800d51a:	f10a 0901 	add.w	r9, sl, #1
 800d51e:	464a      	mov	r2, r9
 800d520:	2a01      	cmp	r2, #1
 800d522:	bfb8      	it	lt
 800d524:	2201      	movlt	r2, #1
 800d526:	e7dc      	b.n	800d4e2 <_dtoa_r+0x23a>
 800d528:	2201      	movs	r2, #1
 800d52a:	e7f2      	b.n	800d512 <_dtoa_r+0x26a>
 800d52c:	2401      	movs	r4, #1
 800d52e:	2200      	movs	r2, #0
 800d530:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d534:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d538:	2100      	movs	r1, #0
 800d53a:	46d1      	mov	r9, sl
 800d53c:	2212      	movs	r2, #18
 800d53e:	9108      	str	r1, [sp, #32]
 800d540:	e7cf      	b.n	800d4e2 <_dtoa_r+0x23a>
 800d542:	2201      	movs	r2, #1
 800d544:	9207      	str	r2, [sp, #28]
 800d546:	e7f5      	b.n	800d534 <_dtoa_r+0x28c>
 800d548:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d54c:	46d1      	mov	r9, sl
 800d54e:	4652      	mov	r2, sl
 800d550:	e7c7      	b.n	800d4e2 <_dtoa_r+0x23a>
 800d552:	3101      	adds	r1, #1
 800d554:	0040      	lsls	r0, r0, #1
 800d556:	e7c7      	b.n	800d4e8 <_dtoa_r+0x240>
 800d558:	636f4361 	.word	0x636f4361
 800d55c:	3fd287a7 	.word	0x3fd287a7
 800d560:	8b60c8b3 	.word	0x8b60c8b3
 800d564:	3fc68a28 	.word	0x3fc68a28
 800d568:	509f79fb 	.word	0x509f79fb
 800d56c:	3fd34413 	.word	0x3fd34413
 800d570:	08090300 	.word	0x08090300
 800d574:	080903b8 	.word	0x080903b8
 800d578:	7ff00000 	.word	0x7ff00000
 800d57c:	080903b4 	.word	0x080903b4
 800d580:	080903ab 	.word	0x080903ab
 800d584:	080902dd 	.word	0x080902dd
 800d588:	080904b8 	.word	0x080904b8
 800d58c:	08090410 	.word	0x08090410
 800d590:	69f2      	ldr	r2, [r6, #28]
 800d592:	9901      	ldr	r1, [sp, #4]
 800d594:	6011      	str	r1, [r2, #0]
 800d596:	f1b9 0f0e 	cmp.w	r9, #14
 800d59a:	d86c      	bhi.n	800d676 <_dtoa_r+0x3ce>
 800d59c:	2c00      	cmp	r4, #0
 800d59e:	d06a      	beq.n	800d676 <_dtoa_r+0x3ce>
 800d5a0:	f1bb 0f00 	cmp.w	fp, #0
 800d5a4:	f340 80a0 	ble.w	800d6e8 <_dtoa_r+0x440>
 800d5a8:	4ac1      	ldr	r2, [pc, #772]	; (800d8b0 <_dtoa_r+0x608>)
 800d5aa:	f00b 010f 	and.w	r1, fp, #15
 800d5ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d5b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d5b6:	ed92 7b00 	vldr	d7, [r2]
 800d5ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d5be:	f000 8087 	beq.w	800d6d0 <_dtoa_r+0x428>
 800d5c2:	49bc      	ldr	r1, [pc, #752]	; (800d8b4 <_dtoa_r+0x60c>)
 800d5c4:	ed91 6b08 	vldr	d6, [r1, #32]
 800d5c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d5cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d5d0:	f002 020f 	and.w	r2, r2, #15
 800d5d4:	2103      	movs	r1, #3
 800d5d6:	48b7      	ldr	r0, [pc, #732]	; (800d8b4 <_dtoa_r+0x60c>)
 800d5d8:	2a00      	cmp	r2, #0
 800d5da:	d17b      	bne.n	800d6d4 <_dtoa_r+0x42c>
 800d5dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d5e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d5e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5ee:	2a00      	cmp	r2, #0
 800d5f0:	f000 80a0 	beq.w	800d734 <_dtoa_r+0x48c>
 800d5f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d5f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d600:	f140 8098 	bpl.w	800d734 <_dtoa_r+0x48c>
 800d604:	f1b9 0f00 	cmp.w	r9, #0
 800d608:	f000 8094 	beq.w	800d734 <_dtoa_r+0x48c>
 800d60c:	f1ba 0f00 	cmp.w	sl, #0
 800d610:	dd2f      	ble.n	800d672 <_dtoa_r+0x3ca>
 800d612:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d61a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d61e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d622:	3101      	adds	r1, #1
 800d624:	4654      	mov	r4, sl
 800d626:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d62a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d62e:	ee07 1a90 	vmov	s15, r1
 800d632:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d636:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d63a:	ee15 7a90 	vmov	r7, s11
 800d63e:	ec51 0b15 	vmov	r0, r1, d5
 800d642:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d646:	2c00      	cmp	r4, #0
 800d648:	d177      	bne.n	800d73a <_dtoa_r+0x492>
 800d64a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d64e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d652:	ec41 0b17 	vmov	d7, r0, r1
 800d656:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	f300 826a 	bgt.w	800db36 <_dtoa_r+0x88e>
 800d662:	eeb1 7b47 	vneg.f64	d7, d7
 800d666:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66e:	f100 8260 	bmi.w	800db32 <_dtoa_r+0x88a>
 800d672:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d678:	2a00      	cmp	r2, #0
 800d67a:	f2c0 811d 	blt.w	800d8b8 <_dtoa_r+0x610>
 800d67e:	f1bb 0f0e 	cmp.w	fp, #14
 800d682:	f300 8119 	bgt.w	800d8b8 <_dtoa_r+0x610>
 800d686:	4b8a      	ldr	r3, [pc, #552]	; (800d8b0 <_dtoa_r+0x608>)
 800d688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d68c:	ed93 6b00 	vldr	d6, [r3]
 800d690:	9b08      	ldr	r3, [sp, #32]
 800d692:	2b00      	cmp	r3, #0
 800d694:	f280 80b7 	bge.w	800d806 <_dtoa_r+0x55e>
 800d698:	f1b9 0f00 	cmp.w	r9, #0
 800d69c:	f300 80b3 	bgt.w	800d806 <_dtoa_r+0x55e>
 800d6a0:	f040 8246 	bne.w	800db30 <_dtoa_r+0x888>
 800d6a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d6a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d6ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b8:	464c      	mov	r4, r9
 800d6ba:	464f      	mov	r7, r9
 800d6bc:	f280 821c 	bge.w	800daf8 <_dtoa_r+0x850>
 800d6c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d6c4:	2331      	movs	r3, #49	; 0x31
 800d6c6:	f808 3b01 	strb.w	r3, [r8], #1
 800d6ca:	f10b 0b01 	add.w	fp, fp, #1
 800d6ce:	e218      	b.n	800db02 <_dtoa_r+0x85a>
 800d6d0:	2102      	movs	r1, #2
 800d6d2:	e780      	b.n	800d5d6 <_dtoa_r+0x32e>
 800d6d4:	07d4      	lsls	r4, r2, #31
 800d6d6:	d504      	bpl.n	800d6e2 <_dtoa_r+0x43a>
 800d6d8:	ed90 6b00 	vldr	d6, [r0]
 800d6dc:	3101      	adds	r1, #1
 800d6de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6e2:	1052      	asrs	r2, r2, #1
 800d6e4:	3008      	adds	r0, #8
 800d6e6:	e777      	b.n	800d5d8 <_dtoa_r+0x330>
 800d6e8:	d022      	beq.n	800d730 <_dtoa_r+0x488>
 800d6ea:	f1cb 0200 	rsb	r2, fp, #0
 800d6ee:	4970      	ldr	r1, [pc, #448]	; (800d8b0 <_dtoa_r+0x608>)
 800d6f0:	f002 000f 	and.w	r0, r2, #15
 800d6f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d6f8:	ed91 7b00 	vldr	d7, [r1]
 800d6fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d700:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d704:	486b      	ldr	r0, [pc, #428]	; (800d8b4 <_dtoa_r+0x60c>)
 800d706:	1112      	asrs	r2, r2, #4
 800d708:	2400      	movs	r4, #0
 800d70a:	2102      	movs	r1, #2
 800d70c:	b92a      	cbnz	r2, 800d71a <_dtoa_r+0x472>
 800d70e:	2c00      	cmp	r4, #0
 800d710:	f43f af6a 	beq.w	800d5e8 <_dtoa_r+0x340>
 800d714:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d718:	e766      	b.n	800d5e8 <_dtoa_r+0x340>
 800d71a:	07d7      	lsls	r7, r2, #31
 800d71c:	d505      	bpl.n	800d72a <_dtoa_r+0x482>
 800d71e:	ed90 6b00 	vldr	d6, [r0]
 800d722:	3101      	adds	r1, #1
 800d724:	2401      	movs	r4, #1
 800d726:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d72a:	1052      	asrs	r2, r2, #1
 800d72c:	3008      	adds	r0, #8
 800d72e:	e7ed      	b.n	800d70c <_dtoa_r+0x464>
 800d730:	2102      	movs	r1, #2
 800d732:	e759      	b.n	800d5e8 <_dtoa_r+0x340>
 800d734:	465a      	mov	r2, fp
 800d736:	464c      	mov	r4, r9
 800d738:	e775      	b.n	800d626 <_dtoa_r+0x37e>
 800d73a:	ec41 0b17 	vmov	d7, r0, r1
 800d73e:	495c      	ldr	r1, [pc, #368]	; (800d8b0 <_dtoa_r+0x608>)
 800d740:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d744:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d748:	9901      	ldr	r1, [sp, #4]
 800d74a:	440c      	add	r4, r1
 800d74c:	9907      	ldr	r1, [sp, #28]
 800d74e:	b351      	cbz	r1, 800d7a6 <_dtoa_r+0x4fe>
 800d750:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d754:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d758:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d75c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d760:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d764:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d768:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d76c:	ee14 1a90 	vmov	r1, s9
 800d770:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d774:	3130      	adds	r1, #48	; 0x30
 800d776:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d77a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d782:	f808 1b01 	strb.w	r1, [r8], #1
 800d786:	d439      	bmi.n	800d7fc <_dtoa_r+0x554>
 800d788:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d78c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	d472      	bmi.n	800d87c <_dtoa_r+0x5d4>
 800d796:	45a0      	cmp	r8, r4
 800d798:	f43f af6b 	beq.w	800d672 <_dtoa_r+0x3ca>
 800d79c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d7a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d7a4:	e7e0      	b.n	800d768 <_dtoa_r+0x4c0>
 800d7a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d7aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d7b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d7b8:	ee14 1a90 	vmov	r1, s9
 800d7bc:	3130      	adds	r1, #48	; 0x30
 800d7be:	f808 1b01 	strb.w	r1, [r8], #1
 800d7c2:	45a0      	cmp	r8, r4
 800d7c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d7c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d7cc:	d118      	bne.n	800d800 <_dtoa_r+0x558>
 800d7ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d7d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d7d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7de:	dc4d      	bgt.n	800d87c <_dtoa_r+0x5d4>
 800d7e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d7e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ec:	f57f af41 	bpl.w	800d672 <_dtoa_r+0x3ca>
 800d7f0:	4680      	mov	r8, r0
 800d7f2:	3801      	subs	r0, #1
 800d7f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d7f8:	2b30      	cmp	r3, #48	; 0x30
 800d7fa:	d0f9      	beq.n	800d7f0 <_dtoa_r+0x548>
 800d7fc:	4693      	mov	fp, r2
 800d7fe:	e02a      	b.n	800d856 <_dtoa_r+0x5ae>
 800d800:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d804:	e7d6      	b.n	800d7b4 <_dtoa_r+0x50c>
 800d806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d80a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d80e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d812:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d816:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d81a:	ee15 3a10 	vmov	r3, s10
 800d81e:	3330      	adds	r3, #48	; 0x30
 800d820:	f808 3b01 	strb.w	r3, [r8], #1
 800d824:	9b01      	ldr	r3, [sp, #4]
 800d826:	eba8 0303 	sub.w	r3, r8, r3
 800d82a:	4599      	cmp	r9, r3
 800d82c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d830:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d834:	d133      	bne.n	800d89e <_dtoa_r+0x5f6>
 800d836:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d83a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d842:	dc1a      	bgt.n	800d87a <_dtoa_r+0x5d2>
 800d844:	eeb4 7b46 	vcmp.f64	d7, d6
 800d848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84c:	d103      	bne.n	800d856 <_dtoa_r+0x5ae>
 800d84e:	ee15 3a10 	vmov	r3, s10
 800d852:	07d9      	lsls	r1, r3, #31
 800d854:	d411      	bmi.n	800d87a <_dtoa_r+0x5d2>
 800d856:	4629      	mov	r1, r5
 800d858:	4630      	mov	r0, r6
 800d85a:	f000 fd23 	bl	800e2a4 <_Bfree>
 800d85e:	2300      	movs	r3, #0
 800d860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d862:	f888 3000 	strb.w	r3, [r8]
 800d866:	f10b 0301 	add.w	r3, fp, #1
 800d86a:	6013      	str	r3, [r2, #0]
 800d86c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f43f ad69 	beq.w	800d346 <_dtoa_r+0x9e>
 800d874:	f8c3 8000 	str.w	r8, [r3]
 800d878:	e565      	b.n	800d346 <_dtoa_r+0x9e>
 800d87a:	465a      	mov	r2, fp
 800d87c:	4643      	mov	r3, r8
 800d87e:	4698      	mov	r8, r3
 800d880:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d884:	2939      	cmp	r1, #57	; 0x39
 800d886:	d106      	bne.n	800d896 <_dtoa_r+0x5ee>
 800d888:	9901      	ldr	r1, [sp, #4]
 800d88a:	4299      	cmp	r1, r3
 800d88c:	d1f7      	bne.n	800d87e <_dtoa_r+0x5d6>
 800d88e:	9801      	ldr	r0, [sp, #4]
 800d890:	2130      	movs	r1, #48	; 0x30
 800d892:	3201      	adds	r2, #1
 800d894:	7001      	strb	r1, [r0, #0]
 800d896:	7819      	ldrb	r1, [r3, #0]
 800d898:	3101      	adds	r1, #1
 800d89a:	7019      	strb	r1, [r3, #0]
 800d89c:	e7ae      	b.n	800d7fc <_dtoa_r+0x554>
 800d89e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8aa:	d1b2      	bne.n	800d812 <_dtoa_r+0x56a>
 800d8ac:	e7d3      	b.n	800d856 <_dtoa_r+0x5ae>
 800d8ae:	bf00      	nop
 800d8b0:	080904b8 	.word	0x080904b8
 800d8b4:	08090490 	.word	0x08090490
 800d8b8:	9907      	ldr	r1, [sp, #28]
 800d8ba:	2900      	cmp	r1, #0
 800d8bc:	f000 80d0 	beq.w	800da60 <_dtoa_r+0x7b8>
 800d8c0:	9906      	ldr	r1, [sp, #24]
 800d8c2:	2901      	cmp	r1, #1
 800d8c4:	f300 80b4 	bgt.w	800da30 <_dtoa_r+0x788>
 800d8c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	f000 80ac 	beq.w	800da28 <_dtoa_r+0x780>
 800d8d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d8d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d8d8:	461c      	mov	r4, r3
 800d8da:	9309      	str	r3, [sp, #36]	; 0x24
 800d8dc:	9b04      	ldr	r3, [sp, #16]
 800d8de:	4413      	add	r3, r2
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	9b05      	ldr	r3, [sp, #20]
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	4413      	add	r3, r2
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	9305      	str	r3, [sp, #20]
 800d8ec:	f000 fd90 	bl	800e410 <__i2b>
 800d8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f2:	4607      	mov	r7, r0
 800d8f4:	f1b8 0f00 	cmp.w	r8, #0
 800d8f8:	d00d      	beq.n	800d916 <_dtoa_r+0x66e>
 800d8fa:	9a05      	ldr	r2, [sp, #20]
 800d8fc:	2a00      	cmp	r2, #0
 800d8fe:	dd0a      	ble.n	800d916 <_dtoa_r+0x66e>
 800d900:	4542      	cmp	r2, r8
 800d902:	9904      	ldr	r1, [sp, #16]
 800d904:	bfa8      	it	ge
 800d906:	4642      	movge	r2, r8
 800d908:	1a89      	subs	r1, r1, r2
 800d90a:	9104      	str	r1, [sp, #16]
 800d90c:	9905      	ldr	r1, [sp, #20]
 800d90e:	eba8 0802 	sub.w	r8, r8, r2
 800d912:	1a8a      	subs	r2, r1, r2
 800d914:	9205      	str	r2, [sp, #20]
 800d916:	b303      	cbz	r3, 800d95a <_dtoa_r+0x6b2>
 800d918:	9a07      	ldr	r2, [sp, #28]
 800d91a:	2a00      	cmp	r2, #0
 800d91c:	f000 80a5 	beq.w	800da6a <_dtoa_r+0x7c2>
 800d920:	2c00      	cmp	r4, #0
 800d922:	dd13      	ble.n	800d94c <_dtoa_r+0x6a4>
 800d924:	4639      	mov	r1, r7
 800d926:	4622      	mov	r2, r4
 800d928:	4630      	mov	r0, r6
 800d92a:	930d      	str	r3, [sp, #52]	; 0x34
 800d92c:	f000 fe30 	bl	800e590 <__pow5mult>
 800d930:	462a      	mov	r2, r5
 800d932:	4601      	mov	r1, r0
 800d934:	4607      	mov	r7, r0
 800d936:	4630      	mov	r0, r6
 800d938:	f000 fd80 	bl	800e43c <__multiply>
 800d93c:	4629      	mov	r1, r5
 800d93e:	9009      	str	r0, [sp, #36]	; 0x24
 800d940:	4630      	mov	r0, r6
 800d942:	f000 fcaf 	bl	800e2a4 <_Bfree>
 800d946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d94a:	4615      	mov	r5, r2
 800d94c:	1b1a      	subs	r2, r3, r4
 800d94e:	d004      	beq.n	800d95a <_dtoa_r+0x6b2>
 800d950:	4629      	mov	r1, r5
 800d952:	4630      	mov	r0, r6
 800d954:	f000 fe1c 	bl	800e590 <__pow5mult>
 800d958:	4605      	mov	r5, r0
 800d95a:	2101      	movs	r1, #1
 800d95c:	4630      	mov	r0, r6
 800d95e:	f000 fd57 	bl	800e410 <__i2b>
 800d962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d964:	2b00      	cmp	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	f340 8081 	ble.w	800da6e <_dtoa_r+0x7c6>
 800d96c:	461a      	mov	r2, r3
 800d96e:	4601      	mov	r1, r0
 800d970:	4630      	mov	r0, r6
 800d972:	f000 fe0d 	bl	800e590 <__pow5mult>
 800d976:	9b06      	ldr	r3, [sp, #24]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	4604      	mov	r4, r0
 800d97c:	dd7a      	ble.n	800da74 <_dtoa_r+0x7cc>
 800d97e:	2300      	movs	r3, #0
 800d980:	9309      	str	r3, [sp, #36]	; 0x24
 800d982:	6922      	ldr	r2, [r4, #16]
 800d984:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d988:	6910      	ldr	r0, [r2, #16]
 800d98a:	f000 fcf3 	bl	800e374 <__hi0bits>
 800d98e:	f1c0 0020 	rsb	r0, r0, #32
 800d992:	9b05      	ldr	r3, [sp, #20]
 800d994:	4418      	add	r0, r3
 800d996:	f010 001f 	ands.w	r0, r0, #31
 800d99a:	f000 8093 	beq.w	800dac4 <_dtoa_r+0x81c>
 800d99e:	f1c0 0220 	rsb	r2, r0, #32
 800d9a2:	2a04      	cmp	r2, #4
 800d9a4:	f340 8085 	ble.w	800dab2 <_dtoa_r+0x80a>
 800d9a8:	9b04      	ldr	r3, [sp, #16]
 800d9aa:	f1c0 001c 	rsb	r0, r0, #28
 800d9ae:	4403      	add	r3, r0
 800d9b0:	9304      	str	r3, [sp, #16]
 800d9b2:	9b05      	ldr	r3, [sp, #20]
 800d9b4:	4480      	add	r8, r0
 800d9b6:	4403      	add	r3, r0
 800d9b8:	9305      	str	r3, [sp, #20]
 800d9ba:	9b04      	ldr	r3, [sp, #16]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dd05      	ble.n	800d9cc <_dtoa_r+0x724>
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f000 fe3d 	bl	800e644 <__lshift>
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	9b05      	ldr	r3, [sp, #20]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	dd05      	ble.n	800d9de <_dtoa_r+0x736>
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f000 fe34 	bl	800e644 <__lshift>
 800d9dc:	4604      	mov	r4, r0
 800d9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d071      	beq.n	800dac8 <_dtoa_r+0x820>
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f000 fe98 	bl	800e71c <__mcmp>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	da6b      	bge.n	800dac8 <_dtoa_r+0x820>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	220a      	movs	r2, #10
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	f000 fc76 	bl	800e2e8 <__multadd>
 800d9fc:	9b07      	ldr	r3, [sp, #28]
 800d9fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da02:	4605      	mov	r5, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	f000 8197 	beq.w	800dd38 <_dtoa_r+0xa90>
 800da0a:	4639      	mov	r1, r7
 800da0c:	2300      	movs	r3, #0
 800da0e:	220a      	movs	r2, #10
 800da10:	4630      	mov	r0, r6
 800da12:	f000 fc69 	bl	800e2e8 <__multadd>
 800da16:	f1ba 0f00 	cmp.w	sl, #0
 800da1a:	4607      	mov	r7, r0
 800da1c:	f300 8093 	bgt.w	800db46 <_dtoa_r+0x89e>
 800da20:	9b06      	ldr	r3, [sp, #24]
 800da22:	2b02      	cmp	r3, #2
 800da24:	dc57      	bgt.n	800dad6 <_dtoa_r+0x82e>
 800da26:	e08e      	b.n	800db46 <_dtoa_r+0x89e>
 800da28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da2e:	e751      	b.n	800d8d4 <_dtoa_r+0x62c>
 800da30:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800da34:	42a3      	cmp	r3, r4
 800da36:	bfbf      	itttt	lt
 800da38:	1ae2      	sublt	r2, r4, r3
 800da3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800da3c:	189b      	addlt	r3, r3, r2
 800da3e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800da40:	bfae      	itee	ge
 800da42:	1b1c      	subge	r4, r3, r4
 800da44:	4623      	movlt	r3, r4
 800da46:	2400      	movlt	r4, #0
 800da48:	f1b9 0f00 	cmp.w	r9, #0
 800da4c:	bfb5      	itete	lt
 800da4e:	9a04      	ldrlt	r2, [sp, #16]
 800da50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800da54:	eba2 0809 	sublt.w	r8, r2, r9
 800da58:	464a      	movge	r2, r9
 800da5a:	bfb8      	it	lt
 800da5c:	2200      	movlt	r2, #0
 800da5e:	e73c      	b.n	800d8da <_dtoa_r+0x632>
 800da60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800da64:	9f07      	ldr	r7, [sp, #28]
 800da66:	461c      	mov	r4, r3
 800da68:	e744      	b.n	800d8f4 <_dtoa_r+0x64c>
 800da6a:	461a      	mov	r2, r3
 800da6c:	e770      	b.n	800d950 <_dtoa_r+0x6a8>
 800da6e:	9b06      	ldr	r3, [sp, #24]
 800da70:	2b01      	cmp	r3, #1
 800da72:	dc18      	bgt.n	800daa6 <_dtoa_r+0x7fe>
 800da74:	9b02      	ldr	r3, [sp, #8]
 800da76:	b9b3      	cbnz	r3, 800daa6 <_dtoa_r+0x7fe>
 800da78:	9b03      	ldr	r3, [sp, #12]
 800da7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800da7e:	b9a2      	cbnz	r2, 800daaa <_dtoa_r+0x802>
 800da80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800da84:	0d12      	lsrs	r2, r2, #20
 800da86:	0512      	lsls	r2, r2, #20
 800da88:	b18a      	cbz	r2, 800daae <_dtoa_r+0x806>
 800da8a:	9b04      	ldr	r3, [sp, #16]
 800da8c:	3301      	adds	r3, #1
 800da8e:	9304      	str	r3, [sp, #16]
 800da90:	9b05      	ldr	r3, [sp, #20]
 800da92:	3301      	adds	r3, #1
 800da94:	9305      	str	r3, [sp, #20]
 800da96:	2301      	movs	r3, #1
 800da98:	9309      	str	r3, [sp, #36]	; 0x24
 800da9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f47f af70 	bne.w	800d982 <_dtoa_r+0x6da>
 800daa2:	2001      	movs	r0, #1
 800daa4:	e775      	b.n	800d992 <_dtoa_r+0x6ea>
 800daa6:	2300      	movs	r3, #0
 800daa8:	e7f6      	b.n	800da98 <_dtoa_r+0x7f0>
 800daaa:	9b02      	ldr	r3, [sp, #8]
 800daac:	e7f4      	b.n	800da98 <_dtoa_r+0x7f0>
 800daae:	9209      	str	r2, [sp, #36]	; 0x24
 800dab0:	e7f3      	b.n	800da9a <_dtoa_r+0x7f2>
 800dab2:	d082      	beq.n	800d9ba <_dtoa_r+0x712>
 800dab4:	9b04      	ldr	r3, [sp, #16]
 800dab6:	321c      	adds	r2, #28
 800dab8:	4413      	add	r3, r2
 800daba:	9304      	str	r3, [sp, #16]
 800dabc:	9b05      	ldr	r3, [sp, #20]
 800dabe:	4490      	add	r8, r2
 800dac0:	4413      	add	r3, r2
 800dac2:	e779      	b.n	800d9b8 <_dtoa_r+0x710>
 800dac4:	4602      	mov	r2, r0
 800dac6:	e7f5      	b.n	800dab4 <_dtoa_r+0x80c>
 800dac8:	f1b9 0f00 	cmp.w	r9, #0
 800dacc:	dc36      	bgt.n	800db3c <_dtoa_r+0x894>
 800dace:	9b06      	ldr	r3, [sp, #24]
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	dd33      	ble.n	800db3c <_dtoa_r+0x894>
 800dad4:	46ca      	mov	sl, r9
 800dad6:	f1ba 0f00 	cmp.w	sl, #0
 800dada:	d10d      	bne.n	800daf8 <_dtoa_r+0x850>
 800dadc:	4621      	mov	r1, r4
 800dade:	4653      	mov	r3, sl
 800dae0:	2205      	movs	r2, #5
 800dae2:	4630      	mov	r0, r6
 800dae4:	f000 fc00 	bl	800e2e8 <__multadd>
 800dae8:	4601      	mov	r1, r0
 800daea:	4604      	mov	r4, r0
 800daec:	4628      	mov	r0, r5
 800daee:	f000 fe15 	bl	800e71c <__mcmp>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	f73f ade4 	bgt.w	800d6c0 <_dtoa_r+0x418>
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dafe:	ea6f 0b03 	mvn.w	fp, r3
 800db02:	f04f 0900 	mov.w	r9, #0
 800db06:	4621      	mov	r1, r4
 800db08:	4630      	mov	r0, r6
 800db0a:	f000 fbcb 	bl	800e2a4 <_Bfree>
 800db0e:	2f00      	cmp	r7, #0
 800db10:	f43f aea1 	beq.w	800d856 <_dtoa_r+0x5ae>
 800db14:	f1b9 0f00 	cmp.w	r9, #0
 800db18:	d005      	beq.n	800db26 <_dtoa_r+0x87e>
 800db1a:	45b9      	cmp	r9, r7
 800db1c:	d003      	beq.n	800db26 <_dtoa_r+0x87e>
 800db1e:	4649      	mov	r1, r9
 800db20:	4630      	mov	r0, r6
 800db22:	f000 fbbf 	bl	800e2a4 <_Bfree>
 800db26:	4639      	mov	r1, r7
 800db28:	4630      	mov	r0, r6
 800db2a:	f000 fbbb 	bl	800e2a4 <_Bfree>
 800db2e:	e692      	b.n	800d856 <_dtoa_r+0x5ae>
 800db30:	2400      	movs	r4, #0
 800db32:	4627      	mov	r7, r4
 800db34:	e7e0      	b.n	800daf8 <_dtoa_r+0x850>
 800db36:	4693      	mov	fp, r2
 800db38:	4627      	mov	r7, r4
 800db3a:	e5c1      	b.n	800d6c0 <_dtoa_r+0x418>
 800db3c:	9b07      	ldr	r3, [sp, #28]
 800db3e:	46ca      	mov	sl, r9
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 8100 	beq.w	800dd46 <_dtoa_r+0xa9e>
 800db46:	f1b8 0f00 	cmp.w	r8, #0
 800db4a:	dd05      	ble.n	800db58 <_dtoa_r+0x8b0>
 800db4c:	4639      	mov	r1, r7
 800db4e:	4642      	mov	r2, r8
 800db50:	4630      	mov	r0, r6
 800db52:	f000 fd77 	bl	800e644 <__lshift>
 800db56:	4607      	mov	r7, r0
 800db58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d05d      	beq.n	800dc1a <_dtoa_r+0x972>
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	4630      	mov	r0, r6
 800db62:	f000 fb5f 	bl	800e224 <_Balloc>
 800db66:	4680      	mov	r8, r0
 800db68:	b928      	cbnz	r0, 800db76 <_dtoa_r+0x8ce>
 800db6a:	4b82      	ldr	r3, [pc, #520]	; (800dd74 <_dtoa_r+0xacc>)
 800db6c:	4602      	mov	r2, r0
 800db6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800db72:	f7ff bbb1 	b.w	800d2d8 <_dtoa_r+0x30>
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	3202      	adds	r2, #2
 800db7a:	0092      	lsls	r2, r2, #2
 800db7c:	f107 010c 	add.w	r1, r7, #12
 800db80:	300c      	adds	r0, #12
 800db82:	f7ff fadb 	bl	800d13c <memcpy>
 800db86:	2201      	movs	r2, #1
 800db88:	4641      	mov	r1, r8
 800db8a:	4630      	mov	r0, r6
 800db8c:	f000 fd5a 	bl	800e644 <__lshift>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	3301      	adds	r3, #1
 800db94:	9304      	str	r3, [sp, #16]
 800db96:	9b01      	ldr	r3, [sp, #4]
 800db98:	4453      	add	r3, sl
 800db9a:	9308      	str	r3, [sp, #32]
 800db9c:	9b02      	ldr	r3, [sp, #8]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	46b9      	mov	r9, r7
 800dba4:	9307      	str	r3, [sp, #28]
 800dba6:	4607      	mov	r7, r0
 800dba8:	9b04      	ldr	r3, [sp, #16]
 800dbaa:	4621      	mov	r1, r4
 800dbac:	3b01      	subs	r3, #1
 800dbae:	4628      	mov	r0, r5
 800dbb0:	9302      	str	r3, [sp, #8]
 800dbb2:	f7ff faef 	bl	800d194 <quorem>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	3330      	adds	r3, #48	; 0x30
 800dbba:	9005      	str	r0, [sp, #20]
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc2:	f000 fdab 	bl	800e71c <__mcmp>
 800dbc6:	463a      	mov	r2, r7
 800dbc8:	4682      	mov	sl, r0
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 fdc1 	bl	800e754 <__mdiff>
 800dbd2:	68c2      	ldr	r2, [r0, #12]
 800dbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd6:	4680      	mov	r8, r0
 800dbd8:	bb0a      	cbnz	r2, 800dc1e <_dtoa_r+0x976>
 800dbda:	4601      	mov	r1, r0
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f000 fd9d 	bl	800e71c <__mcmp>
 800dbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	4641      	mov	r1, r8
 800dbe8:	4630      	mov	r0, r6
 800dbea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dbee:	f000 fb59 	bl	800e2a4 <_Bfree>
 800dbf2:	9b06      	ldr	r3, [sp, #24]
 800dbf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbf6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dbfa:	ea43 0102 	orr.w	r1, r3, r2
 800dbfe:	9b07      	ldr	r3, [sp, #28]
 800dc00:	4319      	orrs	r1, r3
 800dc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc04:	d10d      	bne.n	800dc22 <_dtoa_r+0x97a>
 800dc06:	2b39      	cmp	r3, #57	; 0x39
 800dc08:	d029      	beq.n	800dc5e <_dtoa_r+0x9b6>
 800dc0a:	f1ba 0f00 	cmp.w	sl, #0
 800dc0e:	dd01      	ble.n	800dc14 <_dtoa_r+0x96c>
 800dc10:	9b05      	ldr	r3, [sp, #20]
 800dc12:	3331      	adds	r3, #49	; 0x31
 800dc14:	9a02      	ldr	r2, [sp, #8]
 800dc16:	7013      	strb	r3, [r2, #0]
 800dc18:	e775      	b.n	800db06 <_dtoa_r+0x85e>
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	e7b8      	b.n	800db90 <_dtoa_r+0x8e8>
 800dc1e:	2201      	movs	r2, #1
 800dc20:	e7e1      	b.n	800dbe6 <_dtoa_r+0x93e>
 800dc22:	f1ba 0f00 	cmp.w	sl, #0
 800dc26:	db06      	blt.n	800dc36 <_dtoa_r+0x98e>
 800dc28:	9906      	ldr	r1, [sp, #24]
 800dc2a:	ea41 0a0a 	orr.w	sl, r1, sl
 800dc2e:	9907      	ldr	r1, [sp, #28]
 800dc30:	ea5a 0a01 	orrs.w	sl, sl, r1
 800dc34:	d120      	bne.n	800dc78 <_dtoa_r+0x9d0>
 800dc36:	2a00      	cmp	r2, #0
 800dc38:	ddec      	ble.n	800dc14 <_dtoa_r+0x96c>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	4630      	mov	r0, r6
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	f000 fcff 	bl	800e644 <__lshift>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4605      	mov	r5, r0
 800dc4a:	f000 fd67 	bl	800e71c <__mcmp>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	9b04      	ldr	r3, [sp, #16]
 800dc52:	dc02      	bgt.n	800dc5a <_dtoa_r+0x9b2>
 800dc54:	d1de      	bne.n	800dc14 <_dtoa_r+0x96c>
 800dc56:	07da      	lsls	r2, r3, #31
 800dc58:	d5dc      	bpl.n	800dc14 <_dtoa_r+0x96c>
 800dc5a:	2b39      	cmp	r3, #57	; 0x39
 800dc5c:	d1d8      	bne.n	800dc10 <_dtoa_r+0x968>
 800dc5e:	9a02      	ldr	r2, [sp, #8]
 800dc60:	2339      	movs	r3, #57	; 0x39
 800dc62:	7013      	strb	r3, [r2, #0]
 800dc64:	4643      	mov	r3, r8
 800dc66:	4698      	mov	r8, r3
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dc6e:	2a39      	cmp	r2, #57	; 0x39
 800dc70:	d051      	beq.n	800dd16 <_dtoa_r+0xa6e>
 800dc72:	3201      	adds	r2, #1
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	e746      	b.n	800db06 <_dtoa_r+0x85e>
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	dd03      	ble.n	800dc84 <_dtoa_r+0x9dc>
 800dc7c:	2b39      	cmp	r3, #57	; 0x39
 800dc7e:	d0ee      	beq.n	800dc5e <_dtoa_r+0x9b6>
 800dc80:	3301      	adds	r3, #1
 800dc82:	e7c7      	b.n	800dc14 <_dtoa_r+0x96c>
 800dc84:	9a04      	ldr	r2, [sp, #16]
 800dc86:	9908      	ldr	r1, [sp, #32]
 800dc88:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc8c:	428a      	cmp	r2, r1
 800dc8e:	d02b      	beq.n	800dce8 <_dtoa_r+0xa40>
 800dc90:	4629      	mov	r1, r5
 800dc92:	2300      	movs	r3, #0
 800dc94:	220a      	movs	r2, #10
 800dc96:	4630      	mov	r0, r6
 800dc98:	f000 fb26 	bl	800e2e8 <__multadd>
 800dc9c:	45b9      	cmp	r9, r7
 800dc9e:	4605      	mov	r5, r0
 800dca0:	f04f 0300 	mov.w	r3, #0
 800dca4:	f04f 020a 	mov.w	r2, #10
 800dca8:	4649      	mov	r1, r9
 800dcaa:	4630      	mov	r0, r6
 800dcac:	d107      	bne.n	800dcbe <_dtoa_r+0xa16>
 800dcae:	f000 fb1b 	bl	800e2e8 <__multadd>
 800dcb2:	4681      	mov	r9, r0
 800dcb4:	4607      	mov	r7, r0
 800dcb6:	9b04      	ldr	r3, [sp, #16]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	9304      	str	r3, [sp, #16]
 800dcbc:	e774      	b.n	800dba8 <_dtoa_r+0x900>
 800dcbe:	f000 fb13 	bl	800e2e8 <__multadd>
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	4681      	mov	r9, r0
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	220a      	movs	r2, #10
 800dcca:	4630      	mov	r0, r6
 800dccc:	f000 fb0c 	bl	800e2e8 <__multadd>
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	e7f0      	b.n	800dcb6 <_dtoa_r+0xa0e>
 800dcd4:	f1ba 0f00 	cmp.w	sl, #0
 800dcd8:	9a01      	ldr	r2, [sp, #4]
 800dcda:	bfcc      	ite	gt
 800dcdc:	46d0      	movgt	r8, sl
 800dcde:	f04f 0801 	movle.w	r8, #1
 800dce2:	4490      	add	r8, r2
 800dce4:	f04f 0900 	mov.w	r9, #0
 800dce8:	4629      	mov	r1, r5
 800dcea:	2201      	movs	r2, #1
 800dcec:	4630      	mov	r0, r6
 800dcee:	9302      	str	r3, [sp, #8]
 800dcf0:	f000 fca8 	bl	800e644 <__lshift>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	f000 fd10 	bl	800e71c <__mcmp>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	dcb1      	bgt.n	800dc64 <_dtoa_r+0x9bc>
 800dd00:	d102      	bne.n	800dd08 <_dtoa_r+0xa60>
 800dd02:	9b02      	ldr	r3, [sp, #8]
 800dd04:	07db      	lsls	r3, r3, #31
 800dd06:	d4ad      	bmi.n	800dc64 <_dtoa_r+0x9bc>
 800dd08:	4643      	mov	r3, r8
 800dd0a:	4698      	mov	r8, r3
 800dd0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd10:	2a30      	cmp	r2, #48	; 0x30
 800dd12:	d0fa      	beq.n	800dd0a <_dtoa_r+0xa62>
 800dd14:	e6f7      	b.n	800db06 <_dtoa_r+0x85e>
 800dd16:	9a01      	ldr	r2, [sp, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d1a4      	bne.n	800dc66 <_dtoa_r+0x9be>
 800dd1c:	f10b 0b01 	add.w	fp, fp, #1
 800dd20:	2331      	movs	r3, #49	; 0x31
 800dd22:	e778      	b.n	800dc16 <_dtoa_r+0x96e>
 800dd24:	4b14      	ldr	r3, [pc, #80]	; (800dd78 <_dtoa_r+0xad0>)
 800dd26:	f7ff bb2a 	b.w	800d37e <_dtoa_r+0xd6>
 800dd2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f47f ab05 	bne.w	800d33c <_dtoa_r+0x94>
 800dd32:	4b12      	ldr	r3, [pc, #72]	; (800dd7c <_dtoa_r+0xad4>)
 800dd34:	f7ff bb23 	b.w	800d37e <_dtoa_r+0xd6>
 800dd38:	f1ba 0f00 	cmp.w	sl, #0
 800dd3c:	dc03      	bgt.n	800dd46 <_dtoa_r+0xa9e>
 800dd3e:	9b06      	ldr	r3, [sp, #24]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	f73f aec8 	bgt.w	800dad6 <_dtoa_r+0x82e>
 800dd46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	f7ff fa21 	bl	800d194 <quorem>
 800dd52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dd56:	f808 3b01 	strb.w	r3, [r8], #1
 800dd5a:	9a01      	ldr	r2, [sp, #4]
 800dd5c:	eba8 0202 	sub.w	r2, r8, r2
 800dd60:	4592      	cmp	sl, r2
 800dd62:	ddb7      	ble.n	800dcd4 <_dtoa_r+0xa2c>
 800dd64:	4629      	mov	r1, r5
 800dd66:	2300      	movs	r3, #0
 800dd68:	220a      	movs	r2, #10
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f000 fabc 	bl	800e2e8 <__multadd>
 800dd70:	4605      	mov	r5, r0
 800dd72:	e7ea      	b.n	800dd4a <_dtoa_r+0xaa2>
 800dd74:	08090410 	.word	0x08090410
 800dd78:	080902dc 	.word	0x080902dc
 800dd7c:	080903ab 	.word	0x080903ab

0800dd80 <_free_r>:
 800dd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd82:	2900      	cmp	r1, #0
 800dd84:	d044      	beq.n	800de10 <_free_r+0x90>
 800dd86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd8a:	9001      	str	r0, [sp, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f1a1 0404 	sub.w	r4, r1, #4
 800dd92:	bfb8      	it	lt
 800dd94:	18e4      	addlt	r4, r4, r3
 800dd96:	f7ff f841 	bl	800ce1c <__malloc_lock>
 800dd9a:	4a1e      	ldr	r2, [pc, #120]	; (800de14 <_free_r+0x94>)
 800dd9c:	9801      	ldr	r0, [sp, #4]
 800dd9e:	6813      	ldr	r3, [r2, #0]
 800dda0:	b933      	cbnz	r3, 800ddb0 <_free_r+0x30>
 800dda2:	6063      	str	r3, [r4, #4]
 800dda4:	6014      	str	r4, [r2, #0]
 800dda6:	b003      	add	sp, #12
 800dda8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddac:	f7ff b83c 	b.w	800ce28 <__malloc_unlock>
 800ddb0:	42a3      	cmp	r3, r4
 800ddb2:	d908      	bls.n	800ddc6 <_free_r+0x46>
 800ddb4:	6825      	ldr	r5, [r4, #0]
 800ddb6:	1961      	adds	r1, r4, r5
 800ddb8:	428b      	cmp	r3, r1
 800ddba:	bf01      	itttt	eq
 800ddbc:	6819      	ldreq	r1, [r3, #0]
 800ddbe:	685b      	ldreq	r3, [r3, #4]
 800ddc0:	1949      	addeq	r1, r1, r5
 800ddc2:	6021      	streq	r1, [r4, #0]
 800ddc4:	e7ed      	b.n	800dda2 <_free_r+0x22>
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	b10b      	cbz	r3, 800ddd0 <_free_r+0x50>
 800ddcc:	42a3      	cmp	r3, r4
 800ddce:	d9fa      	bls.n	800ddc6 <_free_r+0x46>
 800ddd0:	6811      	ldr	r1, [r2, #0]
 800ddd2:	1855      	adds	r5, r2, r1
 800ddd4:	42a5      	cmp	r5, r4
 800ddd6:	d10b      	bne.n	800ddf0 <_free_r+0x70>
 800ddd8:	6824      	ldr	r4, [r4, #0]
 800ddda:	4421      	add	r1, r4
 800dddc:	1854      	adds	r4, r2, r1
 800ddde:	42a3      	cmp	r3, r4
 800dde0:	6011      	str	r1, [r2, #0]
 800dde2:	d1e0      	bne.n	800dda6 <_free_r+0x26>
 800dde4:	681c      	ldr	r4, [r3, #0]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	6053      	str	r3, [r2, #4]
 800ddea:	440c      	add	r4, r1
 800ddec:	6014      	str	r4, [r2, #0]
 800ddee:	e7da      	b.n	800dda6 <_free_r+0x26>
 800ddf0:	d902      	bls.n	800ddf8 <_free_r+0x78>
 800ddf2:	230c      	movs	r3, #12
 800ddf4:	6003      	str	r3, [r0, #0]
 800ddf6:	e7d6      	b.n	800dda6 <_free_r+0x26>
 800ddf8:	6825      	ldr	r5, [r4, #0]
 800ddfa:	1961      	adds	r1, r4, r5
 800ddfc:	428b      	cmp	r3, r1
 800ddfe:	bf04      	itt	eq
 800de00:	6819      	ldreq	r1, [r3, #0]
 800de02:	685b      	ldreq	r3, [r3, #4]
 800de04:	6063      	str	r3, [r4, #4]
 800de06:	bf04      	itt	eq
 800de08:	1949      	addeq	r1, r1, r5
 800de0a:	6021      	streq	r1, [r4, #0]
 800de0c:	6054      	str	r4, [r2, #4]
 800de0e:	e7ca      	b.n	800dda6 <_free_r+0x26>
 800de10:	b003      	add	sp, #12
 800de12:	bd30      	pop	{r4, r5, pc}
 800de14:	20002fe4 	.word	0x20002fe4

0800de18 <__ssputs_r>:
 800de18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de1c:	688e      	ldr	r6, [r1, #8]
 800de1e:	461f      	mov	r7, r3
 800de20:	42be      	cmp	r6, r7
 800de22:	680b      	ldr	r3, [r1, #0]
 800de24:	4682      	mov	sl, r0
 800de26:	460c      	mov	r4, r1
 800de28:	4690      	mov	r8, r2
 800de2a:	d82c      	bhi.n	800de86 <__ssputs_r+0x6e>
 800de2c:	898a      	ldrh	r2, [r1, #12]
 800de2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de32:	d026      	beq.n	800de82 <__ssputs_r+0x6a>
 800de34:	6965      	ldr	r5, [r4, #20]
 800de36:	6909      	ldr	r1, [r1, #16]
 800de38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de3c:	eba3 0901 	sub.w	r9, r3, r1
 800de40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de44:	1c7b      	adds	r3, r7, #1
 800de46:	444b      	add	r3, r9
 800de48:	106d      	asrs	r5, r5, #1
 800de4a:	429d      	cmp	r5, r3
 800de4c:	bf38      	it	cc
 800de4e:	461d      	movcc	r5, r3
 800de50:	0553      	lsls	r3, r2, #21
 800de52:	d527      	bpl.n	800dea4 <__ssputs_r+0x8c>
 800de54:	4629      	mov	r1, r5
 800de56:	f7fe fdd1 	bl	800c9fc <_malloc_r>
 800de5a:	4606      	mov	r6, r0
 800de5c:	b360      	cbz	r0, 800deb8 <__ssputs_r+0xa0>
 800de5e:	6921      	ldr	r1, [r4, #16]
 800de60:	464a      	mov	r2, r9
 800de62:	f7ff f96b 	bl	800d13c <memcpy>
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	6126      	str	r6, [r4, #16]
 800de74:	6165      	str	r5, [r4, #20]
 800de76:	444e      	add	r6, r9
 800de78:	eba5 0509 	sub.w	r5, r5, r9
 800de7c:	6026      	str	r6, [r4, #0]
 800de7e:	60a5      	str	r5, [r4, #8]
 800de80:	463e      	mov	r6, r7
 800de82:	42be      	cmp	r6, r7
 800de84:	d900      	bls.n	800de88 <__ssputs_r+0x70>
 800de86:	463e      	mov	r6, r7
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	4632      	mov	r2, r6
 800de8c:	4641      	mov	r1, r8
 800de8e:	f000 fdca 	bl	800ea26 <memmove>
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	1b9b      	subs	r3, r3, r6
 800de96:	60a3      	str	r3, [r4, #8]
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	4433      	add	r3, r6
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	2000      	movs	r0, #0
 800dea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea4:	462a      	mov	r2, r5
 800dea6:	f000 fd8f 	bl	800e9c8 <_realloc_r>
 800deaa:	4606      	mov	r6, r0
 800deac:	2800      	cmp	r0, #0
 800deae:	d1e0      	bne.n	800de72 <__ssputs_r+0x5a>
 800deb0:	6921      	ldr	r1, [r4, #16]
 800deb2:	4650      	mov	r0, sl
 800deb4:	f7ff ff64 	bl	800dd80 <_free_r>
 800deb8:	230c      	movs	r3, #12
 800deba:	f8ca 3000 	str.w	r3, [sl]
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800deca:	e7e9      	b.n	800dea0 <__ssputs_r+0x88>

0800decc <_svfiprintf_r>:
 800decc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	4698      	mov	r8, r3
 800ded2:	898b      	ldrh	r3, [r1, #12]
 800ded4:	061b      	lsls	r3, r3, #24
 800ded6:	b09d      	sub	sp, #116	; 0x74
 800ded8:	4607      	mov	r7, r0
 800deda:	460d      	mov	r5, r1
 800dedc:	4614      	mov	r4, r2
 800dede:	d50e      	bpl.n	800defe <_svfiprintf_r+0x32>
 800dee0:	690b      	ldr	r3, [r1, #16]
 800dee2:	b963      	cbnz	r3, 800defe <_svfiprintf_r+0x32>
 800dee4:	2140      	movs	r1, #64	; 0x40
 800dee6:	f7fe fd89 	bl	800c9fc <_malloc_r>
 800deea:	6028      	str	r0, [r5, #0]
 800deec:	6128      	str	r0, [r5, #16]
 800deee:	b920      	cbnz	r0, 800defa <_svfiprintf_r+0x2e>
 800def0:	230c      	movs	r3, #12
 800def2:	603b      	str	r3, [r7, #0]
 800def4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800def8:	e0d0      	b.n	800e09c <_svfiprintf_r+0x1d0>
 800defa:	2340      	movs	r3, #64	; 0x40
 800defc:	616b      	str	r3, [r5, #20]
 800defe:	2300      	movs	r3, #0
 800df00:	9309      	str	r3, [sp, #36]	; 0x24
 800df02:	2320      	movs	r3, #32
 800df04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df08:	f8cd 800c 	str.w	r8, [sp, #12]
 800df0c:	2330      	movs	r3, #48	; 0x30
 800df0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e0b4 <_svfiprintf_r+0x1e8>
 800df12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df16:	f04f 0901 	mov.w	r9, #1
 800df1a:	4623      	mov	r3, r4
 800df1c:	469a      	mov	sl, r3
 800df1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df22:	b10a      	cbz	r2, 800df28 <_svfiprintf_r+0x5c>
 800df24:	2a25      	cmp	r2, #37	; 0x25
 800df26:	d1f9      	bne.n	800df1c <_svfiprintf_r+0x50>
 800df28:	ebba 0b04 	subs.w	fp, sl, r4
 800df2c:	d00b      	beq.n	800df46 <_svfiprintf_r+0x7a>
 800df2e:	465b      	mov	r3, fp
 800df30:	4622      	mov	r2, r4
 800df32:	4629      	mov	r1, r5
 800df34:	4638      	mov	r0, r7
 800df36:	f7ff ff6f 	bl	800de18 <__ssputs_r>
 800df3a:	3001      	adds	r0, #1
 800df3c:	f000 80a9 	beq.w	800e092 <_svfiprintf_r+0x1c6>
 800df40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df42:	445a      	add	r2, fp
 800df44:	9209      	str	r2, [sp, #36]	; 0x24
 800df46:	f89a 3000 	ldrb.w	r3, [sl]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 80a1 	beq.w	800e092 <_svfiprintf_r+0x1c6>
 800df50:	2300      	movs	r3, #0
 800df52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df5a:	f10a 0a01 	add.w	sl, sl, #1
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	9307      	str	r3, [sp, #28]
 800df62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df66:	931a      	str	r3, [sp, #104]	; 0x68
 800df68:	4654      	mov	r4, sl
 800df6a:	2205      	movs	r2, #5
 800df6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df70:	4850      	ldr	r0, [pc, #320]	; (800e0b4 <_svfiprintf_r+0x1e8>)
 800df72:	f7f2 f965 	bl	8000240 <memchr>
 800df76:	9a04      	ldr	r2, [sp, #16]
 800df78:	b9d8      	cbnz	r0, 800dfb2 <_svfiprintf_r+0xe6>
 800df7a:	06d0      	lsls	r0, r2, #27
 800df7c:	bf44      	itt	mi
 800df7e:	2320      	movmi	r3, #32
 800df80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df84:	0711      	lsls	r1, r2, #28
 800df86:	bf44      	itt	mi
 800df88:	232b      	movmi	r3, #43	; 0x2b
 800df8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df8e:	f89a 3000 	ldrb.w	r3, [sl]
 800df92:	2b2a      	cmp	r3, #42	; 0x2a
 800df94:	d015      	beq.n	800dfc2 <_svfiprintf_r+0xf6>
 800df96:	9a07      	ldr	r2, [sp, #28]
 800df98:	4654      	mov	r4, sl
 800df9a:	2000      	movs	r0, #0
 800df9c:	f04f 0c0a 	mov.w	ip, #10
 800dfa0:	4621      	mov	r1, r4
 800dfa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfa6:	3b30      	subs	r3, #48	; 0x30
 800dfa8:	2b09      	cmp	r3, #9
 800dfaa:	d94d      	bls.n	800e048 <_svfiprintf_r+0x17c>
 800dfac:	b1b0      	cbz	r0, 800dfdc <_svfiprintf_r+0x110>
 800dfae:	9207      	str	r2, [sp, #28]
 800dfb0:	e014      	b.n	800dfdc <_svfiprintf_r+0x110>
 800dfb2:	eba0 0308 	sub.w	r3, r0, r8
 800dfb6:	fa09 f303 	lsl.w	r3, r9, r3
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	9304      	str	r3, [sp, #16]
 800dfbe:	46a2      	mov	sl, r4
 800dfc0:	e7d2      	b.n	800df68 <_svfiprintf_r+0x9c>
 800dfc2:	9b03      	ldr	r3, [sp, #12]
 800dfc4:	1d19      	adds	r1, r3, #4
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	9103      	str	r1, [sp, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	bfbb      	ittet	lt
 800dfce:	425b      	neglt	r3, r3
 800dfd0:	f042 0202 	orrlt.w	r2, r2, #2
 800dfd4:	9307      	strge	r3, [sp, #28]
 800dfd6:	9307      	strlt	r3, [sp, #28]
 800dfd8:	bfb8      	it	lt
 800dfda:	9204      	strlt	r2, [sp, #16]
 800dfdc:	7823      	ldrb	r3, [r4, #0]
 800dfde:	2b2e      	cmp	r3, #46	; 0x2e
 800dfe0:	d10c      	bne.n	800dffc <_svfiprintf_r+0x130>
 800dfe2:	7863      	ldrb	r3, [r4, #1]
 800dfe4:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe6:	d134      	bne.n	800e052 <_svfiprintf_r+0x186>
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	1d1a      	adds	r2, r3, #4
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	9203      	str	r2, [sp, #12]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	bfb8      	it	lt
 800dff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dff8:	3402      	adds	r4, #2
 800dffa:	9305      	str	r3, [sp, #20]
 800dffc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e0c4 <_svfiprintf_r+0x1f8>
 800e000:	7821      	ldrb	r1, [r4, #0]
 800e002:	2203      	movs	r2, #3
 800e004:	4650      	mov	r0, sl
 800e006:	f7f2 f91b 	bl	8000240 <memchr>
 800e00a:	b138      	cbz	r0, 800e01c <_svfiprintf_r+0x150>
 800e00c:	9b04      	ldr	r3, [sp, #16]
 800e00e:	eba0 000a 	sub.w	r0, r0, sl
 800e012:	2240      	movs	r2, #64	; 0x40
 800e014:	4082      	lsls	r2, r0
 800e016:	4313      	orrs	r3, r2
 800e018:	3401      	adds	r4, #1
 800e01a:	9304      	str	r3, [sp, #16]
 800e01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e020:	4825      	ldr	r0, [pc, #148]	; (800e0b8 <_svfiprintf_r+0x1ec>)
 800e022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e026:	2206      	movs	r2, #6
 800e028:	f7f2 f90a 	bl	8000240 <memchr>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d038      	beq.n	800e0a2 <_svfiprintf_r+0x1d6>
 800e030:	4b22      	ldr	r3, [pc, #136]	; (800e0bc <_svfiprintf_r+0x1f0>)
 800e032:	bb1b      	cbnz	r3, 800e07c <_svfiprintf_r+0x1b0>
 800e034:	9b03      	ldr	r3, [sp, #12]
 800e036:	3307      	adds	r3, #7
 800e038:	f023 0307 	bic.w	r3, r3, #7
 800e03c:	3308      	adds	r3, #8
 800e03e:	9303      	str	r3, [sp, #12]
 800e040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e042:	4433      	add	r3, r6
 800e044:	9309      	str	r3, [sp, #36]	; 0x24
 800e046:	e768      	b.n	800df1a <_svfiprintf_r+0x4e>
 800e048:	fb0c 3202 	mla	r2, ip, r2, r3
 800e04c:	460c      	mov	r4, r1
 800e04e:	2001      	movs	r0, #1
 800e050:	e7a6      	b.n	800dfa0 <_svfiprintf_r+0xd4>
 800e052:	2300      	movs	r3, #0
 800e054:	3401      	adds	r4, #1
 800e056:	9305      	str	r3, [sp, #20]
 800e058:	4619      	mov	r1, r3
 800e05a:	f04f 0c0a 	mov.w	ip, #10
 800e05e:	4620      	mov	r0, r4
 800e060:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e064:	3a30      	subs	r2, #48	; 0x30
 800e066:	2a09      	cmp	r2, #9
 800e068:	d903      	bls.n	800e072 <_svfiprintf_r+0x1a6>
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d0c6      	beq.n	800dffc <_svfiprintf_r+0x130>
 800e06e:	9105      	str	r1, [sp, #20]
 800e070:	e7c4      	b.n	800dffc <_svfiprintf_r+0x130>
 800e072:	fb0c 2101 	mla	r1, ip, r1, r2
 800e076:	4604      	mov	r4, r0
 800e078:	2301      	movs	r3, #1
 800e07a:	e7f0      	b.n	800e05e <_svfiprintf_r+0x192>
 800e07c:	ab03      	add	r3, sp, #12
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	462a      	mov	r2, r5
 800e082:	4b0f      	ldr	r3, [pc, #60]	; (800e0c0 <_svfiprintf_r+0x1f4>)
 800e084:	a904      	add	r1, sp, #16
 800e086:	4638      	mov	r0, r7
 800e088:	f7fe fa6e 	bl	800c568 <_printf_float>
 800e08c:	1c42      	adds	r2, r0, #1
 800e08e:	4606      	mov	r6, r0
 800e090:	d1d6      	bne.n	800e040 <_svfiprintf_r+0x174>
 800e092:	89ab      	ldrh	r3, [r5, #12]
 800e094:	065b      	lsls	r3, r3, #25
 800e096:	f53f af2d 	bmi.w	800def4 <_svfiprintf_r+0x28>
 800e09a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e09c:	b01d      	add	sp, #116	; 0x74
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	ab03      	add	r3, sp, #12
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <_svfiprintf_r+0x1f4>)
 800e0aa:	a904      	add	r1, sp, #16
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	f7fe fd93 	bl	800cbd8 <_printf_i>
 800e0b2:	e7eb      	b.n	800e08c <_svfiprintf_r+0x1c0>
 800e0b4:	08090421 	.word	0x08090421
 800e0b8:	0809042b 	.word	0x0809042b
 800e0bc:	0800c569 	.word	0x0800c569
 800e0c0:	0800de19 	.word	0x0800de19
 800e0c4:	08090427 	.word	0x08090427

0800e0c8 <__sflush_r>:
 800e0c8:	898a      	ldrh	r2, [r1, #12]
 800e0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	0710      	lsls	r0, r2, #28
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	d458      	bmi.n	800e188 <__sflush_r+0xc0>
 800e0d6:	684b      	ldr	r3, [r1, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	dc05      	bgt.n	800e0e8 <__sflush_r+0x20>
 800e0dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	dc02      	bgt.n	800e0e8 <__sflush_r+0x20>
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0ea:	2e00      	cmp	r6, #0
 800e0ec:	d0f9      	beq.n	800e0e2 <__sflush_r+0x1a>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0f4:	682f      	ldr	r7, [r5, #0]
 800e0f6:	6a21      	ldr	r1, [r4, #32]
 800e0f8:	602b      	str	r3, [r5, #0]
 800e0fa:	d032      	beq.n	800e162 <__sflush_r+0x9a>
 800e0fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0fe:	89a3      	ldrh	r3, [r4, #12]
 800e100:	075a      	lsls	r2, r3, #29
 800e102:	d505      	bpl.n	800e110 <__sflush_r+0x48>
 800e104:	6863      	ldr	r3, [r4, #4]
 800e106:	1ac0      	subs	r0, r0, r3
 800e108:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e10a:	b10b      	cbz	r3, 800e110 <__sflush_r+0x48>
 800e10c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e10e:	1ac0      	subs	r0, r0, r3
 800e110:	2300      	movs	r3, #0
 800e112:	4602      	mov	r2, r0
 800e114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e116:	6a21      	ldr	r1, [r4, #32]
 800e118:	4628      	mov	r0, r5
 800e11a:	47b0      	blx	r6
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	89a3      	ldrh	r3, [r4, #12]
 800e120:	d106      	bne.n	800e130 <__sflush_r+0x68>
 800e122:	6829      	ldr	r1, [r5, #0]
 800e124:	291d      	cmp	r1, #29
 800e126:	d82b      	bhi.n	800e180 <__sflush_r+0xb8>
 800e128:	4a29      	ldr	r2, [pc, #164]	; (800e1d0 <__sflush_r+0x108>)
 800e12a:	410a      	asrs	r2, r1
 800e12c:	07d6      	lsls	r6, r2, #31
 800e12e:	d427      	bmi.n	800e180 <__sflush_r+0xb8>
 800e130:	2200      	movs	r2, #0
 800e132:	6062      	str	r2, [r4, #4]
 800e134:	04d9      	lsls	r1, r3, #19
 800e136:	6922      	ldr	r2, [r4, #16]
 800e138:	6022      	str	r2, [r4, #0]
 800e13a:	d504      	bpl.n	800e146 <__sflush_r+0x7e>
 800e13c:	1c42      	adds	r2, r0, #1
 800e13e:	d101      	bne.n	800e144 <__sflush_r+0x7c>
 800e140:	682b      	ldr	r3, [r5, #0]
 800e142:	b903      	cbnz	r3, 800e146 <__sflush_r+0x7e>
 800e144:	6560      	str	r0, [r4, #84]	; 0x54
 800e146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e148:	602f      	str	r7, [r5, #0]
 800e14a:	2900      	cmp	r1, #0
 800e14c:	d0c9      	beq.n	800e0e2 <__sflush_r+0x1a>
 800e14e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e152:	4299      	cmp	r1, r3
 800e154:	d002      	beq.n	800e15c <__sflush_r+0x94>
 800e156:	4628      	mov	r0, r5
 800e158:	f7ff fe12 	bl	800dd80 <_free_r>
 800e15c:	2000      	movs	r0, #0
 800e15e:	6360      	str	r0, [r4, #52]	; 0x34
 800e160:	e7c0      	b.n	800e0e4 <__sflush_r+0x1c>
 800e162:	2301      	movs	r3, #1
 800e164:	4628      	mov	r0, r5
 800e166:	47b0      	blx	r6
 800e168:	1c41      	adds	r1, r0, #1
 800e16a:	d1c8      	bne.n	800e0fe <__sflush_r+0x36>
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0c5      	beq.n	800e0fe <__sflush_r+0x36>
 800e172:	2b1d      	cmp	r3, #29
 800e174:	d001      	beq.n	800e17a <__sflush_r+0xb2>
 800e176:	2b16      	cmp	r3, #22
 800e178:	d101      	bne.n	800e17e <__sflush_r+0xb6>
 800e17a:	602f      	str	r7, [r5, #0]
 800e17c:	e7b1      	b.n	800e0e2 <__sflush_r+0x1a>
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e184:	81a3      	strh	r3, [r4, #12]
 800e186:	e7ad      	b.n	800e0e4 <__sflush_r+0x1c>
 800e188:	690f      	ldr	r7, [r1, #16]
 800e18a:	2f00      	cmp	r7, #0
 800e18c:	d0a9      	beq.n	800e0e2 <__sflush_r+0x1a>
 800e18e:	0793      	lsls	r3, r2, #30
 800e190:	680e      	ldr	r6, [r1, #0]
 800e192:	bf08      	it	eq
 800e194:	694b      	ldreq	r3, [r1, #20]
 800e196:	600f      	str	r7, [r1, #0]
 800e198:	bf18      	it	ne
 800e19a:	2300      	movne	r3, #0
 800e19c:	eba6 0807 	sub.w	r8, r6, r7
 800e1a0:	608b      	str	r3, [r1, #8]
 800e1a2:	f1b8 0f00 	cmp.w	r8, #0
 800e1a6:	dd9c      	ble.n	800e0e2 <__sflush_r+0x1a>
 800e1a8:	6a21      	ldr	r1, [r4, #32]
 800e1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1ac:	4643      	mov	r3, r8
 800e1ae:	463a      	mov	r2, r7
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	47b0      	blx	r6
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	dc06      	bgt.n	800e1c6 <__sflush_r+0xfe>
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1be:	81a3      	strh	r3, [r4, #12]
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1c4:	e78e      	b.n	800e0e4 <__sflush_r+0x1c>
 800e1c6:	4407      	add	r7, r0
 800e1c8:	eba8 0800 	sub.w	r8, r8, r0
 800e1cc:	e7e9      	b.n	800e1a2 <__sflush_r+0xda>
 800e1ce:	bf00      	nop
 800e1d0:	dfbffffe 	.word	0xdfbffffe

0800e1d4 <_fflush_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	690b      	ldr	r3, [r1, #16]
 800e1d8:	4605      	mov	r5, r0
 800e1da:	460c      	mov	r4, r1
 800e1dc:	b913      	cbnz	r3, 800e1e4 <_fflush_r+0x10>
 800e1de:	2500      	movs	r5, #0
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	b118      	cbz	r0, 800e1ee <_fflush_r+0x1a>
 800e1e6:	6a03      	ldr	r3, [r0, #32]
 800e1e8:	b90b      	cbnz	r3, 800e1ee <_fflush_r+0x1a>
 800e1ea:	f7fe ff29 	bl	800d040 <__sinit>
 800e1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d0f3      	beq.n	800e1de <_fflush_r+0xa>
 800e1f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1f8:	07d0      	lsls	r0, r2, #31
 800e1fa:	d404      	bmi.n	800e206 <_fflush_r+0x32>
 800e1fc:	0599      	lsls	r1, r3, #22
 800e1fe:	d402      	bmi.n	800e206 <_fflush_r+0x32>
 800e200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e202:	f7fe ff99 	bl	800d138 <__retarget_lock_acquire_recursive>
 800e206:	4628      	mov	r0, r5
 800e208:	4621      	mov	r1, r4
 800e20a:	f7ff ff5d 	bl	800e0c8 <__sflush_r>
 800e20e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e210:	07da      	lsls	r2, r3, #31
 800e212:	4605      	mov	r5, r0
 800e214:	d4e4      	bmi.n	800e1e0 <_fflush_r+0xc>
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	059b      	lsls	r3, r3, #22
 800e21a:	d4e1      	bmi.n	800e1e0 <_fflush_r+0xc>
 800e21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e21e:	f7fe ff8c 	bl	800d13a <__retarget_lock_release_recursive>
 800e222:	e7dd      	b.n	800e1e0 <_fflush_r+0xc>

0800e224 <_Balloc>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	69c6      	ldr	r6, [r0, #28]
 800e228:	4604      	mov	r4, r0
 800e22a:	460d      	mov	r5, r1
 800e22c:	b976      	cbnz	r6, 800e24c <_Balloc+0x28>
 800e22e:	2010      	movs	r0, #16
 800e230:	f7fe fbb4 	bl	800c99c <malloc>
 800e234:	4602      	mov	r2, r0
 800e236:	61e0      	str	r0, [r4, #28]
 800e238:	b920      	cbnz	r0, 800e244 <_Balloc+0x20>
 800e23a:	4b18      	ldr	r3, [pc, #96]	; (800e29c <_Balloc+0x78>)
 800e23c:	4818      	ldr	r0, [pc, #96]	; (800e2a0 <_Balloc+0x7c>)
 800e23e:	216b      	movs	r1, #107	; 0x6b
 800e240:	f7fe ff8a 	bl	800d158 <__assert_func>
 800e244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e248:	6006      	str	r6, [r0, #0]
 800e24a:	60c6      	str	r6, [r0, #12]
 800e24c:	69e6      	ldr	r6, [r4, #28]
 800e24e:	68f3      	ldr	r3, [r6, #12]
 800e250:	b183      	cbz	r3, 800e274 <_Balloc+0x50>
 800e252:	69e3      	ldr	r3, [r4, #28]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e25a:	b9b8      	cbnz	r0, 800e28c <_Balloc+0x68>
 800e25c:	2101      	movs	r1, #1
 800e25e:	fa01 f605 	lsl.w	r6, r1, r5
 800e262:	1d72      	adds	r2, r6, #5
 800e264:	0092      	lsls	r2, r2, #2
 800e266:	4620      	mov	r0, r4
 800e268:	f7fe f8d8 	bl	800c41c <_calloc_r>
 800e26c:	b160      	cbz	r0, 800e288 <_Balloc+0x64>
 800e26e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e272:	e00e      	b.n	800e292 <_Balloc+0x6e>
 800e274:	2221      	movs	r2, #33	; 0x21
 800e276:	2104      	movs	r1, #4
 800e278:	4620      	mov	r0, r4
 800e27a:	f7fe f8cf 	bl	800c41c <_calloc_r>
 800e27e:	69e3      	ldr	r3, [r4, #28]
 800e280:	60f0      	str	r0, [r6, #12]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1e4      	bne.n	800e252 <_Balloc+0x2e>
 800e288:	2000      	movs	r0, #0
 800e28a:	bd70      	pop	{r4, r5, r6, pc}
 800e28c:	6802      	ldr	r2, [r0, #0]
 800e28e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e292:	2300      	movs	r3, #0
 800e294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e298:	e7f7      	b.n	800e28a <_Balloc+0x66>
 800e29a:	bf00      	nop
 800e29c:	08090300 	.word	0x08090300
 800e2a0:	08090432 	.word	0x08090432

0800e2a4 <_Bfree>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	69c6      	ldr	r6, [r0, #28]
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	b976      	cbnz	r6, 800e2cc <_Bfree+0x28>
 800e2ae:	2010      	movs	r0, #16
 800e2b0:	f7fe fb74 	bl	800c99c <malloc>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	61e8      	str	r0, [r5, #28]
 800e2b8:	b920      	cbnz	r0, 800e2c4 <_Bfree+0x20>
 800e2ba:	4b09      	ldr	r3, [pc, #36]	; (800e2e0 <_Bfree+0x3c>)
 800e2bc:	4809      	ldr	r0, [pc, #36]	; (800e2e4 <_Bfree+0x40>)
 800e2be:	218f      	movs	r1, #143	; 0x8f
 800e2c0:	f7fe ff4a 	bl	800d158 <__assert_func>
 800e2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2c8:	6006      	str	r6, [r0, #0]
 800e2ca:	60c6      	str	r6, [r0, #12]
 800e2cc:	b13c      	cbz	r4, 800e2de <_Bfree+0x3a>
 800e2ce:	69eb      	ldr	r3, [r5, #28]
 800e2d0:	6862      	ldr	r2, [r4, #4]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2d8:	6021      	str	r1, [r4, #0]
 800e2da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	08090300 	.word	0x08090300
 800e2e4:	08090432 	.word	0x08090432

0800e2e8 <__multadd>:
 800e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	690d      	ldr	r5, [r1, #16]
 800e2ee:	4607      	mov	r7, r0
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	461e      	mov	r6, r3
 800e2f4:	f101 0c14 	add.w	ip, r1, #20
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e2fe:	b299      	uxth	r1, r3
 800e300:	fb02 6101 	mla	r1, r2, r1, r6
 800e304:	0c1e      	lsrs	r6, r3, #16
 800e306:	0c0b      	lsrs	r3, r1, #16
 800e308:	fb02 3306 	mla	r3, r2, r6, r3
 800e30c:	b289      	uxth	r1, r1
 800e30e:	3001      	adds	r0, #1
 800e310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e314:	4285      	cmp	r5, r0
 800e316:	f84c 1b04 	str.w	r1, [ip], #4
 800e31a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e31e:	dcec      	bgt.n	800e2fa <__multadd+0x12>
 800e320:	b30e      	cbz	r6, 800e366 <__multadd+0x7e>
 800e322:	68a3      	ldr	r3, [r4, #8]
 800e324:	42ab      	cmp	r3, r5
 800e326:	dc19      	bgt.n	800e35c <__multadd+0x74>
 800e328:	6861      	ldr	r1, [r4, #4]
 800e32a:	4638      	mov	r0, r7
 800e32c:	3101      	adds	r1, #1
 800e32e:	f7ff ff79 	bl	800e224 <_Balloc>
 800e332:	4680      	mov	r8, r0
 800e334:	b928      	cbnz	r0, 800e342 <__multadd+0x5a>
 800e336:	4602      	mov	r2, r0
 800e338:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <__multadd+0x84>)
 800e33a:	480d      	ldr	r0, [pc, #52]	; (800e370 <__multadd+0x88>)
 800e33c:	21ba      	movs	r1, #186	; 0xba
 800e33e:	f7fe ff0b 	bl	800d158 <__assert_func>
 800e342:	6922      	ldr	r2, [r4, #16]
 800e344:	3202      	adds	r2, #2
 800e346:	f104 010c 	add.w	r1, r4, #12
 800e34a:	0092      	lsls	r2, r2, #2
 800e34c:	300c      	adds	r0, #12
 800e34e:	f7fe fef5 	bl	800d13c <memcpy>
 800e352:	4621      	mov	r1, r4
 800e354:	4638      	mov	r0, r7
 800e356:	f7ff ffa5 	bl	800e2a4 <_Bfree>
 800e35a:	4644      	mov	r4, r8
 800e35c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e360:	3501      	adds	r5, #1
 800e362:	615e      	str	r6, [r3, #20]
 800e364:	6125      	str	r5, [r4, #16]
 800e366:	4620      	mov	r0, r4
 800e368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e36c:	08090410 	.word	0x08090410
 800e370:	08090432 	.word	0x08090432

0800e374 <__hi0bits>:
 800e374:	0c03      	lsrs	r3, r0, #16
 800e376:	041b      	lsls	r3, r3, #16
 800e378:	b9d3      	cbnz	r3, 800e3b0 <__hi0bits+0x3c>
 800e37a:	0400      	lsls	r0, r0, #16
 800e37c:	2310      	movs	r3, #16
 800e37e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e382:	bf04      	itt	eq
 800e384:	0200      	lsleq	r0, r0, #8
 800e386:	3308      	addeq	r3, #8
 800e388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e38c:	bf04      	itt	eq
 800e38e:	0100      	lsleq	r0, r0, #4
 800e390:	3304      	addeq	r3, #4
 800e392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e396:	bf04      	itt	eq
 800e398:	0080      	lsleq	r0, r0, #2
 800e39a:	3302      	addeq	r3, #2
 800e39c:	2800      	cmp	r0, #0
 800e39e:	db05      	blt.n	800e3ac <__hi0bits+0x38>
 800e3a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e3a4:	f103 0301 	add.w	r3, r3, #1
 800e3a8:	bf08      	it	eq
 800e3aa:	2320      	moveq	r3, #32
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	4770      	bx	lr
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e7e4      	b.n	800e37e <__hi0bits+0xa>

0800e3b4 <__lo0bits>:
 800e3b4:	6803      	ldr	r3, [r0, #0]
 800e3b6:	f013 0207 	ands.w	r2, r3, #7
 800e3ba:	d00c      	beq.n	800e3d6 <__lo0bits+0x22>
 800e3bc:	07d9      	lsls	r1, r3, #31
 800e3be:	d422      	bmi.n	800e406 <__lo0bits+0x52>
 800e3c0:	079a      	lsls	r2, r3, #30
 800e3c2:	bf49      	itett	mi
 800e3c4:	085b      	lsrmi	r3, r3, #1
 800e3c6:	089b      	lsrpl	r3, r3, #2
 800e3c8:	6003      	strmi	r3, [r0, #0]
 800e3ca:	2201      	movmi	r2, #1
 800e3cc:	bf5c      	itt	pl
 800e3ce:	6003      	strpl	r3, [r0, #0]
 800e3d0:	2202      	movpl	r2, #2
 800e3d2:	4610      	mov	r0, r2
 800e3d4:	4770      	bx	lr
 800e3d6:	b299      	uxth	r1, r3
 800e3d8:	b909      	cbnz	r1, 800e3de <__lo0bits+0x2a>
 800e3da:	0c1b      	lsrs	r3, r3, #16
 800e3dc:	2210      	movs	r2, #16
 800e3de:	b2d9      	uxtb	r1, r3
 800e3e0:	b909      	cbnz	r1, 800e3e6 <__lo0bits+0x32>
 800e3e2:	3208      	adds	r2, #8
 800e3e4:	0a1b      	lsrs	r3, r3, #8
 800e3e6:	0719      	lsls	r1, r3, #28
 800e3e8:	bf04      	itt	eq
 800e3ea:	091b      	lsreq	r3, r3, #4
 800e3ec:	3204      	addeq	r2, #4
 800e3ee:	0799      	lsls	r1, r3, #30
 800e3f0:	bf04      	itt	eq
 800e3f2:	089b      	lsreq	r3, r3, #2
 800e3f4:	3202      	addeq	r2, #2
 800e3f6:	07d9      	lsls	r1, r3, #31
 800e3f8:	d403      	bmi.n	800e402 <__lo0bits+0x4e>
 800e3fa:	085b      	lsrs	r3, r3, #1
 800e3fc:	f102 0201 	add.w	r2, r2, #1
 800e400:	d003      	beq.n	800e40a <__lo0bits+0x56>
 800e402:	6003      	str	r3, [r0, #0]
 800e404:	e7e5      	b.n	800e3d2 <__lo0bits+0x1e>
 800e406:	2200      	movs	r2, #0
 800e408:	e7e3      	b.n	800e3d2 <__lo0bits+0x1e>
 800e40a:	2220      	movs	r2, #32
 800e40c:	e7e1      	b.n	800e3d2 <__lo0bits+0x1e>
	...

0800e410 <__i2b>:
 800e410:	b510      	push	{r4, lr}
 800e412:	460c      	mov	r4, r1
 800e414:	2101      	movs	r1, #1
 800e416:	f7ff ff05 	bl	800e224 <_Balloc>
 800e41a:	4602      	mov	r2, r0
 800e41c:	b928      	cbnz	r0, 800e42a <__i2b+0x1a>
 800e41e:	4b05      	ldr	r3, [pc, #20]	; (800e434 <__i2b+0x24>)
 800e420:	4805      	ldr	r0, [pc, #20]	; (800e438 <__i2b+0x28>)
 800e422:	f240 1145 	movw	r1, #325	; 0x145
 800e426:	f7fe fe97 	bl	800d158 <__assert_func>
 800e42a:	2301      	movs	r3, #1
 800e42c:	6144      	str	r4, [r0, #20]
 800e42e:	6103      	str	r3, [r0, #16]
 800e430:	bd10      	pop	{r4, pc}
 800e432:	bf00      	nop
 800e434:	08090410 	.word	0x08090410
 800e438:	08090432 	.word	0x08090432

0800e43c <__multiply>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	4691      	mov	r9, r2
 800e442:	690a      	ldr	r2, [r1, #16]
 800e444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e448:	429a      	cmp	r2, r3
 800e44a:	bfb8      	it	lt
 800e44c:	460b      	movlt	r3, r1
 800e44e:	460c      	mov	r4, r1
 800e450:	bfbc      	itt	lt
 800e452:	464c      	movlt	r4, r9
 800e454:	4699      	movlt	r9, r3
 800e456:	6927      	ldr	r7, [r4, #16]
 800e458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e45c:	68a3      	ldr	r3, [r4, #8]
 800e45e:	6861      	ldr	r1, [r4, #4]
 800e460:	eb07 060a 	add.w	r6, r7, sl
 800e464:	42b3      	cmp	r3, r6
 800e466:	b085      	sub	sp, #20
 800e468:	bfb8      	it	lt
 800e46a:	3101      	addlt	r1, #1
 800e46c:	f7ff feda 	bl	800e224 <_Balloc>
 800e470:	b930      	cbnz	r0, 800e480 <__multiply+0x44>
 800e472:	4602      	mov	r2, r0
 800e474:	4b44      	ldr	r3, [pc, #272]	; (800e588 <__multiply+0x14c>)
 800e476:	4845      	ldr	r0, [pc, #276]	; (800e58c <__multiply+0x150>)
 800e478:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e47c:	f7fe fe6c 	bl	800d158 <__assert_func>
 800e480:	f100 0514 	add.w	r5, r0, #20
 800e484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e488:	462b      	mov	r3, r5
 800e48a:	2200      	movs	r2, #0
 800e48c:	4543      	cmp	r3, r8
 800e48e:	d321      	bcc.n	800e4d4 <__multiply+0x98>
 800e490:	f104 0314 	add.w	r3, r4, #20
 800e494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e498:	f109 0314 	add.w	r3, r9, #20
 800e49c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e4a0:	9202      	str	r2, [sp, #8]
 800e4a2:	1b3a      	subs	r2, r7, r4
 800e4a4:	3a15      	subs	r2, #21
 800e4a6:	f022 0203 	bic.w	r2, r2, #3
 800e4aa:	3204      	adds	r2, #4
 800e4ac:	f104 0115 	add.w	r1, r4, #21
 800e4b0:	428f      	cmp	r7, r1
 800e4b2:	bf38      	it	cc
 800e4b4:	2204      	movcc	r2, #4
 800e4b6:	9201      	str	r2, [sp, #4]
 800e4b8:	9a02      	ldr	r2, [sp, #8]
 800e4ba:	9303      	str	r3, [sp, #12]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d80c      	bhi.n	800e4da <__multiply+0x9e>
 800e4c0:	2e00      	cmp	r6, #0
 800e4c2:	dd03      	ble.n	800e4cc <__multiply+0x90>
 800e4c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d05b      	beq.n	800e584 <__multiply+0x148>
 800e4cc:	6106      	str	r6, [r0, #16]
 800e4ce:	b005      	add	sp, #20
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	f843 2b04 	str.w	r2, [r3], #4
 800e4d8:	e7d8      	b.n	800e48c <__multiply+0x50>
 800e4da:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4de:	f1ba 0f00 	cmp.w	sl, #0
 800e4e2:	d024      	beq.n	800e52e <__multiply+0xf2>
 800e4e4:	f104 0e14 	add.w	lr, r4, #20
 800e4e8:	46a9      	mov	r9, r5
 800e4ea:	f04f 0c00 	mov.w	ip, #0
 800e4ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4f2:	f8d9 1000 	ldr.w	r1, [r9]
 800e4f6:	fa1f fb82 	uxth.w	fp, r2
 800e4fa:	b289      	uxth	r1, r1
 800e4fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e504:	f8d9 2000 	ldr.w	r2, [r9]
 800e508:	4461      	add	r1, ip
 800e50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e50e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e516:	b289      	uxth	r1, r1
 800e518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e51c:	4577      	cmp	r7, lr
 800e51e:	f849 1b04 	str.w	r1, [r9], #4
 800e522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e526:	d8e2      	bhi.n	800e4ee <__multiply+0xb2>
 800e528:	9a01      	ldr	r2, [sp, #4]
 800e52a:	f845 c002 	str.w	ip, [r5, r2]
 800e52e:	9a03      	ldr	r2, [sp, #12]
 800e530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e534:	3304      	adds	r3, #4
 800e536:	f1b9 0f00 	cmp.w	r9, #0
 800e53a:	d021      	beq.n	800e580 <__multiply+0x144>
 800e53c:	6829      	ldr	r1, [r5, #0]
 800e53e:	f104 0c14 	add.w	ip, r4, #20
 800e542:	46ae      	mov	lr, r5
 800e544:	f04f 0a00 	mov.w	sl, #0
 800e548:	f8bc b000 	ldrh.w	fp, [ip]
 800e54c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e550:	fb09 220b 	mla	r2, r9, fp, r2
 800e554:	4452      	add	r2, sl
 800e556:	b289      	uxth	r1, r1
 800e558:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e55c:	f84e 1b04 	str.w	r1, [lr], #4
 800e560:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e564:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e568:	f8be 1000 	ldrh.w	r1, [lr]
 800e56c:	fb09 110a 	mla	r1, r9, sl, r1
 800e570:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e574:	4567      	cmp	r7, ip
 800e576:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e57a:	d8e5      	bhi.n	800e548 <__multiply+0x10c>
 800e57c:	9a01      	ldr	r2, [sp, #4]
 800e57e:	50a9      	str	r1, [r5, r2]
 800e580:	3504      	adds	r5, #4
 800e582:	e799      	b.n	800e4b8 <__multiply+0x7c>
 800e584:	3e01      	subs	r6, #1
 800e586:	e79b      	b.n	800e4c0 <__multiply+0x84>
 800e588:	08090410 	.word	0x08090410
 800e58c:	08090432 	.word	0x08090432

0800e590 <__pow5mult>:
 800e590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e594:	4615      	mov	r5, r2
 800e596:	f012 0203 	ands.w	r2, r2, #3
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	d007      	beq.n	800e5b0 <__pow5mult+0x20>
 800e5a0:	4c25      	ldr	r4, [pc, #148]	; (800e638 <__pow5mult+0xa8>)
 800e5a2:	3a01      	subs	r2, #1
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5aa:	f7ff fe9d 	bl	800e2e8 <__multadd>
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	10ad      	asrs	r5, r5, #2
 800e5b2:	d03d      	beq.n	800e630 <__pow5mult+0xa0>
 800e5b4:	69f4      	ldr	r4, [r6, #28]
 800e5b6:	b97c      	cbnz	r4, 800e5d8 <__pow5mult+0x48>
 800e5b8:	2010      	movs	r0, #16
 800e5ba:	f7fe f9ef 	bl	800c99c <malloc>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	61f0      	str	r0, [r6, #28]
 800e5c2:	b928      	cbnz	r0, 800e5d0 <__pow5mult+0x40>
 800e5c4:	4b1d      	ldr	r3, [pc, #116]	; (800e63c <__pow5mult+0xac>)
 800e5c6:	481e      	ldr	r0, [pc, #120]	; (800e640 <__pow5mult+0xb0>)
 800e5c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e5cc:	f7fe fdc4 	bl	800d158 <__assert_func>
 800e5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5d4:	6004      	str	r4, [r0, #0]
 800e5d6:	60c4      	str	r4, [r0, #12]
 800e5d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5e0:	b94c      	cbnz	r4, 800e5f6 <__pow5mult+0x66>
 800e5e2:	f240 2171 	movw	r1, #625	; 0x271
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f7ff ff12 	bl	800e410 <__i2b>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	6003      	str	r3, [r0, #0]
 800e5f6:	f04f 0900 	mov.w	r9, #0
 800e5fa:	07eb      	lsls	r3, r5, #31
 800e5fc:	d50a      	bpl.n	800e614 <__pow5mult+0x84>
 800e5fe:	4639      	mov	r1, r7
 800e600:	4622      	mov	r2, r4
 800e602:	4630      	mov	r0, r6
 800e604:	f7ff ff1a 	bl	800e43c <__multiply>
 800e608:	4639      	mov	r1, r7
 800e60a:	4680      	mov	r8, r0
 800e60c:	4630      	mov	r0, r6
 800e60e:	f7ff fe49 	bl	800e2a4 <_Bfree>
 800e612:	4647      	mov	r7, r8
 800e614:	106d      	asrs	r5, r5, #1
 800e616:	d00b      	beq.n	800e630 <__pow5mult+0xa0>
 800e618:	6820      	ldr	r0, [r4, #0]
 800e61a:	b938      	cbnz	r0, 800e62c <__pow5mult+0x9c>
 800e61c:	4622      	mov	r2, r4
 800e61e:	4621      	mov	r1, r4
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff ff0b 	bl	800e43c <__multiply>
 800e626:	6020      	str	r0, [r4, #0]
 800e628:	f8c0 9000 	str.w	r9, [r0]
 800e62c:	4604      	mov	r4, r0
 800e62e:	e7e4      	b.n	800e5fa <__pow5mult+0x6a>
 800e630:	4638      	mov	r0, r7
 800e632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e636:	bf00      	nop
 800e638:	08090580 	.word	0x08090580
 800e63c:	08090300 	.word	0x08090300
 800e640:	08090432 	.word	0x08090432

0800e644 <__lshift>:
 800e644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	460c      	mov	r4, r1
 800e64a:	6849      	ldr	r1, [r1, #4]
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	4607      	mov	r7, r0
 800e656:	4691      	mov	r9, r2
 800e658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e65c:	f108 0601 	add.w	r6, r8, #1
 800e660:	42b3      	cmp	r3, r6
 800e662:	db0b      	blt.n	800e67c <__lshift+0x38>
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff fddd 	bl	800e224 <_Balloc>
 800e66a:	4605      	mov	r5, r0
 800e66c:	b948      	cbnz	r0, 800e682 <__lshift+0x3e>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b28      	ldr	r3, [pc, #160]	; (800e714 <__lshift+0xd0>)
 800e672:	4829      	ldr	r0, [pc, #164]	; (800e718 <__lshift+0xd4>)
 800e674:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e678:	f7fe fd6e 	bl	800d158 <__assert_func>
 800e67c:	3101      	adds	r1, #1
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	e7ee      	b.n	800e660 <__lshift+0x1c>
 800e682:	2300      	movs	r3, #0
 800e684:	f100 0114 	add.w	r1, r0, #20
 800e688:	f100 0210 	add.w	r2, r0, #16
 800e68c:	4618      	mov	r0, r3
 800e68e:	4553      	cmp	r3, sl
 800e690:	db33      	blt.n	800e6fa <__lshift+0xb6>
 800e692:	6920      	ldr	r0, [r4, #16]
 800e694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e698:	f104 0314 	add.w	r3, r4, #20
 800e69c:	f019 091f 	ands.w	r9, r9, #31
 800e6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6a8:	d02b      	beq.n	800e702 <__lshift+0xbe>
 800e6aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e6ae:	468a      	mov	sl, r1
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	6818      	ldr	r0, [r3, #0]
 800e6b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e6b8:	4310      	orrs	r0, r2
 800e6ba:	f84a 0b04 	str.w	r0, [sl], #4
 800e6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c2:	459c      	cmp	ip, r3
 800e6c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e6c8:	d8f3      	bhi.n	800e6b2 <__lshift+0x6e>
 800e6ca:	ebac 0304 	sub.w	r3, ip, r4
 800e6ce:	3b15      	subs	r3, #21
 800e6d0:	f023 0303 	bic.w	r3, r3, #3
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	f104 0015 	add.w	r0, r4, #21
 800e6da:	4584      	cmp	ip, r0
 800e6dc:	bf38      	it	cc
 800e6de:	2304      	movcc	r3, #4
 800e6e0:	50ca      	str	r2, [r1, r3]
 800e6e2:	b10a      	cbz	r2, 800e6e8 <__lshift+0xa4>
 800e6e4:	f108 0602 	add.w	r6, r8, #2
 800e6e8:	3e01      	subs	r6, #1
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	612e      	str	r6, [r5, #16]
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	f7ff fdd8 	bl	800e2a4 <_Bfree>
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6fe:	3301      	adds	r3, #1
 800e700:	e7c5      	b.n	800e68e <__lshift+0x4a>
 800e702:	3904      	subs	r1, #4
 800e704:	f853 2b04 	ldr.w	r2, [r3], #4
 800e708:	f841 2f04 	str.w	r2, [r1, #4]!
 800e70c:	459c      	cmp	ip, r3
 800e70e:	d8f9      	bhi.n	800e704 <__lshift+0xc0>
 800e710:	e7ea      	b.n	800e6e8 <__lshift+0xa4>
 800e712:	bf00      	nop
 800e714:	08090410 	.word	0x08090410
 800e718:	08090432 	.word	0x08090432

0800e71c <__mcmp>:
 800e71c:	b530      	push	{r4, r5, lr}
 800e71e:	6902      	ldr	r2, [r0, #16]
 800e720:	690c      	ldr	r4, [r1, #16]
 800e722:	1b12      	subs	r2, r2, r4
 800e724:	d10e      	bne.n	800e744 <__mcmp+0x28>
 800e726:	f100 0314 	add.w	r3, r0, #20
 800e72a:	3114      	adds	r1, #20
 800e72c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e730:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e734:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e738:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e73c:	42a5      	cmp	r5, r4
 800e73e:	d003      	beq.n	800e748 <__mcmp+0x2c>
 800e740:	d305      	bcc.n	800e74e <__mcmp+0x32>
 800e742:	2201      	movs	r2, #1
 800e744:	4610      	mov	r0, r2
 800e746:	bd30      	pop	{r4, r5, pc}
 800e748:	4283      	cmp	r3, r0
 800e74a:	d3f3      	bcc.n	800e734 <__mcmp+0x18>
 800e74c:	e7fa      	b.n	800e744 <__mcmp+0x28>
 800e74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e752:	e7f7      	b.n	800e744 <__mcmp+0x28>

0800e754 <__mdiff>:
 800e754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	460c      	mov	r4, r1
 800e75a:	4606      	mov	r6, r0
 800e75c:	4611      	mov	r1, r2
 800e75e:	4620      	mov	r0, r4
 800e760:	4690      	mov	r8, r2
 800e762:	f7ff ffdb 	bl	800e71c <__mcmp>
 800e766:	1e05      	subs	r5, r0, #0
 800e768:	d110      	bne.n	800e78c <__mdiff+0x38>
 800e76a:	4629      	mov	r1, r5
 800e76c:	4630      	mov	r0, r6
 800e76e:	f7ff fd59 	bl	800e224 <_Balloc>
 800e772:	b930      	cbnz	r0, 800e782 <__mdiff+0x2e>
 800e774:	4b3a      	ldr	r3, [pc, #232]	; (800e860 <__mdiff+0x10c>)
 800e776:	4602      	mov	r2, r0
 800e778:	f240 2137 	movw	r1, #567	; 0x237
 800e77c:	4839      	ldr	r0, [pc, #228]	; (800e864 <__mdiff+0x110>)
 800e77e:	f7fe fceb 	bl	800d158 <__assert_func>
 800e782:	2301      	movs	r3, #1
 800e784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78c:	bfa4      	itt	ge
 800e78e:	4643      	movge	r3, r8
 800e790:	46a0      	movge	r8, r4
 800e792:	4630      	mov	r0, r6
 800e794:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e798:	bfa6      	itte	ge
 800e79a:	461c      	movge	r4, r3
 800e79c:	2500      	movge	r5, #0
 800e79e:	2501      	movlt	r5, #1
 800e7a0:	f7ff fd40 	bl	800e224 <_Balloc>
 800e7a4:	b920      	cbnz	r0, 800e7b0 <__mdiff+0x5c>
 800e7a6:	4b2e      	ldr	r3, [pc, #184]	; (800e860 <__mdiff+0x10c>)
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	f240 2145 	movw	r1, #581	; 0x245
 800e7ae:	e7e5      	b.n	800e77c <__mdiff+0x28>
 800e7b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e7b4:	6926      	ldr	r6, [r4, #16]
 800e7b6:	60c5      	str	r5, [r0, #12]
 800e7b8:	f104 0914 	add.w	r9, r4, #20
 800e7bc:	f108 0514 	add.w	r5, r8, #20
 800e7c0:	f100 0e14 	add.w	lr, r0, #20
 800e7c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e7c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e7cc:	f108 0210 	add.w	r2, r8, #16
 800e7d0:	46f2      	mov	sl, lr
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e7d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e7dc:	fa11 f88b 	uxtah	r8, r1, fp
 800e7e0:	b299      	uxth	r1, r3
 800e7e2:	0c1b      	lsrs	r3, r3, #16
 800e7e4:	eba8 0801 	sub.w	r8, r8, r1
 800e7e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e7ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e7f0:	fa1f f888 	uxth.w	r8, r8
 800e7f4:	1419      	asrs	r1, r3, #16
 800e7f6:	454e      	cmp	r6, r9
 800e7f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7fc:	f84a 3b04 	str.w	r3, [sl], #4
 800e800:	d8e8      	bhi.n	800e7d4 <__mdiff+0x80>
 800e802:	1b33      	subs	r3, r6, r4
 800e804:	3b15      	subs	r3, #21
 800e806:	f023 0303 	bic.w	r3, r3, #3
 800e80a:	3304      	adds	r3, #4
 800e80c:	3415      	adds	r4, #21
 800e80e:	42a6      	cmp	r6, r4
 800e810:	bf38      	it	cc
 800e812:	2304      	movcc	r3, #4
 800e814:	441d      	add	r5, r3
 800e816:	4473      	add	r3, lr
 800e818:	469e      	mov	lr, r3
 800e81a:	462e      	mov	r6, r5
 800e81c:	4566      	cmp	r6, ip
 800e81e:	d30e      	bcc.n	800e83e <__mdiff+0xea>
 800e820:	f10c 0203 	add.w	r2, ip, #3
 800e824:	1b52      	subs	r2, r2, r5
 800e826:	f022 0203 	bic.w	r2, r2, #3
 800e82a:	3d03      	subs	r5, #3
 800e82c:	45ac      	cmp	ip, r5
 800e82e:	bf38      	it	cc
 800e830:	2200      	movcc	r2, #0
 800e832:	4413      	add	r3, r2
 800e834:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e838:	b17a      	cbz	r2, 800e85a <__mdiff+0x106>
 800e83a:	6107      	str	r7, [r0, #16]
 800e83c:	e7a4      	b.n	800e788 <__mdiff+0x34>
 800e83e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e842:	fa11 f288 	uxtah	r2, r1, r8
 800e846:	1414      	asrs	r4, r2, #16
 800e848:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e84c:	b292      	uxth	r2, r2
 800e84e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e852:	f84e 2b04 	str.w	r2, [lr], #4
 800e856:	1421      	asrs	r1, r4, #16
 800e858:	e7e0      	b.n	800e81c <__mdiff+0xc8>
 800e85a:	3f01      	subs	r7, #1
 800e85c:	e7ea      	b.n	800e834 <__mdiff+0xe0>
 800e85e:	bf00      	nop
 800e860:	08090410 	.word	0x08090410
 800e864:	08090432 	.word	0x08090432

0800e868 <__d2b>:
 800e868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e86c:	460f      	mov	r7, r1
 800e86e:	2101      	movs	r1, #1
 800e870:	ec59 8b10 	vmov	r8, r9, d0
 800e874:	4616      	mov	r6, r2
 800e876:	f7ff fcd5 	bl	800e224 <_Balloc>
 800e87a:	4604      	mov	r4, r0
 800e87c:	b930      	cbnz	r0, 800e88c <__d2b+0x24>
 800e87e:	4602      	mov	r2, r0
 800e880:	4b24      	ldr	r3, [pc, #144]	; (800e914 <__d2b+0xac>)
 800e882:	4825      	ldr	r0, [pc, #148]	; (800e918 <__d2b+0xb0>)
 800e884:	f240 310f 	movw	r1, #783	; 0x30f
 800e888:	f7fe fc66 	bl	800d158 <__assert_func>
 800e88c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e894:	bb2d      	cbnz	r5, 800e8e2 <__d2b+0x7a>
 800e896:	9301      	str	r3, [sp, #4]
 800e898:	f1b8 0300 	subs.w	r3, r8, #0
 800e89c:	d026      	beq.n	800e8ec <__d2b+0x84>
 800e89e:	4668      	mov	r0, sp
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	f7ff fd87 	bl	800e3b4 <__lo0bits>
 800e8a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8aa:	b1e8      	cbz	r0, 800e8e8 <__d2b+0x80>
 800e8ac:	f1c0 0320 	rsb	r3, r0, #32
 800e8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b4:	430b      	orrs	r3, r1
 800e8b6:	40c2      	lsrs	r2, r0
 800e8b8:	6163      	str	r3, [r4, #20]
 800e8ba:	9201      	str	r2, [sp, #4]
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	61a3      	str	r3, [r4, #24]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	bf14      	ite	ne
 800e8c4:	2202      	movne	r2, #2
 800e8c6:	2201      	moveq	r2, #1
 800e8c8:	6122      	str	r2, [r4, #16]
 800e8ca:	b1bd      	cbz	r5, 800e8fc <__d2b+0x94>
 800e8cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e8d0:	4405      	add	r5, r0
 800e8d2:	603d      	str	r5, [r7, #0]
 800e8d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8d8:	6030      	str	r0, [r6, #0]
 800e8da:	4620      	mov	r0, r4
 800e8dc:	b003      	add	sp, #12
 800e8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8e6:	e7d6      	b.n	800e896 <__d2b+0x2e>
 800e8e8:	6161      	str	r1, [r4, #20]
 800e8ea:	e7e7      	b.n	800e8bc <__d2b+0x54>
 800e8ec:	a801      	add	r0, sp, #4
 800e8ee:	f7ff fd61 	bl	800e3b4 <__lo0bits>
 800e8f2:	9b01      	ldr	r3, [sp, #4]
 800e8f4:	6163      	str	r3, [r4, #20]
 800e8f6:	3020      	adds	r0, #32
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	e7e5      	b.n	800e8c8 <__d2b+0x60>
 800e8fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e904:	6038      	str	r0, [r7, #0]
 800e906:	6918      	ldr	r0, [r3, #16]
 800e908:	f7ff fd34 	bl	800e374 <__hi0bits>
 800e90c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e910:	e7e2      	b.n	800e8d8 <__d2b+0x70>
 800e912:	bf00      	nop
 800e914:	08090410 	.word	0x08090410
 800e918:	08090432 	.word	0x08090432

0800e91c <__sread>:
 800e91c:	b510      	push	{r4, lr}
 800e91e:	460c      	mov	r4, r1
 800e920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e924:	f000 f8bc 	bl	800eaa0 <_read_r>
 800e928:	2800      	cmp	r0, #0
 800e92a:	bfab      	itete	ge
 800e92c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e92e:	89a3      	ldrhlt	r3, [r4, #12]
 800e930:	181b      	addge	r3, r3, r0
 800e932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e936:	bfac      	ite	ge
 800e938:	6563      	strge	r3, [r4, #84]	; 0x54
 800e93a:	81a3      	strhlt	r3, [r4, #12]
 800e93c:	bd10      	pop	{r4, pc}

0800e93e <__swrite>:
 800e93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e942:	461f      	mov	r7, r3
 800e944:	898b      	ldrh	r3, [r1, #12]
 800e946:	05db      	lsls	r3, r3, #23
 800e948:	4605      	mov	r5, r0
 800e94a:	460c      	mov	r4, r1
 800e94c:	4616      	mov	r6, r2
 800e94e:	d505      	bpl.n	800e95c <__swrite+0x1e>
 800e950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e954:	2302      	movs	r3, #2
 800e956:	2200      	movs	r2, #0
 800e958:	f000 f890 	bl	800ea7c <_lseek_r>
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	4632      	mov	r2, r6
 800e96a:	463b      	mov	r3, r7
 800e96c:	4628      	mov	r0, r5
 800e96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e972:	f000 b8a7 	b.w	800eac4 <_write_r>

0800e976 <__sseek>:
 800e976:	b510      	push	{r4, lr}
 800e978:	460c      	mov	r4, r1
 800e97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e97e:	f000 f87d 	bl	800ea7c <_lseek_r>
 800e982:	1c43      	adds	r3, r0, #1
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	bf15      	itete	ne
 800e988:	6560      	strne	r0, [r4, #84]	; 0x54
 800e98a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e98e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e992:	81a3      	strheq	r3, [r4, #12]
 800e994:	bf18      	it	ne
 800e996:	81a3      	strhne	r3, [r4, #12]
 800e998:	bd10      	pop	{r4, pc}

0800e99a <__sclose>:
 800e99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e99e:	f000 b85d 	b.w	800ea5c <_close_r>
	...

0800e9a4 <fiprintf>:
 800e9a4:	b40e      	push	{r1, r2, r3}
 800e9a6:	b503      	push	{r0, r1, lr}
 800e9a8:	4601      	mov	r1, r0
 800e9aa:	ab03      	add	r3, sp, #12
 800e9ac:	4805      	ldr	r0, [pc, #20]	; (800e9c4 <fiprintf+0x20>)
 800e9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b2:	6800      	ldr	r0, [r0, #0]
 800e9b4:	9301      	str	r3, [sp, #4]
 800e9b6:	f000 f8c7 	bl	800eb48 <_vfiprintf_r>
 800e9ba:	b002      	add	sp, #8
 800e9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9c0:	b003      	add	sp, #12
 800e9c2:	4770      	bx	lr
 800e9c4:	200009e4 	.word	0x200009e4

0800e9c8 <_realloc_r>:
 800e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9cc:	4680      	mov	r8, r0
 800e9ce:	4614      	mov	r4, r2
 800e9d0:	460e      	mov	r6, r1
 800e9d2:	b921      	cbnz	r1, 800e9de <_realloc_r+0x16>
 800e9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d8:	4611      	mov	r1, r2
 800e9da:	f7fe b80f 	b.w	800c9fc <_malloc_r>
 800e9de:	b92a      	cbnz	r2, 800e9ec <_realloc_r+0x24>
 800e9e0:	f7ff f9ce 	bl	800dd80 <_free_r>
 800e9e4:	4625      	mov	r5, r4
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	f000 f9d8 	bl	800eda0 <_malloc_usable_size_r>
 800e9f0:	4284      	cmp	r4, r0
 800e9f2:	4607      	mov	r7, r0
 800e9f4:	d802      	bhi.n	800e9fc <_realloc_r+0x34>
 800e9f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9fa:	d812      	bhi.n	800ea22 <_realloc_r+0x5a>
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	4640      	mov	r0, r8
 800ea00:	f7fd fffc 	bl	800c9fc <_malloc_r>
 800ea04:	4605      	mov	r5, r0
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d0ed      	beq.n	800e9e6 <_realloc_r+0x1e>
 800ea0a:	42bc      	cmp	r4, r7
 800ea0c:	4622      	mov	r2, r4
 800ea0e:	4631      	mov	r1, r6
 800ea10:	bf28      	it	cs
 800ea12:	463a      	movcs	r2, r7
 800ea14:	f7fe fb92 	bl	800d13c <memcpy>
 800ea18:	4631      	mov	r1, r6
 800ea1a:	4640      	mov	r0, r8
 800ea1c:	f7ff f9b0 	bl	800dd80 <_free_r>
 800ea20:	e7e1      	b.n	800e9e6 <_realloc_r+0x1e>
 800ea22:	4635      	mov	r5, r6
 800ea24:	e7df      	b.n	800e9e6 <_realloc_r+0x1e>

0800ea26 <memmove>:
 800ea26:	4288      	cmp	r0, r1
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	eb01 0402 	add.w	r4, r1, r2
 800ea2e:	d902      	bls.n	800ea36 <memmove+0x10>
 800ea30:	4284      	cmp	r4, r0
 800ea32:	4623      	mov	r3, r4
 800ea34:	d807      	bhi.n	800ea46 <memmove+0x20>
 800ea36:	1e43      	subs	r3, r0, #1
 800ea38:	42a1      	cmp	r1, r4
 800ea3a:	d008      	beq.n	800ea4e <memmove+0x28>
 800ea3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea40:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea44:	e7f8      	b.n	800ea38 <memmove+0x12>
 800ea46:	4402      	add	r2, r0
 800ea48:	4601      	mov	r1, r0
 800ea4a:	428a      	cmp	r2, r1
 800ea4c:	d100      	bne.n	800ea50 <memmove+0x2a>
 800ea4e:	bd10      	pop	{r4, pc}
 800ea50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea58:	e7f7      	b.n	800ea4a <memmove+0x24>
	...

0800ea5c <_close_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	4d06      	ldr	r5, [pc, #24]	; (800ea78 <_close_r+0x1c>)
 800ea60:	2300      	movs	r3, #0
 800ea62:	4604      	mov	r4, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	602b      	str	r3, [r5, #0]
 800ea68:	f7f7 ffa5 	bl	80069b6 <_close>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_close_r+0x1a>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_close_r+0x1a>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	2000312c 	.word	0x2000312c

0800ea7c <_lseek_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4d07      	ldr	r5, [pc, #28]	; (800ea9c <_lseek_r+0x20>)
 800ea80:	4604      	mov	r4, r0
 800ea82:	4608      	mov	r0, r1
 800ea84:	4611      	mov	r1, r2
 800ea86:	2200      	movs	r2, #0
 800ea88:	602a      	str	r2, [r5, #0]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f7f7 ffba 	bl	8006a04 <_lseek>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_lseek_r+0x1e>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_lseek_r+0x1e>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	2000312c 	.word	0x2000312c

0800eaa0 <_read_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d07      	ldr	r5, [pc, #28]	; (800eac0 <_read_r+0x20>)
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	4608      	mov	r0, r1
 800eaa8:	4611      	mov	r1, r2
 800eaaa:	2200      	movs	r2, #0
 800eaac:	602a      	str	r2, [r5, #0]
 800eaae:	461a      	mov	r2, r3
 800eab0:	f7f7 ff48 	bl	8006944 <_read>
 800eab4:	1c43      	adds	r3, r0, #1
 800eab6:	d102      	bne.n	800eabe <_read_r+0x1e>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	b103      	cbz	r3, 800eabe <_read_r+0x1e>
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	2000312c 	.word	0x2000312c

0800eac4 <_write_r>:
 800eac4:	b538      	push	{r3, r4, r5, lr}
 800eac6:	4d07      	ldr	r5, [pc, #28]	; (800eae4 <_write_r+0x20>)
 800eac8:	4604      	mov	r4, r0
 800eaca:	4608      	mov	r0, r1
 800eacc:	4611      	mov	r1, r2
 800eace:	2200      	movs	r2, #0
 800ead0:	602a      	str	r2, [r5, #0]
 800ead2:	461a      	mov	r2, r3
 800ead4:	f7f7 ff53 	bl	800697e <_write>
 800ead8:	1c43      	adds	r3, r0, #1
 800eada:	d102      	bne.n	800eae2 <_write_r+0x1e>
 800eadc:	682b      	ldr	r3, [r5, #0]
 800eade:	b103      	cbz	r3, 800eae2 <_write_r+0x1e>
 800eae0:	6023      	str	r3, [r4, #0]
 800eae2:	bd38      	pop	{r3, r4, r5, pc}
 800eae4:	2000312c 	.word	0x2000312c

0800eae8 <abort>:
 800eae8:	b508      	push	{r3, lr}
 800eaea:	2006      	movs	r0, #6
 800eaec:	f000 fab0 	bl	800f050 <raise>
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	f7f7 ff1d 	bl	8006930 <_exit>

0800eaf6 <__sfputc_r>:
 800eaf6:	6893      	ldr	r3, [r2, #8]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	b410      	push	{r4}
 800eafe:	6093      	str	r3, [r2, #8]
 800eb00:	da08      	bge.n	800eb14 <__sfputc_r+0x1e>
 800eb02:	6994      	ldr	r4, [r2, #24]
 800eb04:	42a3      	cmp	r3, r4
 800eb06:	db01      	blt.n	800eb0c <__sfputc_r+0x16>
 800eb08:	290a      	cmp	r1, #10
 800eb0a:	d103      	bne.n	800eb14 <__sfputc_r+0x1e>
 800eb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb10:	f000 b94e 	b.w	800edb0 <__swbuf_r>
 800eb14:	6813      	ldr	r3, [r2, #0]
 800eb16:	1c58      	adds	r0, r3, #1
 800eb18:	6010      	str	r0, [r2, #0]
 800eb1a:	7019      	strb	r1, [r3, #0]
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <__sfputs_r>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	4606      	mov	r6, r0
 800eb28:	460f      	mov	r7, r1
 800eb2a:	4614      	mov	r4, r2
 800eb2c:	18d5      	adds	r5, r2, r3
 800eb2e:	42ac      	cmp	r4, r5
 800eb30:	d101      	bne.n	800eb36 <__sfputs_r+0x12>
 800eb32:	2000      	movs	r0, #0
 800eb34:	e007      	b.n	800eb46 <__sfputs_r+0x22>
 800eb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb3a:	463a      	mov	r2, r7
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f7ff ffda 	bl	800eaf6 <__sfputc_r>
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	d1f3      	bne.n	800eb2e <__sfputs_r+0xa>
 800eb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb48 <_vfiprintf_r>:
 800eb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	b09d      	sub	sp, #116	; 0x74
 800eb50:	4614      	mov	r4, r2
 800eb52:	4698      	mov	r8, r3
 800eb54:	4606      	mov	r6, r0
 800eb56:	b118      	cbz	r0, 800eb60 <_vfiprintf_r+0x18>
 800eb58:	6a03      	ldr	r3, [r0, #32]
 800eb5a:	b90b      	cbnz	r3, 800eb60 <_vfiprintf_r+0x18>
 800eb5c:	f7fe fa70 	bl	800d040 <__sinit>
 800eb60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb62:	07d9      	lsls	r1, r3, #31
 800eb64:	d405      	bmi.n	800eb72 <_vfiprintf_r+0x2a>
 800eb66:	89ab      	ldrh	r3, [r5, #12]
 800eb68:	059a      	lsls	r2, r3, #22
 800eb6a:	d402      	bmi.n	800eb72 <_vfiprintf_r+0x2a>
 800eb6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb6e:	f7fe fae3 	bl	800d138 <__retarget_lock_acquire_recursive>
 800eb72:	89ab      	ldrh	r3, [r5, #12]
 800eb74:	071b      	lsls	r3, r3, #28
 800eb76:	d501      	bpl.n	800eb7c <_vfiprintf_r+0x34>
 800eb78:	692b      	ldr	r3, [r5, #16]
 800eb7a:	b99b      	cbnz	r3, 800eba4 <_vfiprintf_r+0x5c>
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f000 f954 	bl	800ee2c <__swsetup_r>
 800eb84:	b170      	cbz	r0, 800eba4 <_vfiprintf_r+0x5c>
 800eb86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb88:	07dc      	lsls	r4, r3, #31
 800eb8a:	d504      	bpl.n	800eb96 <_vfiprintf_r+0x4e>
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb90:	b01d      	add	sp, #116	; 0x74
 800eb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb96:	89ab      	ldrh	r3, [r5, #12]
 800eb98:	0598      	lsls	r0, r3, #22
 800eb9a:	d4f7      	bmi.n	800eb8c <_vfiprintf_r+0x44>
 800eb9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb9e:	f7fe facc 	bl	800d13a <__retarget_lock_release_recursive>
 800eba2:	e7f3      	b.n	800eb8c <_vfiprintf_r+0x44>
 800eba4:	2300      	movs	r3, #0
 800eba6:	9309      	str	r3, [sp, #36]	; 0x24
 800eba8:	2320      	movs	r3, #32
 800ebaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebae:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebb2:	2330      	movs	r3, #48	; 0x30
 800ebb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ed68 <_vfiprintf_r+0x220>
 800ebb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebbc:	f04f 0901 	mov.w	r9, #1
 800ebc0:	4623      	mov	r3, r4
 800ebc2:	469a      	mov	sl, r3
 800ebc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebc8:	b10a      	cbz	r2, 800ebce <_vfiprintf_r+0x86>
 800ebca:	2a25      	cmp	r2, #37	; 0x25
 800ebcc:	d1f9      	bne.n	800ebc2 <_vfiprintf_r+0x7a>
 800ebce:	ebba 0b04 	subs.w	fp, sl, r4
 800ebd2:	d00b      	beq.n	800ebec <_vfiprintf_r+0xa4>
 800ebd4:	465b      	mov	r3, fp
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	4629      	mov	r1, r5
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f7ff ffa2 	bl	800eb24 <__sfputs_r>
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	f000 80a9 	beq.w	800ed38 <_vfiprintf_r+0x1f0>
 800ebe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebe8:	445a      	add	r2, fp
 800ebea:	9209      	str	r2, [sp, #36]	; 0x24
 800ebec:	f89a 3000 	ldrb.w	r3, [sl]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 80a1 	beq.w	800ed38 <_vfiprintf_r+0x1f0>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec00:	f10a 0a01 	add.w	sl, sl, #1
 800ec04:	9304      	str	r3, [sp, #16]
 800ec06:	9307      	str	r3, [sp, #28]
 800ec08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ec0e:	4654      	mov	r4, sl
 800ec10:	2205      	movs	r2, #5
 800ec12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec16:	4854      	ldr	r0, [pc, #336]	; (800ed68 <_vfiprintf_r+0x220>)
 800ec18:	f7f1 fb12 	bl	8000240 <memchr>
 800ec1c:	9a04      	ldr	r2, [sp, #16]
 800ec1e:	b9d8      	cbnz	r0, 800ec58 <_vfiprintf_r+0x110>
 800ec20:	06d1      	lsls	r1, r2, #27
 800ec22:	bf44      	itt	mi
 800ec24:	2320      	movmi	r3, #32
 800ec26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec2a:	0713      	lsls	r3, r2, #28
 800ec2c:	bf44      	itt	mi
 800ec2e:	232b      	movmi	r3, #43	; 0x2b
 800ec30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec34:	f89a 3000 	ldrb.w	r3, [sl]
 800ec38:	2b2a      	cmp	r3, #42	; 0x2a
 800ec3a:	d015      	beq.n	800ec68 <_vfiprintf_r+0x120>
 800ec3c:	9a07      	ldr	r2, [sp, #28]
 800ec3e:	4654      	mov	r4, sl
 800ec40:	2000      	movs	r0, #0
 800ec42:	f04f 0c0a 	mov.w	ip, #10
 800ec46:	4621      	mov	r1, r4
 800ec48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec4c:	3b30      	subs	r3, #48	; 0x30
 800ec4e:	2b09      	cmp	r3, #9
 800ec50:	d94d      	bls.n	800ecee <_vfiprintf_r+0x1a6>
 800ec52:	b1b0      	cbz	r0, 800ec82 <_vfiprintf_r+0x13a>
 800ec54:	9207      	str	r2, [sp, #28]
 800ec56:	e014      	b.n	800ec82 <_vfiprintf_r+0x13a>
 800ec58:	eba0 0308 	sub.w	r3, r0, r8
 800ec5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec60:	4313      	orrs	r3, r2
 800ec62:	9304      	str	r3, [sp, #16]
 800ec64:	46a2      	mov	sl, r4
 800ec66:	e7d2      	b.n	800ec0e <_vfiprintf_r+0xc6>
 800ec68:	9b03      	ldr	r3, [sp, #12]
 800ec6a:	1d19      	adds	r1, r3, #4
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	9103      	str	r1, [sp, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	bfbb      	ittet	lt
 800ec74:	425b      	neglt	r3, r3
 800ec76:	f042 0202 	orrlt.w	r2, r2, #2
 800ec7a:	9307      	strge	r3, [sp, #28]
 800ec7c:	9307      	strlt	r3, [sp, #28]
 800ec7e:	bfb8      	it	lt
 800ec80:	9204      	strlt	r2, [sp, #16]
 800ec82:	7823      	ldrb	r3, [r4, #0]
 800ec84:	2b2e      	cmp	r3, #46	; 0x2e
 800ec86:	d10c      	bne.n	800eca2 <_vfiprintf_r+0x15a>
 800ec88:	7863      	ldrb	r3, [r4, #1]
 800ec8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ec8c:	d134      	bne.n	800ecf8 <_vfiprintf_r+0x1b0>
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	1d1a      	adds	r2, r3, #4
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	9203      	str	r2, [sp, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bfb8      	it	lt
 800ec9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec9e:	3402      	adds	r4, #2
 800eca0:	9305      	str	r3, [sp, #20]
 800eca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ed78 <_vfiprintf_r+0x230>
 800eca6:	7821      	ldrb	r1, [r4, #0]
 800eca8:	2203      	movs	r2, #3
 800ecaa:	4650      	mov	r0, sl
 800ecac:	f7f1 fac8 	bl	8000240 <memchr>
 800ecb0:	b138      	cbz	r0, 800ecc2 <_vfiprintf_r+0x17a>
 800ecb2:	9b04      	ldr	r3, [sp, #16]
 800ecb4:	eba0 000a 	sub.w	r0, r0, sl
 800ecb8:	2240      	movs	r2, #64	; 0x40
 800ecba:	4082      	lsls	r2, r0
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	3401      	adds	r4, #1
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc6:	4829      	ldr	r0, [pc, #164]	; (800ed6c <_vfiprintf_r+0x224>)
 800ecc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eccc:	2206      	movs	r2, #6
 800ecce:	f7f1 fab7 	bl	8000240 <memchr>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d03f      	beq.n	800ed56 <_vfiprintf_r+0x20e>
 800ecd6:	4b26      	ldr	r3, [pc, #152]	; (800ed70 <_vfiprintf_r+0x228>)
 800ecd8:	bb1b      	cbnz	r3, 800ed22 <_vfiprintf_r+0x1da>
 800ecda:	9b03      	ldr	r3, [sp, #12]
 800ecdc:	3307      	adds	r3, #7
 800ecde:	f023 0307 	bic.w	r3, r3, #7
 800ece2:	3308      	adds	r3, #8
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece8:	443b      	add	r3, r7
 800ecea:	9309      	str	r3, [sp, #36]	; 0x24
 800ecec:	e768      	b.n	800ebc0 <_vfiprintf_r+0x78>
 800ecee:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	e7a6      	b.n	800ec46 <_vfiprintf_r+0xfe>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	3401      	adds	r4, #1
 800ecfc:	9305      	str	r3, [sp, #20]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	f04f 0c0a 	mov.w	ip, #10
 800ed04:	4620      	mov	r0, r4
 800ed06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed0a:	3a30      	subs	r2, #48	; 0x30
 800ed0c:	2a09      	cmp	r2, #9
 800ed0e:	d903      	bls.n	800ed18 <_vfiprintf_r+0x1d0>
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0c6      	beq.n	800eca2 <_vfiprintf_r+0x15a>
 800ed14:	9105      	str	r1, [sp, #20]
 800ed16:	e7c4      	b.n	800eca2 <_vfiprintf_r+0x15a>
 800ed18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e7f0      	b.n	800ed04 <_vfiprintf_r+0x1bc>
 800ed22:	ab03      	add	r3, sp, #12
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	462a      	mov	r2, r5
 800ed28:	4b12      	ldr	r3, [pc, #72]	; (800ed74 <_vfiprintf_r+0x22c>)
 800ed2a:	a904      	add	r1, sp, #16
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	f7fd fc1b 	bl	800c568 <_printf_float>
 800ed32:	4607      	mov	r7, r0
 800ed34:	1c78      	adds	r0, r7, #1
 800ed36:	d1d6      	bne.n	800ece6 <_vfiprintf_r+0x19e>
 800ed38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed3a:	07d9      	lsls	r1, r3, #31
 800ed3c:	d405      	bmi.n	800ed4a <_vfiprintf_r+0x202>
 800ed3e:	89ab      	ldrh	r3, [r5, #12]
 800ed40:	059a      	lsls	r2, r3, #22
 800ed42:	d402      	bmi.n	800ed4a <_vfiprintf_r+0x202>
 800ed44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed46:	f7fe f9f8 	bl	800d13a <__retarget_lock_release_recursive>
 800ed4a:	89ab      	ldrh	r3, [r5, #12]
 800ed4c:	065b      	lsls	r3, r3, #25
 800ed4e:	f53f af1d 	bmi.w	800eb8c <_vfiprintf_r+0x44>
 800ed52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed54:	e71c      	b.n	800eb90 <_vfiprintf_r+0x48>
 800ed56:	ab03      	add	r3, sp, #12
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <_vfiprintf_r+0x22c>)
 800ed5e:	a904      	add	r1, sp, #16
 800ed60:	4630      	mov	r0, r6
 800ed62:	f7fd ff39 	bl	800cbd8 <_printf_i>
 800ed66:	e7e4      	b.n	800ed32 <_vfiprintf_r+0x1ea>
 800ed68:	08090421 	.word	0x08090421
 800ed6c:	0809042b 	.word	0x0809042b
 800ed70:	0800c569 	.word	0x0800c569
 800ed74:	0800eb25 	.word	0x0800eb25
 800ed78:	08090427 	.word	0x08090427

0800ed7c <__ascii_mbtowc>:
 800ed7c:	b082      	sub	sp, #8
 800ed7e:	b901      	cbnz	r1, 800ed82 <__ascii_mbtowc+0x6>
 800ed80:	a901      	add	r1, sp, #4
 800ed82:	b142      	cbz	r2, 800ed96 <__ascii_mbtowc+0x1a>
 800ed84:	b14b      	cbz	r3, 800ed9a <__ascii_mbtowc+0x1e>
 800ed86:	7813      	ldrb	r3, [r2, #0]
 800ed88:	600b      	str	r3, [r1, #0]
 800ed8a:	7812      	ldrb	r2, [r2, #0]
 800ed8c:	1e10      	subs	r0, r2, #0
 800ed8e:	bf18      	it	ne
 800ed90:	2001      	movne	r0, #1
 800ed92:	b002      	add	sp, #8
 800ed94:	4770      	bx	lr
 800ed96:	4610      	mov	r0, r2
 800ed98:	e7fb      	b.n	800ed92 <__ascii_mbtowc+0x16>
 800ed9a:	f06f 0001 	mvn.w	r0, #1
 800ed9e:	e7f8      	b.n	800ed92 <__ascii_mbtowc+0x16>

0800eda0 <_malloc_usable_size_r>:
 800eda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eda4:	1f18      	subs	r0, r3, #4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	bfbc      	itt	lt
 800edaa:	580b      	ldrlt	r3, [r1, r0]
 800edac:	18c0      	addlt	r0, r0, r3
 800edae:	4770      	bx	lr

0800edb0 <__swbuf_r>:
 800edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb2:	460e      	mov	r6, r1
 800edb4:	4614      	mov	r4, r2
 800edb6:	4605      	mov	r5, r0
 800edb8:	b118      	cbz	r0, 800edc2 <__swbuf_r+0x12>
 800edba:	6a03      	ldr	r3, [r0, #32]
 800edbc:	b90b      	cbnz	r3, 800edc2 <__swbuf_r+0x12>
 800edbe:	f7fe f93f 	bl	800d040 <__sinit>
 800edc2:	69a3      	ldr	r3, [r4, #24]
 800edc4:	60a3      	str	r3, [r4, #8]
 800edc6:	89a3      	ldrh	r3, [r4, #12]
 800edc8:	071a      	lsls	r2, r3, #28
 800edca:	d525      	bpl.n	800ee18 <__swbuf_r+0x68>
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	b31b      	cbz	r3, 800ee18 <__swbuf_r+0x68>
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	6922      	ldr	r2, [r4, #16]
 800edd4:	1a98      	subs	r0, r3, r2
 800edd6:	6963      	ldr	r3, [r4, #20]
 800edd8:	b2f6      	uxtb	r6, r6
 800edda:	4283      	cmp	r3, r0
 800eddc:	4637      	mov	r7, r6
 800edde:	dc04      	bgt.n	800edea <__swbuf_r+0x3a>
 800ede0:	4621      	mov	r1, r4
 800ede2:	4628      	mov	r0, r5
 800ede4:	f7ff f9f6 	bl	800e1d4 <_fflush_r>
 800ede8:	b9e0      	cbnz	r0, 800ee24 <__swbuf_r+0x74>
 800edea:	68a3      	ldr	r3, [r4, #8]
 800edec:	3b01      	subs	r3, #1
 800edee:	60a3      	str	r3, [r4, #8]
 800edf0:	6823      	ldr	r3, [r4, #0]
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	6022      	str	r2, [r4, #0]
 800edf6:	701e      	strb	r6, [r3, #0]
 800edf8:	6962      	ldr	r2, [r4, #20]
 800edfa:	1c43      	adds	r3, r0, #1
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d004      	beq.n	800ee0a <__swbuf_r+0x5a>
 800ee00:	89a3      	ldrh	r3, [r4, #12]
 800ee02:	07db      	lsls	r3, r3, #31
 800ee04:	d506      	bpl.n	800ee14 <__swbuf_r+0x64>
 800ee06:	2e0a      	cmp	r6, #10
 800ee08:	d104      	bne.n	800ee14 <__swbuf_r+0x64>
 800ee0a:	4621      	mov	r1, r4
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f7ff f9e1 	bl	800e1d4 <_fflush_r>
 800ee12:	b938      	cbnz	r0, 800ee24 <__swbuf_r+0x74>
 800ee14:	4638      	mov	r0, r7
 800ee16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee18:	4621      	mov	r1, r4
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f000 f806 	bl	800ee2c <__swsetup_r>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d0d5      	beq.n	800edd0 <__swbuf_r+0x20>
 800ee24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ee28:	e7f4      	b.n	800ee14 <__swbuf_r+0x64>
	...

0800ee2c <__swsetup_r>:
 800ee2c:	b538      	push	{r3, r4, r5, lr}
 800ee2e:	4b2a      	ldr	r3, [pc, #168]	; (800eed8 <__swsetup_r+0xac>)
 800ee30:	4605      	mov	r5, r0
 800ee32:	6818      	ldr	r0, [r3, #0]
 800ee34:	460c      	mov	r4, r1
 800ee36:	b118      	cbz	r0, 800ee40 <__swsetup_r+0x14>
 800ee38:	6a03      	ldr	r3, [r0, #32]
 800ee3a:	b90b      	cbnz	r3, 800ee40 <__swsetup_r+0x14>
 800ee3c:	f7fe f900 	bl	800d040 <__sinit>
 800ee40:	89a3      	ldrh	r3, [r4, #12]
 800ee42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee46:	0718      	lsls	r0, r3, #28
 800ee48:	d422      	bmi.n	800ee90 <__swsetup_r+0x64>
 800ee4a:	06d9      	lsls	r1, r3, #27
 800ee4c:	d407      	bmi.n	800ee5e <__swsetup_r+0x32>
 800ee4e:	2309      	movs	r3, #9
 800ee50:	602b      	str	r3, [r5, #0]
 800ee52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee56:	81a3      	strh	r3, [r4, #12]
 800ee58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee5c:	e034      	b.n	800eec8 <__swsetup_r+0x9c>
 800ee5e:	0758      	lsls	r0, r3, #29
 800ee60:	d512      	bpl.n	800ee88 <__swsetup_r+0x5c>
 800ee62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee64:	b141      	cbz	r1, 800ee78 <__swsetup_r+0x4c>
 800ee66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee6a:	4299      	cmp	r1, r3
 800ee6c:	d002      	beq.n	800ee74 <__swsetup_r+0x48>
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7fe ff86 	bl	800dd80 <_free_r>
 800ee74:	2300      	movs	r3, #0
 800ee76:	6363      	str	r3, [r4, #52]	; 0x34
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee7e:	81a3      	strh	r3, [r4, #12]
 800ee80:	2300      	movs	r3, #0
 800ee82:	6063      	str	r3, [r4, #4]
 800ee84:	6923      	ldr	r3, [r4, #16]
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	f043 0308 	orr.w	r3, r3, #8
 800ee8e:	81a3      	strh	r3, [r4, #12]
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	b94b      	cbnz	r3, 800eea8 <__swsetup_r+0x7c>
 800ee94:	89a3      	ldrh	r3, [r4, #12]
 800ee96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee9e:	d003      	beq.n	800eea8 <__swsetup_r+0x7c>
 800eea0:	4621      	mov	r1, r4
 800eea2:	4628      	mov	r0, r5
 800eea4:	f000 f84d 	bl	800ef42 <__smakebuf_r>
 800eea8:	89a0      	ldrh	r0, [r4, #12]
 800eeaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eeae:	f010 0301 	ands.w	r3, r0, #1
 800eeb2:	d00a      	beq.n	800eeca <__swsetup_r+0x9e>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	6963      	ldr	r3, [r4, #20]
 800eeba:	425b      	negs	r3, r3
 800eebc:	61a3      	str	r3, [r4, #24]
 800eebe:	6923      	ldr	r3, [r4, #16]
 800eec0:	b943      	cbnz	r3, 800eed4 <__swsetup_r+0xa8>
 800eec2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eec6:	d1c4      	bne.n	800ee52 <__swsetup_r+0x26>
 800eec8:	bd38      	pop	{r3, r4, r5, pc}
 800eeca:	0781      	lsls	r1, r0, #30
 800eecc:	bf58      	it	pl
 800eece:	6963      	ldrpl	r3, [r4, #20]
 800eed0:	60a3      	str	r3, [r4, #8]
 800eed2:	e7f4      	b.n	800eebe <__swsetup_r+0x92>
 800eed4:	2000      	movs	r0, #0
 800eed6:	e7f7      	b.n	800eec8 <__swsetup_r+0x9c>
 800eed8:	200009e4 	.word	0x200009e4

0800eedc <__ascii_wctomb>:
 800eedc:	b149      	cbz	r1, 800eef2 <__ascii_wctomb+0x16>
 800eede:	2aff      	cmp	r2, #255	; 0xff
 800eee0:	bf85      	ittet	hi
 800eee2:	238a      	movhi	r3, #138	; 0x8a
 800eee4:	6003      	strhi	r3, [r0, #0]
 800eee6:	700a      	strbls	r2, [r1, #0]
 800eee8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800eeec:	bf98      	it	ls
 800eeee:	2001      	movls	r0, #1
 800eef0:	4770      	bx	lr
 800eef2:	4608      	mov	r0, r1
 800eef4:	4770      	bx	lr

0800eef6 <__swhatbuf_r>:
 800eef6:	b570      	push	{r4, r5, r6, lr}
 800eef8:	460c      	mov	r4, r1
 800eefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eefe:	2900      	cmp	r1, #0
 800ef00:	b096      	sub	sp, #88	; 0x58
 800ef02:	4615      	mov	r5, r2
 800ef04:	461e      	mov	r6, r3
 800ef06:	da0d      	bge.n	800ef24 <__swhatbuf_r+0x2e>
 800ef08:	89a3      	ldrh	r3, [r4, #12]
 800ef0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ef0e:	f04f 0100 	mov.w	r1, #0
 800ef12:	bf0c      	ite	eq
 800ef14:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ef18:	2340      	movne	r3, #64	; 0x40
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	6031      	str	r1, [r6, #0]
 800ef1e:	602b      	str	r3, [r5, #0]
 800ef20:	b016      	add	sp, #88	; 0x58
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	466a      	mov	r2, sp
 800ef26:	f000 f849 	bl	800efbc <_fstat_r>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	dbec      	blt.n	800ef08 <__swhatbuf_r+0x12>
 800ef2e:	9901      	ldr	r1, [sp, #4]
 800ef30:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ef34:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ef38:	4259      	negs	r1, r3
 800ef3a:	4159      	adcs	r1, r3
 800ef3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef40:	e7eb      	b.n	800ef1a <__swhatbuf_r+0x24>

0800ef42 <__smakebuf_r>:
 800ef42:	898b      	ldrh	r3, [r1, #12]
 800ef44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef46:	079d      	lsls	r5, r3, #30
 800ef48:	4606      	mov	r6, r0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	d507      	bpl.n	800ef5e <__smakebuf_r+0x1c>
 800ef4e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef52:	6023      	str	r3, [r4, #0]
 800ef54:	6123      	str	r3, [r4, #16]
 800ef56:	2301      	movs	r3, #1
 800ef58:	6163      	str	r3, [r4, #20]
 800ef5a:	b002      	add	sp, #8
 800ef5c:	bd70      	pop	{r4, r5, r6, pc}
 800ef5e:	ab01      	add	r3, sp, #4
 800ef60:	466a      	mov	r2, sp
 800ef62:	f7ff ffc8 	bl	800eef6 <__swhatbuf_r>
 800ef66:	9900      	ldr	r1, [sp, #0]
 800ef68:	4605      	mov	r5, r0
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f7fd fd46 	bl	800c9fc <_malloc_r>
 800ef70:	b948      	cbnz	r0, 800ef86 <__smakebuf_r+0x44>
 800ef72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef76:	059a      	lsls	r2, r3, #22
 800ef78:	d4ef      	bmi.n	800ef5a <__smakebuf_r+0x18>
 800ef7a:	f023 0303 	bic.w	r3, r3, #3
 800ef7e:	f043 0302 	orr.w	r3, r3, #2
 800ef82:	81a3      	strh	r3, [r4, #12]
 800ef84:	e7e3      	b.n	800ef4e <__smakebuf_r+0xc>
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	6020      	str	r0, [r4, #0]
 800ef8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef8e:	81a3      	strh	r3, [r4, #12]
 800ef90:	9b00      	ldr	r3, [sp, #0]
 800ef92:	6163      	str	r3, [r4, #20]
 800ef94:	9b01      	ldr	r3, [sp, #4]
 800ef96:	6120      	str	r0, [r4, #16]
 800ef98:	b15b      	cbz	r3, 800efb2 <__smakebuf_r+0x70>
 800ef9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f000 f81e 	bl	800efe0 <_isatty_r>
 800efa4:	b128      	cbz	r0, 800efb2 <__smakebuf_r+0x70>
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	f023 0303 	bic.w	r3, r3, #3
 800efac:	f043 0301 	orr.w	r3, r3, #1
 800efb0:	81a3      	strh	r3, [r4, #12]
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	431d      	orrs	r5, r3
 800efb6:	81a5      	strh	r5, [r4, #12]
 800efb8:	e7cf      	b.n	800ef5a <__smakebuf_r+0x18>
	...

0800efbc <_fstat_r>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4d07      	ldr	r5, [pc, #28]	; (800efdc <_fstat_r+0x20>)
 800efc0:	2300      	movs	r3, #0
 800efc2:	4604      	mov	r4, r0
 800efc4:	4608      	mov	r0, r1
 800efc6:	4611      	mov	r1, r2
 800efc8:	602b      	str	r3, [r5, #0]
 800efca:	f7f7 fd00 	bl	80069ce <_fstat>
 800efce:	1c43      	adds	r3, r0, #1
 800efd0:	d102      	bne.n	800efd8 <_fstat_r+0x1c>
 800efd2:	682b      	ldr	r3, [r5, #0]
 800efd4:	b103      	cbz	r3, 800efd8 <_fstat_r+0x1c>
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	bd38      	pop	{r3, r4, r5, pc}
 800efda:	bf00      	nop
 800efdc:	2000312c 	.word	0x2000312c

0800efe0 <_isatty_r>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4d06      	ldr	r5, [pc, #24]	; (800effc <_isatty_r+0x1c>)
 800efe4:	2300      	movs	r3, #0
 800efe6:	4604      	mov	r4, r0
 800efe8:	4608      	mov	r0, r1
 800efea:	602b      	str	r3, [r5, #0]
 800efec:	f7f7 fcff 	bl	80069ee <_isatty>
 800eff0:	1c43      	adds	r3, r0, #1
 800eff2:	d102      	bne.n	800effa <_isatty_r+0x1a>
 800eff4:	682b      	ldr	r3, [r5, #0]
 800eff6:	b103      	cbz	r3, 800effa <_isatty_r+0x1a>
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	bd38      	pop	{r3, r4, r5, pc}
 800effc:	2000312c 	.word	0x2000312c

0800f000 <_raise_r>:
 800f000:	291f      	cmp	r1, #31
 800f002:	b538      	push	{r3, r4, r5, lr}
 800f004:	4604      	mov	r4, r0
 800f006:	460d      	mov	r5, r1
 800f008:	d904      	bls.n	800f014 <_raise_r+0x14>
 800f00a:	2316      	movs	r3, #22
 800f00c:	6003      	str	r3, [r0, #0]
 800f00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f012:	bd38      	pop	{r3, r4, r5, pc}
 800f014:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f016:	b112      	cbz	r2, 800f01e <_raise_r+0x1e>
 800f018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f01c:	b94b      	cbnz	r3, 800f032 <_raise_r+0x32>
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 f830 	bl	800f084 <_getpid_r>
 800f024:	462a      	mov	r2, r5
 800f026:	4601      	mov	r1, r0
 800f028:	4620      	mov	r0, r4
 800f02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f02e:	f000 b817 	b.w	800f060 <_kill_r>
 800f032:	2b01      	cmp	r3, #1
 800f034:	d00a      	beq.n	800f04c <_raise_r+0x4c>
 800f036:	1c59      	adds	r1, r3, #1
 800f038:	d103      	bne.n	800f042 <_raise_r+0x42>
 800f03a:	2316      	movs	r3, #22
 800f03c:	6003      	str	r3, [r0, #0]
 800f03e:	2001      	movs	r0, #1
 800f040:	e7e7      	b.n	800f012 <_raise_r+0x12>
 800f042:	2400      	movs	r4, #0
 800f044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f048:	4628      	mov	r0, r5
 800f04a:	4798      	blx	r3
 800f04c:	2000      	movs	r0, #0
 800f04e:	e7e0      	b.n	800f012 <_raise_r+0x12>

0800f050 <raise>:
 800f050:	4b02      	ldr	r3, [pc, #8]	; (800f05c <raise+0xc>)
 800f052:	4601      	mov	r1, r0
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	f7ff bfd3 	b.w	800f000 <_raise_r>
 800f05a:	bf00      	nop
 800f05c:	200009e4 	.word	0x200009e4

0800f060 <_kill_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d07      	ldr	r5, [pc, #28]	; (800f080 <_kill_r+0x20>)
 800f064:	2300      	movs	r3, #0
 800f066:	4604      	mov	r4, r0
 800f068:	4608      	mov	r0, r1
 800f06a:	4611      	mov	r1, r2
 800f06c:	602b      	str	r3, [r5, #0]
 800f06e:	f7f7 fc4f 	bl	8006910 <_kill>
 800f072:	1c43      	adds	r3, r0, #1
 800f074:	d102      	bne.n	800f07c <_kill_r+0x1c>
 800f076:	682b      	ldr	r3, [r5, #0]
 800f078:	b103      	cbz	r3, 800f07c <_kill_r+0x1c>
 800f07a:	6023      	str	r3, [r4, #0]
 800f07c:	bd38      	pop	{r3, r4, r5, pc}
 800f07e:	bf00      	nop
 800f080:	2000312c 	.word	0x2000312c

0800f084 <_getpid_r>:
 800f084:	f7f7 bc3c 	b.w	8006900 <_getpid>

0800f088 <_init>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	bf00      	nop
 800f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08e:	bc08      	pop	{r3}
 800f090:	469e      	mov	lr, r3
 800f092:	4770      	bx	lr

0800f094 <_fini>:
 800f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f096:	bf00      	nop
 800f098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f09a:	bc08      	pop	{r3}
 800f09c:	469e      	mov	lr, r3
 800f09e:	4770      	bx	lr
